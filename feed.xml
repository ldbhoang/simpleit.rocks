<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT 🤘 Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>https://simpleit.rocks/</link>
    <atom:link href="https://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 11 Apr 2018 18:20:30 +0000</pubDate>
    <lastBuildDate>Wed, 11 Apr 2018 18:20:30 +0000</lastBuildDate>
    <generator>Jekyll v3.7.2</generator>
    
      <item>
        <title>Generate UML class diagrams from django models</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;To visualize and better understand a project structure we can create
&lt;abbr title=&quot;Unified Modeling Language&quot;&gt;UML&lt;/abbr&gt; class diagrams from Django models.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://en.wikipedia.org/wiki/Class_diagram&quot;&gt;
  &lt;p&gt;a class diagram in the Unified Modeling Language (&lt;abbr title=&quot;Unified Modeling Language&quot;&gt;UML&lt;/abbr&gt;) is a type of
static structure diagram that describes the structure of a system by
showing the system’s classes, their attributes, operations (or
methods), and the relationships among objects.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Class_diagram&quot;&gt;Wikipedia&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will use a special command for this task included in the
&lt;a href=&quot;https://github.com/django-extensions/django-extensions&quot;&gt;django-extensions&lt;/a&gt;
package called:
&lt;a href=&quot;https://django-extensions.readthedocs.io/en/latest/graph_models.html&quot;&gt;graph_models&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://django-extensions.readthedocs.io/en/latest/graph_models.html&quot;&gt;
  &lt;p&gt;Creates a GraphViz dot file for the specified app names based on
their models.py. You can pass multiple app names and they will all
be combined into a single model. Output is usually directed to a dot
file.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://django-extensions.readthedocs.io/en/latest/graph_models.html&quot;&gt;Graph
models&lt;/a&gt; definition&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;install-django-extensions&quot;&gt;Install django extensions&lt;/h3&gt;

&lt;p&gt;Considering you already have Django installed (for this example I will
use the &lt;a href=&quot;https://github.com/wagtail/wagtail&quot;&gt;Wagtail&lt;/a&gt; project), then
we install &lt;em&gt;django extensions&lt;/em&gt; with &lt;kbd&gt;pip install
django-extensions&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;pip install django-extensions&lt;/kbd&gt;
Collecting django-extensions
  Using cached django_extensions-2.0.6-py2.py3-none-any.whl
Collecting six&amp;gt;=1.2 (from django-extensions)
  Using cached six-1.11.0-py2.py3-none-any.whl
Installing collected packages: six, django-extensions
Successfully installed django-extensions-2.0.6 six-1.11.0
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;add-to-installed-apps&quot;&gt;Add to installed apps&lt;/h3&gt;

&lt;p&gt;To make your Django project aware of the new package, we add it to
&lt;code class=&quot;highlighter-rouge&quot;&gt;INSTALLED_APPS&lt;/code&gt; in your configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;project&amp;gt;/settings.py&lt;/code&gt;,
in a Wagtail project called &lt;code class=&quot;highlighter-rouge&quot;&gt;mysite&lt;/code&gt; this is at
&lt;code class=&quot;highlighter-rouge&quot;&gt;mysite/settings/base.py&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'django_extensions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-diagrams-generators&quot;&gt;Install diagrams generators&lt;/h3&gt;

&lt;p&gt;You have to choose between two diagram generators:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Graphviz or&lt;/li&gt;
  &lt;li&gt;Dotplus&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;before using the command or you will get:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;python manage.py graph_models -a -o myapp_models.png&lt;/kbd&gt;
CommandError: Neither pygraphviz nor pydotplus could be found to generate the image
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;I prefer to use &lt;code class=&quot;highlighter-rouge&quot;&gt;pydotplus&lt;/code&gt; as it easier to install than Graphviz and
its dependencies so we use &lt;kbd&gt;pip install pydotplus&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;pip install pydotplus&lt;/kbd&gt;
Collecting pydotplus
Collecting pyparsing&amp;gt;=2.0.1 (from pydotplus)
  Using cached pyparsing-2.2.0-py2.py3-none-any.whl
Installing collected packages: pyparsing, pydotplus
Successfully installed pydotplus-2.0.2 pyparsing-2.2.0
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;generate-diagrams&quot;&gt;Generate diagrams&lt;/h3&gt;

&lt;p&gt;Now we have everything installed and ready to generate diagrams using
the command &lt;kbd&gt;python manage.py graph_models&lt;/kbd&gt;&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;python manage.py graph_models -a -o myapp_models.png&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;This will give use the entire Wagtail class diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/wagtail_models.png&quot; alt=&quot;Wagtail models class diagram&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or grouped by application (&lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt;):&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;./manage.py graph_models -a -g -o my_project_visualized.png&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/wagtail_models_application_grouping.png&quot; alt=&quot;Wagtail models class diagram grouped by app&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, let’s generate a class diagram for Django (v2.0.3) models:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/django_models.png&quot; alt=&quot;Django models class diagram grouped by app&quot; class=&quot;img-fluid&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Besides you probable have done the class diagram before starting the
project, it can easily get outdated after a while. This is a useful
technique to keep your diagrams in sync with the current status of the
project.&lt;/p&gt;

&lt;p&gt;Have a look at
&lt;a href=&quot;https://django-extensions.readthedocs.io/en/latest/graph_models.html&quot;&gt;https://django-extensions.readthedocs.io/en/latest/graph_models.html&lt;/a&gt;
for a full description of &lt;code class=&quot;highlighter-rouge&quot;&gt;graph-models&lt;/code&gt; options.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/django-extensions/django-extensions&quot;&gt;https://github.com/django-extensions/django-extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 24 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/generate-uml-class-diagrams-from-django-models/</link>
        <guid isPermaLink="true">https://simpleit.rocks/generate-uml-class-diagrams-from-django-models/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>Python Tools To Write Better Code</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Python community maintains a set of tools that are helpful in every
project. They provide quick feedback of your code health and how much
it sticks to standards and better practices.&lt;/p&gt;

&lt;p&gt;These tools are:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;pep8&lt;/dt&gt;
  &lt;dd&gt;style checker&lt;/dd&gt;
  &lt;dt&gt;pyflakes&lt;/dt&gt;
  &lt;dd&gt;checks source code for errors&lt;/dd&gt;
  &lt;dt&gt;mccabe&lt;/dt&gt;
  &lt;dd&gt;complexity checker&lt;/dd&gt;
  &lt;dt&gt;flake8&lt;/dt&gt;
  &lt;dd&gt;code checker (pep8, pyflakes, mccabe, and third-party plugins to
check the style and quality of some python code)&lt;/dd&gt;
  &lt;dt&gt;Pylint&lt;/dt&gt;
  &lt;dd&gt;Checks for coding standards, errors and duplicated code.&lt;/dd&gt;
  &lt;dt&gt;Coverage&lt;/dt&gt;
  &lt;dd&gt;measure effectiveness of tests&lt;/dd&gt;
&lt;/dl&gt;

&lt;h2 id=&quot;tools&quot;&gt;Tools&lt;/h2&gt;

&lt;h3 id=&quot;python-code-style-pep8&quot;&gt;Python code style (Pep8)&lt;/h3&gt;

&lt;p&gt;It was formerly called &lt;strong&gt;pep8&lt;/strong&gt; and it checks Python coding style
conventions defined in PEP8.&lt;/p&gt;

&lt;p&gt;Project homepage: &lt;a href=&quot;https://github.com/PyCQA/pycodestyle&quot;&gt;https://github.com/PyCQA/pycodestyle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is based in PEP8 style conventions
(&lt;a href=&quot;http://www.python.org/dev/peps/pep-0008/&quot;&gt;http://www.python.org/dev/peps/pep-0008/&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;
  &lt;p&gt;The guidelines provided here are intended to improve the readability
of code and make it consistent across the wide spectrum of Python
code. As PEP 20 says, “Readability counts”. A style guide is about
consistency. Consistency with this style guide is
important. Consistency within a project is more important. Consistency
within one module or function is the most important.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/&quot;&gt;PEP8&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mccabe&quot;&gt;McCabe&lt;/h3&gt;

&lt;p&gt;McCabe is a &lt;strong&gt;complexity checker for Python&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Project homepage: &lt;a href=&quot;https://github.com/PyCQA/mccabe&quot;&gt;https://github.com/PyCQA/mccabe&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is based in the &lt;strong&gt;Cyclomatic complexity&lt;/strong&gt; concept.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;
  &lt;p&gt;Cyclomatic complexity is a software metric (measurement), used to
indicate the complexity of a program. It is a quantitative measure
of the number of linearly independent paths through a program’s
source code. It was developed by Thomas J. McCabe, Sr. in 1976.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Wikipedia page for &lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;Cyclomatic complexity&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is useful for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Measuring how much a program is structured&lt;/li&gt;
  &lt;li&gt;Determining the number of test cases that are necessary to achieve
thorough test coverage of a particular module&lt;/li&gt;
  &lt;li&gt;Limiting complexity during development
    &lt;ul&gt;
      &lt;li&gt;Functions and methods that have the highest complexity tend to also
contain the most defects.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Measure modules cohesion through the analysis of its complexity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;error-checks-pyflakes&quot;&gt;Error checks: Pyflakes&lt;/h3&gt;

&lt;p&gt;It checks Python source files for errors by parsing source code.&lt;/p&gt;

&lt;p&gt;Project homepage: &lt;a href=&quot;https://github.com/PyCQA/pyflakes&quot;&gt;https://github.com/PyCQA/pyflakes&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;all-together-flake8&quot;&gt;All together: Flake8&lt;/h3&gt;

&lt;p&gt;Project Homepage: &lt;a href=&quot;https://gitlab.com/pycqa/flake8&quot;&gt;https://gitlab.com/pycqa/flake8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Flake8 runs all the above tools with the &lt;code class=&quot;highlighter-rouge&quot;&gt;flake8&lt;/code&gt; command.&lt;/p&gt;

&lt;h4 id=&quot;pylint&quot;&gt;Pylint&lt;/h4&gt;

&lt;p&gt;Project Homepage: &lt;a href=&quot;https://www.pylint.org/&quot;&gt;https://www.pylint.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-coverage&quot;&gt;Code Coverage&lt;/h3&gt;

&lt;p&gt;It measures code coverage of Python projects.&lt;/p&gt;

&lt;p&gt;Project Homepage: &lt;a href=&quot;http://coverage.readthedocs.io/en/latest/&quot;&gt;http://coverage.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://coverage.readthedocs.io/en/latest/&quot;&gt;
  &lt;p&gt;It monitors your program, noting which parts of the code have been
executed, then analyzes the source to identify code that could have
been executed but was not.&lt;/p&gt;

  &lt;p&gt;Coverage measurement is typically used to gauge the effectiveness of
tests. It can show which parts of your code are being exercised by
tests, and which are not.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;http://coverage.readthedocs.io/en/latest/&quot;&gt;Coverage.py project&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mail.python.org/mailman/listinfo/code-quality/&quot;&gt;https://mail.python.org/mailman/listinfo/code-quality/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cyclomatic_complexity&quot;&gt;https://en.wikipedia.org/wiki/Cyclomatic_complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/python-tools-to-write-better-code/</link>
        <guid isPermaLink="true">https://simpleit.rocks/python-tools-to-write-better-code/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>language</category>
        
      </item>
    
      <item>
        <title>Introduction To Hugo For Jekyll Users</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;After building many websites with Jekyll for a while, I’ve decided to
try &lt;strong&gt;Hugo&lt;/strong&gt; and was greatly impressed by its capabilities.&lt;/p&gt;

&lt;p&gt;This article shows the main differences between Jekyll and Hugo
philosophies.&lt;/p&gt;

&lt;h2 id=&quot;includes&quot;&gt;includes&lt;/h2&gt;

&lt;p&gt;Jekyll includes have their equivalent in Hugo as
&lt;strong&gt;&lt;a href=&quot;https://gohugo.io/content-management/shortcodes/&quot;&gt;shortcodes&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A shortcode is a simple snippet inside a content file that Hugo will
render using a predefined template.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Shortcodes&lt;/em&gt; can be used to include code in posts, but in contrast to
Jekyll, to include content in templates you need to use &lt;strong&gt;partial
templates&lt;/strong&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;wysiwyg-structure&quot;&gt;WYSIWYG structure&lt;/h2&gt;

&lt;p&gt;The site structure is reflected in the website structure by default.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hugo believes that you organize your content with a purpose. The
same structure that works to organize your source content is used to
organize the rendered site.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing that can be changed through front matter is the &lt;code class=&quot;highlighter-rouge&quot;&gt;slug&lt;/code&gt;,
then the path will be the same as where it is located under the
&lt;code class=&quot;highlighter-rouge&quot;&gt;contents&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;content/posts/my-post.md&lt;/code&gt; becomes
&lt;code class=&quot;highlighter-rouge&quot;&gt;example.com/posts/my-post/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The above statement reflects the original design that Hugo used to
have, now you can tweak some of that behaviour with front matter
variables or other configurations, for example to completely change
the destination path, the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; variable can also be set as in Jekyll.&lt;/p&gt;

&lt;h3 id=&quot;sections&quot;&gt;Sections&lt;/h3&gt;

&lt;p&gt;Articles and posts goes into &lt;code class=&quot;highlighter-rouge&quot;&gt;/content&lt;/code&gt;, each directory at
&lt;code class=&quot;highlighter-rouge&quot;&gt;content/&amp;lt;DIRECTORIES&amp;gt;&lt;/code&gt; are special in Hugo and are called &lt;strong&gt;Content
Sections&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Each &lt;em&gt;section&lt;/em&gt; can have nested directories, but all the content inside
them, will have the same base &lt;strong&gt;section&lt;/strong&gt;, (i.e. the first directory
under &lt;code class=&quot;highlighter-rouge&quot;&gt;/content&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;inspect-equivalent&quot;&gt;Inspect equivalent&lt;/h2&gt;

&lt;p&gt;There is a helpful &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ &amp;lt;var&amp;gt; | inspect}}&lt;/code&gt; filter tag in Jekyll that
allows to print any variable in a template. The closest equivalent in
Hugo is the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ print &quot;%#v&quot; &amp;lt;var&amp;gt; }}&lt;/code&gt;. &lt;sup id=&quot;fnref:printvars&quot;&gt;&lt;a href=&quot;#fn:printvars&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To print the current &lt;em&gt;Page&lt;/em&gt; data &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ printf &quot;%#v&quot; . }}&lt;/code&gt; will print:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the top level object and&lt;/li&gt;
  &lt;li&gt;object fields&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E.g.: for a &lt;strong&gt;Section&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;/content/communication&lt;/code&gt; it will print something
like:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hugolib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PageOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hugolib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0xc4210f2a00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hugolib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paginatorInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sema&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetPathDescriptor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hugolib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetPathDescriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helpers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0xc4200ca240&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTML&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delimiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPlainText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoUgly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotAlternative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Kind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;section&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;communication&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;_index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;communication/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LangPrefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/communication/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Addends&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExpandedPermalink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UglyURLs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HTML&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suffix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delimiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;canonical&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPlainText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoUgly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotAlternative&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:printvars&quot;&gt;
      &lt;p&gt;https://discourse.gohugo.io/t/how-to-debug-a-template/1027 &lt;a href=&quot;#fnref:printvars&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 14 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/introduction-to-hugo-for-jekyll-users/</link>
        <guid isPermaLink="true">https://simpleit.rocks/introduction-to-hugo-for-jekyll-users/</guid>
        
        
        <category>docs</category>
        
        <category>golang</category>
        
        <category>hugo</category>
        
      </item>
    
      <item>
        <title>Hugo overview and basic concepts</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Hugo is a static site generators based in Google’s
&lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt; language.&lt;/p&gt;

&lt;p&gt;This is a guide based in the official &lt;em&gt;quickstart&lt;/em&gt; guide explaining
its concepts.&lt;/p&gt;

&lt;h2 id=&quot;command-line&quot;&gt;Command line&lt;/h2&gt;

&lt;p&gt;As with all modern frameworks, it comes with a command line utility
&lt;kbd&gt;hugo&lt;/kbd&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://gohugo.io/getting-started/directory-structure/&quot;&gt;
  &lt;p&gt;Hugo’s CLI scaffolds a project directory structure and then takes
that single directory and uses it as the input to create a complete
website.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://gohugo.io/getting-started/directory-structure/&quot;&gt;Hugo Directory Structure&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;quickstart$&lt;/span&gt; &lt;kbd&gt;hugo --help&lt;/kbd&gt;
hugo is the main command, used to build your Hugo site.

Hugo is a Fast and Flexible Static Site Generator
built with love by spf13 and friends in Go.

Complete documentation is available at http://gohugo.io/.

Usage:
  hugo [flags]
  hugo [command]

Available Commands:
  server      A high performance webserver
  version     Print the version number of Hugo
  env         Print Hugo version and environment info
  config      Print the site configuration
  benchmark   Benchmark Hugo by building a site a number of times.
  convert     Convert your content to different formats
  new         Create new content for your site
  list        Listing out various types of content
  undraft     Undraft changes the content's draft status from 'True' to 'False'
  import      Import your site from others.
  gen         A collection of several useful generators.

Flags:
  -b, --baseURL string          hostname (and path) to the root, e.g. http://spf13.com/
  -D, --buildDrafts             include content marked as draft
  -E, --buildExpired            include expired content
  -F, --buildFuture             include content with publishdate in the future
      --cacheDir string         filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/
      --canonifyURLs            if true, all relative URLs will be canonicalized using baseURL
      --cleanDestinationDir     Remove files from destination not found in static directories
      --config string           config file (default is path/config.yaml|json|toml)
  -c, --contentDir string       filesystem path to content directory
  -d, --destination string      filesystem path to write files to
      --disable404              Do not render 404 page
      --disableRSS              Do not build RSS files
      --disableSitemap          Do not build Sitemap file
      --enableGitInfo           Add Git revision, date and author info to the pages
      --forceSyncStatic         Copy all files when static is changed.
      --i18n-warnings           Print missing translations
      --ignoreCache             Ignores the cache directory
  -l, --layoutDir string        filesystem path to layout directory
      --log                     Enable Logging
      --logFile string          Log File path (if set, logging enabled automatically)
      --noChmod                 Don't sync permission mode of files
      --noTimes                 Don't sync modification time of files
      --pluralizeListTitles     Pluralize titles in lists using inflect (default true)
      --preserveTaxonomyNames   Preserve taxonomy names as written (&quot;Gérard Depardieu&quot; vs &quot;gerard-depardieu&quot;)
      --quiet                   build in quiet mode
      --renderToMemory          render to memory (only useful for benchmark testing)
  -s, --source string           filesystem path to read files relative from
      --stepAnalysis            display memory and timing of different steps of the program
  -t, --theme string            theme to use (located in /themes/THEMENAME/)
      --uglyURLs                if true, use /filename.html instead of /filename/
  -v, --verbose                 verbose output
      --verboseLog              verbose logging
  -w, --watch                   watch filesystem for changes and recreate as needed

Additional help topics:
  hugo check     Contains some verification checks

Use &quot;hugo [command] --help&quot; for more information about a command.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-site&quot;&gt;Create a site&lt;/h2&gt;

&lt;p&gt;To create a new site &lt;kbd&gt;hugo new site&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;hugo new site --help&lt;/kbd&gt;
Create a new site in the provided directory.
The new site will have the correct structure, but no content or theme yet.
Use `hugo new [contentPath]` to create new content.

Usage:
  hugo new site [path] [flags]

Flags:
	  --force           Init inside non-empty directory
  -f, --format string   config &amp;amp; frontmatter format (default &quot;toml&quot;)

Global Flags:
	  --config string    config file (default is path/config.yaml|json|toml)
	  --log              Enable Logging
	  --logFile string   Log File path (if set, logging enabled automatically)
	  --quiet            build in quiet mode
  -s, --source string    filesystem path to read files relative from
  -v, --verbose          verbose output
      --verboseLog       verbose logging
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Then we will create a &lt;em&gt;quickstart&lt;/em&gt; project:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;hugo new site quickstart&lt;/kbd&gt;
Congratulations! Your new Hugo site is created in /tmp/quickstart.

Just a few more steps and you're ready to go:

1. Download a theme into the same-named folder.
   Choose a theme from https://themes.gohugo.io/, or
   create your own with the &quot;hugo new theme &amp;lt; THEMENAME &amp;gt;&quot; command.
2. Perhaps you want to add some content. You can add single files
   with &quot;hugo new &amp;lt; SECTIONNAME &amp;gt;/&amp;lt; FILENAME &amp;gt;.&amp;lt; FORMAT &amp;gt;&quot;.
3. Start the built-in live server via &quot;hugo server&quot;.

Visit https://gohugo.io/ for quickstart guide and full documentation.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;That will create the basic Hugo site structure:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;tree quickstart/&lt;/kbd&gt;
quickstart/
├── archetypes
├── config.toml
├── content
├── data
├── layouts
├── static
└── themes
 
6 directories, 1 file
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;structure&quot;&gt;Structure&lt;/h3&gt;

&lt;p&gt;Structure explanation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;archetypes&lt;/strong&gt;:
&lt;a href=&quot;https://gohugo.io/content-management/archetypes/&quot;&gt;archetypes&lt;/a&gt; are
pre-configured front matter post data to add when using &lt;kbd&gt;hugo
new&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;config.toml&lt;/strong&gt;: hugo
&lt;a href=&quot;https://gohugo.io/getting-started/configuration/#all-variables-yaml&quot;&gt;configuration&lt;/a&gt;.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Hugo will look for &lt;code class=&quot;highlighter-rouge&quot;&gt;./config.toml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;./config.yaml&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;./config.json&lt;/code&gt;, in that order.&lt;/li&gt;
      &lt;li&gt;Defines:
        &lt;ul&gt;
          &lt;li&gt;how to render the website&lt;/li&gt;
          &lt;li&gt;menus&lt;/li&gt;
          &lt;li&gt;site-wide parameters&lt;/li&gt;
          &lt;li&gt;values under &lt;code class=&quot;highlighter-rouge&quot;&gt;params&lt;/code&gt; key can be used with
&lt;a href=&quot;https://gohugo.io/variables/site/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.Site.Params&lt;/code&gt;&lt;/a&gt; variable in
templates.&lt;/li&gt;
          &lt;li&gt;all Hugo’s config values can be seen with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;hugo
config&lt;/code&gt;.&lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;all keys can be set with environmental variables in uppercase
and &lt;code class=&quot;highlighter-rouge&quot;&gt;HUGO_&lt;/code&gt; prefix, for example, to set the site title and build
the site:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ env HUGO_TITLE=&quot;New Title&quot; hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;:
&lt;a href=&quot;https://gohugo.io/content-management/organization/&quot;&gt;content&lt;/a&gt; that can
include &lt;code class=&quot;highlighter-rouge&quot;&gt;/posts&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/blog&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/articles&lt;/code&gt;, sections with
&lt;a href=&quot;https://gohugo.io/content-management/types/&quot;&gt;content-types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: data holds configuration files, and &lt;a href=&quot;https://gohugo.io/templates/data-templates/&quot;&gt;data
templates&lt;/a&gt; pulling data
from dynamic content.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;templates&lt;/strong&gt;: &lt;a href=&quot;https://gohugo.io/templates/&quot;&gt;templates&lt;/a&gt; specify how content is rendered.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;static&lt;/strong&gt;: assets directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;themes&quot;&gt;Themes&lt;/h2&gt;

&lt;p&gt;Hugo &lt;a href=&quot;https://gohugo.io/themes/&quot;&gt;themes&lt;/a&gt; are powered by Go’s template
libraries (&lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;text&lt;/a&gt; and
&lt;a href=&quot;https://golang.org/pkg/html/template/&quot;&gt;html&lt;/a&gt; libraries).&lt;/p&gt;

&lt;p&gt;Themes are designed to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reduce code duplication&lt;/li&gt;
  &lt;li&gt;easy to both customize and&lt;/li&gt;
  &lt;li&gt;keep in synch with the upstream theme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A repository of themes are available at &lt;a href=&quot;https://themes.gohugo.io&quot;&gt;https://themes.gohugo.io&lt;/a&gt;,
from there we have to select one, and locate it in &lt;code class=&quot;highlighter-rouge&quot;&gt;/themes&lt;/code&gt;
directory.&lt;/p&gt;

&lt;h3 id=&quot;add&quot;&gt;Add&lt;/h3&gt;

&lt;p&gt;Themes can be added as git submodules, so it is possible to use
another project from within the main site, or cloned directly into the
&lt;code class=&quot;highlighter-rouge&quot;&gt;themes&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;cd quickstart&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git init&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;quickstart$&lt;/span&gt; &lt;kbd&gt;git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke;&lt;/kbd&gt;
Cloning into '/tmp/quickstart/themes/ananke'...
remote: Counting objects: 850, done.
remote: Compressing objects: 100% (18/18), done.
remote: Total 850 (delta 10), reused 21 (delta 9), pack-reused 823
Ricezione degli oggetti: 100% (850/850), 2.38 MiB | 385.00 KiB/s, done.
Risoluzione dei delta: 100% (431/431), done.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;choose&quot;&gt;Choose&lt;/h3&gt;

&lt;p&gt;Now we must specify Hugo to use this theme.&lt;/p&gt;

&lt;p&gt;This can be done adding it to the configuration file or specifying
theme name at run time.&lt;/p&gt;

&lt;h3 id=&quot;customize&quot;&gt;Customize&lt;/h3&gt;

&lt;p&gt;Themes that follows Hugo’s convention for folder structure and naming,
can be customized without changing original code, just using your
project’s working directory, overriding specific sections and staying
current with a theme’s upstream.&lt;/p&gt;

&lt;p&gt;Every time Hugo looks for a theme file, it will look first in &lt;strong&gt;your&lt;/strong&gt;
project, and if it doesn’t find anything, it will look at &lt;code class=&quot;highlighter-rouge&quot;&gt;/themes/&amp;lt;
THEME NAME &amp;gt;&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;For example, to customize the file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/themes/&amp;lt; THEME &amp;gt;/layouts/_default/single.html`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you simply copy the above file to you local instance and edit as you
wish:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;how-themes-work&quot;&gt;How themes work&lt;/h3&gt;

&lt;p&gt;Generally, website pages consist of page showing a single item or a
list of items, in Hugo these cases are covered by the &lt;code class=&quot;highlighter-rouge&quot;&gt;_default&lt;/code&gt; theme:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a single piece of content: &lt;code class=&quot;highlighter-rouge&quot;&gt;layouts/_default/single.html&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a list of content items: &lt;code class=&quot;highlighter-rouge&quot;&gt;layouts/_default/list.html&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After looking for the default layout, Hugo also seeks for content
types or have layouts that apply to specific sections like a blog or
another type.&lt;/p&gt;

&lt;p&gt;Static content present in the &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; directory, will be copied to
the final site.&lt;/p&gt;

&lt;h4 id=&quot;in-config&quot;&gt;In Config&lt;/h4&gt;

&lt;p&gt;To add the theme to the configuration file: &lt;code class=&quot;highlighter-rouge&quot;&gt;config.toml&lt;/code&gt; we set the
&lt;code class=&quot;highlighter-rouge&quot;&gt;theme&lt;/code&gt; property.&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;languageCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en-us&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My New Hugo Site&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;baseurl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://example.org/&quot;&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;theme&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ananke&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;at-run-time&quot;&gt;at Run time&lt;/h4&gt;

&lt;p&gt;To use a theme specifying the name at command line, &lt;code class=&quot;highlighter-rouge&quot;&gt;hugo&lt;/code&gt; comes with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt; flag, then it can be used as &lt;kbd&gt;hugo -t ananke&lt;/kbd&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-content&quot;&gt;Create content&lt;/h2&gt;

&lt;p&gt;Hugo by default uses a markdown processor for Go called
&lt;a href=&quot;https://github.com/russross/blackfriday&quot;&gt;blackfriday&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A typical post contains a special section containing metadata and then the
content. The metadata is called frontmatter and is the first part of
the file between &lt;code class=&quot;highlighter-rouge&quot;&gt;+++&lt;/code&gt; lines, for example a post looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-blackfriday&quot;&gt;---
date: 2017-04-09T10:58:08-04:00
description: &quot;The Grand Hall&quot;
featured_image: &quot;/images/Pope-Edouard-de-Beaumont-1844.jpg&quot;
tags: [&quot;scene&quot;]
title: &quot;Chapter I: The Grand Hall&quot;
---

Three hundred and forty-eight years, six months, and nineteen days ago
to-day, the Parisians awoke to the sound of all the bells in the triple
circuit of the city, the university, and the town ringing a full peal.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To add new content we use &lt;code class=&quot;highlighter-rouge&quot;&gt;hugo new&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;quickstart$&lt;/span&gt; &lt;kbd&gt;hugo new --help&lt;/kbd&gt;
Create a new content file and automatically set the date and title.
It will guess which kind of file to create based on the path provided.

You can also specify the kind with `-k KIND`.

If archetypes are provided in your theme or site, they will be used.

Usage:
  hugo new [path] [flags]
  hugo new [command]

Available Commands:
  site        Create a new site (skeleton)
  theme       Create a new theme

Flags:
      --editor string   edit new content with this editor, if provided
  -f, --format string   frontmatter format (default &quot;toml&quot;)
  -k, --kind string     Content type to create
  -s, --source string   filesystem path to read files relative from

Global Flags:
      --config string    config file (default is path/config.yaml|json|toml)
      --log              Enable Logging
      --logFile string   Log File path (if set, logging enabled automatically)
      --quiet            build in quiet mode
  -v, --verbose          verbose output
      --verboseLog       verbose logging

Use &quot;hugo new [command] --help&quot; for more information about a command.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Hugo has its posts and content in &lt;code class=&quot;highlighter-rouge&quot;&gt;contents/posts&lt;/code&gt; directory, we add a
post called &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-post.md&lt;/code&gt; with the basic post structure specified
in the front-matter with &lt;code class=&quot;highlighter-rouge&quot;&gt;hugo new &amp;lt; post &amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;quickstart$&lt;/span&gt; &lt;kbd&gt;hugo new posts/my-first-post.md&lt;/kbd&gt;
/tmp/quickstart/content/posts/my-first-post.md created
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;It creates a basic post skeleton, the front-matter needed to build a
post:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+++
title = &quot;This is my first post&quot;
date = &quot;2017-10-10&quot;
tags = []
featured_image = &quot;&quot;
description = &quot;A new post added&quot;
+++

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis id tellus dolor. 

Cras vitae consequat risus. Suspendisse quis justo arcu.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;serve-site&quot;&gt;Serve site&lt;/h2&gt;

&lt;p&gt;To serve the site, especially useful when developing locally:
&lt;kbd&gt;hugo serve&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;hugo serve --help&lt;/kbd&gt;
Hugo provides its own webserver which builds and serves the site.
While hugo server is high performance, it is a webserver with limited options.
Many run it in production, but the standard behavior is for people to use it
in development and use a more full featured server such as Nginx or Caddy.

'hugo server' will avoid writing the rendered and served content to disk,
preferring to store it in memory.

By default hugo will also watch your files for any changes you make and
automatically rebuild the site. It will then live reload any open browser pages
and push the latest content to them. As most Hugo sites are built in a fraction
of a second, you will be able to save and see your changes nearly instantly.

Usage:
  hugo server [flags]

Aliases:
  server, serve


Flags:
	  --appendPort              append port to baseURL (default true)
  -b, --baseURL string          hostname (and path) to the root, e.g. http://spf13.com/
	  --bind string             interface to which the server will bind (default &quot;127.0.0.1&quot;)
  -D, --buildDrafts             include content marked as draft
  -E, --buildExpired            include expired content
  -F, --buildFuture             include content with publishdate in the future
	  --cacheDir string         filesystem path to cache directory. Defaults: $TMPDIR/hugo_cache/
	  --canonifyURLs            if true, all relative URLs will be canonicalized using baseURL
	  --cleanDestinationDir     Remove files from destination not found in static directories
  -c, --contentDir string       filesystem path to content directory
  -d, --destination string      filesystem path to write files to
	  --disable404              Do not render 404 page
	  --disableLiveReload       watch without enabling live browser reload on rebuild
	  --disableRSS              Do not build RSS files
	  --disableSitemap          Do not build Sitemap file
	  --enableGitInfo           Add Git revision, date and author info to the pages
	  --forceSyncStatic         Copy all files when static is changed.
	  --i18n-warnings           Print missing translations
	  --ignoreCache             Ignores the cache directory
  -l, --layoutDir string        filesystem path to layout directory
	  --meminterval string      interval to poll memory usage (requires --memstats), valid time units are &quot;ns&quot;, &quot;us&quot; (or &quot;µs&quot;), &quot;ms&quot;,
&quot;s&quot;, &quot;m&quot;, &quot;h&quot;. (default &quot;100ms&quot;)
	  --memstats string         log memory usage to this file
	  --noChmod                 Don't sync permission mode of files
	  --noTimes                 Don't sync modification time of files
	  --pluralizeListTitles     Pluralize titles in lists using inflect (default true)
  -p, --port int                port on which the server will listen (default 1313)
	  --preserveTaxonomyNames   Preserve taxonomy names as written (&quot;Gérard Depardieu&quot; vs &quot;gerard-depardieu&quot;)
	  --renderToDisk            render to Destination path (default is render to memory &amp;amp; serve from there)
  -s, --source string           filesystem path to read files relative from
	  --stepAnalysis            display memory and timing of different steps of the program
  -t, --theme string            theme to use (located in /themes/THEMENAME/)
	  --uglyURLs                if true, use /filename.html instead of /filename/
  -w, --watch                   watch filesystem for changes and recreate as needed (default true)

Global Flags:
	  --config string    config file (default is path/config.yaml|json|toml)
	  --log              Enable Logging
	  --logFile string   Log File path (if set, logging enabled automatically)
	  --quiet            build in quiet mode
  -v, --verbose          verbose output
	  --verboseLog       verbose logging
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;generate-files&quot;&gt;Generate files&lt;/h2&gt;

&lt;p&gt;To build the site, just &lt;kbd&gt;hugo&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;hugo&lt;/kbd&gt;
Started building sites ...

Built site for language en:
0 draft content
0 future content
0 expired content
1 regular pages created
8 other pages created
0 non-page files copied
1 paginator pages created
0 tags created
0 categories created
total in 50 ms
&lt;/samp&gt;
&lt;/pre&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/hugo-overview-and-basic-concepts/</link>
        <guid isPermaLink="true">https://simpleit.rocks/hugo-overview-and-basic-concepts/</guid>
        
        
        <category>docs</category>
        
        <category>golang</category>
        
        <category>hugo</category>
        
      </item>
    
      <item>
        <title>Exploring React Framework Notes And Core Concepts</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a guide to understand React framework to build web
applications. It explores its main concepts and common project
structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React is a declarative JavaScript library for building user
interfaces.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;
  &lt;p&gt;&lt;strong&gt;declarative programming&lt;/strong&gt; is a programming paradigm—a style of
building the structure and elements of computer programs—that
expresses the logic of a computation without describing its control
flow. (Opposite: imperative programming)&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Declarative_programming&quot;&gt;Wikipedia
Declarative Programming page&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;React&lt;/em&gt; is based around a &lt;strong&gt;React Components class&lt;/strong&gt;. Everything in
React is a &lt;em&gt;Component&lt;/em&gt;, it is said that its architecture is
&lt;em&gt;Component-based&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each component&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;takes in parameters, called &lt;strong&gt;props&lt;/strong&gt; to customize it
when creating them, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;returns a hierarchy of &lt;strong&gt;views&lt;/strong&gt; to display via the &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt;
method, which returns a &lt;strong&gt;React element&lt;/strong&gt; (a lightweight
description of what to render)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;elements&quot;&gt;Elements&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;React Elements&lt;/strong&gt; is what a &lt;strong&gt;React Component&lt;/strong&gt; returns, describing what
should appear on the screen.&lt;/p&gt;

&lt;h4 id=&quot;props&quot;&gt;Props&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Props&lt;/strong&gt; are arbitrary inputs passed to &lt;strong&gt;React Components&lt;/strong&gt;. 
They can be seen as object arguments that customize &lt;em&gt;components&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;state&quot;&gt;State&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;State&lt;/strong&gt; allows &lt;strong&gt;React components&lt;/strong&gt; to change their output over time
in response to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;user actions,&lt;/li&gt;
  &lt;li&gt;network responses, and&lt;/li&gt;
  &lt;li&gt;anything else&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;without preventing &lt;strong&gt;components&lt;/strong&gt; acting like &lt;strong&gt;pure functions&lt;/strong&gt; with
respect to their props. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;www.nicoespeon.com/en/2015/01/pure-functions-javascript/&quot;&gt;
  &lt;p&gt;A pure function doesn’t depend on and doesn’t modify the states of
variables out of its scope. Concretely, that means a pure function
always returns the same result given same parameters.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/&quot;&gt;Pure functions in JavaScript&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;React components can have state by setting &lt;code class=&quot;highlighter-rouge&quot;&gt;this.state&lt;/code&gt; in the
constructor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jsx&quot;&gt;JSX&lt;/h3&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;JSX produces React “elements”.&lt;/p&gt;

&lt;p&gt;JSX adds XML syntax to JavaScript, so it can be thought that its name
is a mix of &lt;strong&gt;Javascript&lt;/strong&gt;+&lt;strong&gt;XML&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make the rendering definition easier, we use JSX that allows us to
use react components in an XML-syntax style, e.g.:&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; syntax is transformed at build time to
&lt;code class=&quot;highlighter-rouge&quot;&gt;React.createElement('div')&lt;/code&gt;, so writing the above tag is the same as
writing using &lt;a href=&quot;https://facebook.github.io/react/docs/react-api.html#createelement&quot;&gt;React.createElement&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://facebook.github.io/react/tutorial/tutorial.html&quot;&gt;
  &lt;p&gt;You can put any JavaScript expression within braces inside JSX. Each
React element is a real JavaScript object that you can store in a
variable or pass around your program.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://facebook.github.io/react/tutorial/tutorial.html&quot;&gt;React tutorial&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;recipes&quot;&gt;Recipes&lt;/h2&gt;

&lt;h3 id=&quot;passing-data-through-components&quot;&gt;Passing data through Components&lt;/h3&gt;

&lt;p&gt;Using &lt;strong&gt;props&lt;/strong&gt; when instantiating a component like &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;MyComponent
value=somevalue /&amp;gt;&lt;/code&gt; then we can use it in another component accessing
&lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; in &lt;em&gt;MyComponent&lt;/em&gt;, e.g.:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Board&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;square&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;aggregation-of-many-components&quot;&gt;Aggregation of many components&lt;/h4&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://facebook.github.io/react/tutorial/tutorial.html#passing-data-through-props&quot;&gt;
  &lt;p&gt;When you want to aggregate data from multiple children or to have
two child components communicate with each other, move the state
upwards so that it lives in the parent component. The parent can
then pass the state back down to the children via props, so that the
child components are always in sync with each other and with the
parent.&lt;/p&gt;

  &lt;p&gt;Pulling state upwards like this is common when refactoring React components.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://facebook.github.io/react/tutorial/tutorial.html#passing-data-through-props&quot;&gt;Passing
data through props&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;inmutability&quot;&gt;Inmutability&lt;/h3&gt;

&lt;p&gt;There are two ways of changing data:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;mutation&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;replace with new copy&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In React it is better to create new versions of data instead of
directly modifying it, like instead of directly modifying an array
value, make a copy of it.&lt;/p&gt;

&lt;p&gt;This has several advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;better performance.&lt;/li&gt;
  &lt;li&gt;easier to implement complex features (keeping older versions we can
switch to them as needed).&lt;/li&gt;
  &lt;li&gt;tracking changes is difficult, determining an immutable object
change is trivial, this helps to determine when a component requires
being re-rendered.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More at: &lt;a href=&quot;https://facebook.github.io/react/tutorial/tutorial.html#why-immutability-is-important&quot;&gt;https://facebook.github.io/react/tutorial/tutorial.html#why-immutability-is-important&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;interactive-components&quot;&gt;Interactive Components&lt;/h3&gt;

&lt;h3 id=&quot;functional-components&quot;&gt;Functional Components&lt;/h3&gt;

&lt;p&gt;Functional Components is a simpler syntax for component types &lt;strong&gt;that only consist of a render method&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Rather than defining a class extending &lt;code class=&quot;highlighter-rouge&quot;&gt;React.Component&lt;/code&gt;, have a
function that takes &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; and returns what should be rendered.&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Mycomponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; won’t be available, so &lt;code class=&quot;highlighter-rouge&quot;&gt;this.props&lt;/code&gt; become &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;History&lt;/h3&gt;

&lt;h2 id=&quot;useful-commands&quot;&gt;Useful commands&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Installation of &lt;code class=&quot;highlighter-rouge&quot;&gt;create-react&lt;/code&gt; command line utility:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   npm install -g create-react-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;create-react-app&quot;&gt;Create react app&lt;/h3&gt;

&lt;p&gt;This tool creates a fronted build pipeline without backend logic or
databases &lt;kbd&gt;create-react-app my-app&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;It makes available the commands &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;eject&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To start the app &lt;kbd&gt;npm start&lt;/kbd&gt;, which will run &lt;code class=&quot;highlighter-rouge&quot;&gt;react-scripts start&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;To deploy, first create an optimized build in the &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; folder with &lt;kbd&gt;npm run build&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react/docs/installation.html&quot;&gt;https://facebook.github.io/react/docs/installation.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;https://facebook.github.io/react/docs/ &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 27 Aug 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/exploring-react-framework-notes-and-core-concepts/</link>
        <guid isPermaLink="true">https://simpleit.rocks/exploring-react-framework-notes-and-core-concepts/</guid>
        
        
        <category>docs</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Angular Framework Notes A First Approach</title>
        <description>&lt;p&gt;This is a guide to understand Angular core concepts.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Angular is a Javascript framework to build &lt;em&gt;web&lt;/em&gt; and &lt;em&gt;mobile&lt;/em&gt;
applications.&lt;/p&gt;

&lt;p&gt;It has a command line utility to facilitate tasks &lt;kbd&gt;ng&lt;/kbd&gt;
installed with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g @angular/cli&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h2&gt;

&lt;p&gt;Angular is based in these concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Javascript classes&lt;/li&gt;
  &lt;li&gt;Javascript modules&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dependency injection&lt;/strong&gt; defined by &lt;strong&gt;TypeScript types&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Metadata&lt;/strong&gt; defined by &lt;strong&gt;decorators&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;&lt;em&gt;Typescript&lt;/em&gt; is a superset of JavaScript that compiles to plain
Javascript, with the ability to add optional static typing to the
language.&lt;/p&gt;

&lt;h3 id=&quot;javascript-classes&quot;&gt;Javascript classes&lt;/h3&gt;

&lt;p&gt;Javascript
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;classes&lt;/a&gt; are
used to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;create objects&lt;/p&gt;

    &lt;p&gt;To define a class we can use one of two methods, both using
 prototype-based inheritance.&lt;/p&gt;

    &lt;p&gt;A &lt;strong&gt;class expression&lt;/strong&gt;:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var MyClass = class [className] [extends] {
   // class body
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Or we can use a &lt;strong&gt;class declaration&lt;/strong&gt;.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; class name [extends] {
   // class body
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The difference between them is that &lt;em&gt;class declaration&lt;/em&gt; doesn’t
 allow an existing class to be re-declared.&lt;/p&gt;

    &lt;p&gt;Technically speaking, it is said that&lt;/p&gt;

    &lt;blockquote class=&quot;blockquote&quot;&gt;
      &lt;p&gt;function declarations
are
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hoisting&quot;&gt;hoisted&lt;/a&gt; and
class declarations are not&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;deal with inheritance&lt;/p&gt;

    &lt;p&gt;Inheritance makes it possible to extend existing classes to create
 new ones.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;extends&lt;/code&gt; keyword is used to create a subclass.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; class Cat extends Animal {
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;javascript-modules&quot;&gt;Javascript modules&lt;/h3&gt;

&lt;p&gt;Each module is a piece of code (variable and function declarations,
objects, etc) that is executed once it is loaded. Some of them can be marked to
be exported so other modules can import and use them.&lt;/p&gt;

&lt;p&gt;To import them we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; keyword and to expose them to other
modules the &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; keyword.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultMember&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;   &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alias2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defaultMember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://angular.io/guide/architecture&quot;&gt;
  &lt;p&gt;Angular apps are modular and Angular has its own modularity system
called NgModules&lt;/p&gt;

  &lt;p&gt;Every Angular app has at least one NgModule class, the root module,
conventionally named AppModule.&lt;/p&gt;

  &lt;p&gt;JavaScript also has its own module system for managing collections
of JavaScript objects. It’s completely different and unrelated to
the NgModule system.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://angular.io/guide/architecture&quot;&gt;ngModules docs&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;dependency-injection&quot;&gt;Dependency injection&lt;/h3&gt;

&lt;p&gt;Dependency injection (DI) is an application design pattern. In this
coding pattern the class receives its dependencies from external
sources rather than creating them itself.&lt;/p&gt;

&lt;p&gt;Angular comes with a &lt;strong&gt;dependency injection framework&lt;/strong&gt; called
&lt;strong&gt;injector&lt;/strong&gt; where
you
&lt;a href=&quot;https://angular.io/guide/dependency-injection#injectable&quot;&gt;register classes&lt;/a&gt;,
and it figures out how to create them.&lt;/p&gt;

&lt;p&gt;Every time you need a class instance, instead of using a Factory, you
ask the injector to get it for you.&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;metadata&quot;&gt;Metadata&lt;/h3&gt;

&lt;p&gt;Decorators support annotating or modifying a class declaration,
method, accessor, property, or parameter. They can be used in Angular
with TypeScript.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://angular.io/guide/architecture&quot;&gt;
  &lt;p&gt;Angular has many decorators that attach metadata to classes so that it
knows what those classes mean and how they should work.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://angular.io/guide/architecture&quot;&gt;Modules notes&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Decorators use the form &lt;code class=&quot;highlighter-rouge&quot;&gt;@expression&lt;/code&gt;, where &lt;em&gt;expression&lt;/em&gt; must
evaluate to a function that will be called at runtime with
information about the decorated declaration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://angular.io/api/core/NgModule&quot;&gt;NgModule&lt;/a&gt; is a decorator
function that takes a single metadata object whose properties describe
the module.&lt;/p&gt;

&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;To analyze a typical Angular project structure we create a new one
with the command line app &lt;code class=&quot;highlighter-rouge&quot;&gt;ng&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ng new --help&lt;/kbd&gt;
ng new &amp;lt; options... &amp;gt;
  Creates a new directory and a new Angular app eg. &quot;ng new [name]&quot;.
  aliases: n
  --dry-run (Boolean) (Default: false) Run through without making any changes. Will list all files that would have been created when running &quot;ng new&quot;.
    aliases: -d, --dryRun
  --verbose (Boolean) (Default: false) Adds more details to output logging.
    aliases: -v, --verbose
  --skip-install (Boolean) (Default: false) Skip installing packages.
    aliases: -si, --skipInstall
  --skip-git (Boolean) (Default: false) Skip initializing a git repository.
    aliases: -sg, --skipGit
  --skip-tests (Boolean) (Default: false) Skip creating spec files.
    aliases: -st, --skipTests
  --skip-commit (Boolean) (Default: false) Skip committing the first commit to git.
    aliases: -sc, --skipCommit
  --directory (String) The directory name to create the app in.
    aliases: -dir &amp;lt; value &amp;gt;, --directory &amp;lt; value &amp;gt;
  --source-dir (String) (Default: src) The name of the source directory. You can later change the value in &quot;.angular-cli.json&quot; (apps[0].root).
    aliases: -sd &amp;lt; value &amp;gt;, --sourceDir &amp;lt; value &amp;gt;
  --style (String) (Default: css) The style file default extension. Possible values: css, scss, less, sass, styl(stylus). You can later change the value in &quot;.angular-cli.json&quot; (defaults.styleExt).
    aliases: --style &amp;lt; value &amp;gt;
  --prefix (String) (Default: app) The prefix to use for all component selectors. You can later change the value in &quot;.angular-cli.json&quot; (apps[0].prefix).
    aliases: -p &amp;lt; value &amp;gt;, --prefix &amp;lt; value &amp;gt;
  --routing (Boolean) (Default: false) Generate a routing module.
    aliases: --routing
  --inline-style (Boolean) (Default: false) Should have an inline style.
    aliases: -is, --inlineStyle
  --inline-template (Boolean) (Default: false) Should have an inline template.
    aliases: -it, --inlineTemplate
  --minimal (Boolean) (Default: false) Should create a minimal app.
    aliases: --minimal
&lt;/samp&gt;
&lt;/pre&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ng new my-app&lt;/kbd&gt;
installing ng
  create .editorconfig
  create README.md
  create src/app/app.component.css
  create src/app/app.component.html
  create src/app/app.component.spec.ts
  create src/app/app.component.ts
  create src/app/app.module.ts
  create src/assets/.gitkeep
  create src/environments/environment.prod.ts
  create src/environments/environment.ts
  create src/favicon.ico
  create src/index.html
  create src/main.ts
  create src/polyfills.ts
  create src/styles.css
  create src/test.ts
  create src/tsconfig.app.json
  create src/tsconfig.spec.json
  create src/typings.d.ts
  create .angular-cli.json
  create e2e/app.e2e-spec.ts
  create e2e/app.po.ts
  create e2e/tsconfig.e2e.json
  create .gitignore
  create karma.conf.js
  create package.json
  create protractor.conf.js
  create tsconfig.json
  create tslint.json
You can `ng set --global packageManager=yarn`.
Installing packages for tooling via npm.
        Installed packages for tooling via npm.
Successfully initialized git.
Project 'my-app' successfully created.

&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;tree&quot;&gt;Tree&lt;/h3&gt;

&lt;p&gt;The project is arranged in the following way:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
└── my-app
    ├── e2e                            # end-to-end tests
    │   ├── app.e2e-spec.ts
    │   ├── app.po.ts
    │   └── tsconfig.e2e.json
    ├── karma.conf.js                  # https://karma-runner.github.io/
    ├── .editorconfig                  # http://editorconfig.org
    ├── .angular-cli.json              # Configuration for Angular CLI
    ├── package.json                   # npm - third party packages
    ├── protractor.conf.js             # http://www.protractortest.org/#/
    ├── README.md
    ├── src
    │   ├── app
    │   │   ├── app.component.css
    │   │   ├── app.component.html
    │   │   ├── app.component.spec.ts
    │   │   ├── app.component.ts       # Defines AppComponent
    │   │   └── app.module.ts          # Defines AppModule
    │   ├── assets                     # Static files copied at build time
    │   ├── environments               # Configurations for each env
    │   │   ├── environment.prod.ts
    │   │   └── environment.ts
    │   ├── favicon.ico
    │   ├── index.html                 # Page served
    │   ├── main.ts                    # Main entry point of the app 
    │   ├── polyfills.ts
    │   ├── styles.css                 # Styles that affect all of your app
    │   ├── test.ts                    # Main entry point for unit tests
    │   ├── tsconfig.app.json          # TypeScript compiler config for app
    │   ├── tsconfig.spec.json         # TypeScript compiler config	for tests
    │   └── typings.d.ts
    ├── tsconfig.json
    └── tslint.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;files&quot;&gt;Files&lt;/h2&gt;

&lt;p&gt;As we see in this particular project structure, the project is full of
HTML and Typescript files (&lt;code class=&quot;highlighter-rouge&quot;&gt;.ts&lt;/code&gt; extension).&lt;/p&gt;

&lt;p&gt;Most relevant files goes inside &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; directory, while files outside
&lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; folder are just meant to support building the app.&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;

&lt;p&gt;The typescript file located at &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/app/app.component.ts&lt;/code&gt; is a
special one called &lt;strong&gt;root component&lt;/strong&gt; and its noted &lt;code class=&quot;highlighter-rouge&quot;&gt;app-root&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Components&lt;/strong&gt; control a section of the screen called &lt;strong&gt;view&lt;/strong&gt;. They
can be a navigation bar, a list of items, etc.&lt;/p&gt;

&lt;p&gt;Each component can have associated files to define its CSS styling and
HTML template.&lt;/p&gt;

&lt;p&gt;A component contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;AppComponent&lt;/code&gt; class definition, like:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'This is my component'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and a decorator with for example, data bindings to properties defined
in the class:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;h1&amp;gt;Name: &amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Double curly braces are the interpolation binding syntax used by
Angular.&lt;/p&gt;

&lt;p&gt;Instead of a literal string as a property value in the Component, a
class can be used:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppComponent&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Some desc'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'my-app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`&amp;lt;h1&amp;gt;Name: &amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;p&gt;There is also a special file called &lt;strong&gt;root module&lt;/strong&gt;. It tells
Angular
&lt;a href=&quot;https://angular.io/guide/bootstrapping&quot;&gt;how to assemble the application&lt;/a&gt; and
is located at ` app/app.module.ts`.&lt;/p&gt;

&lt;h2 id=&quot;useful-commands&quot;&gt;Useful commands&lt;/h2&gt;

&lt;p&gt;Commands to work with and without the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng&lt;/code&gt; command line tool.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new project based on the QuickStart: &lt;kbd&gt;git clone https://github.com/angular/quickstart.git my-app&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Install npm packages:  &lt;kbd&gt;npm install&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Compile and serve: &lt;kbd&gt;npm start&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Run the TypeScript compiler once: &lt;kbd&gt;npm run build&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Run the TypeScript compiler in watch mode: &lt;kbd&gt;npm run
build:w&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Run a light-weight, static file server &lt;a href=&quot;https://www.npmjs.com/package/lite-server&quot;&gt;lite-server&lt;/a&gt; &lt;kbd&gt;npm run serve&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Karma unit tests (compiles the application, simultaneously re-compiles and runs the karma test-runner): &lt;kbd&gt;npm test&lt;/kbd&gt;&lt;/li&gt;
  &lt;li&gt;Protractor e2e tests (compiles, starts the lite-server and launches Protractor): &lt;kbd&gt;npm run e2e&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/guide/quickstart&quot;&gt;https://angular.io/guide/quickstart&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TypeScript&quot;&gt;https://en.wikipedia.org/wiki/TypeScript&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;https://www.typescriptlang.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/guide/bootstrapping&quot;&gt;https://angular.io/guide/bootstrapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/classes.html&quot;&gt;https://www.typescriptlang.org/docs/handbook/classes.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/decorators.html&quot;&gt;https://www.typescriptlang.org/docs/handbook/decorators.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/angular-framework-notes-a-first-approach/</link>
        <guid isPermaLink="true">https://simpleit.rocks/angular-framework-notes-a-first-approach/</guid>
        
        
        <category>docs</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Set Up Ubuntu To Serve A Django Website Step By Step</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a guide to have a website in an Ubuntu server using &lt;strong&gt;nginx&lt;/strong&gt;
and &lt;strong&gt;systemd&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ubuntu uses &lt;em&gt;systemd&lt;/em&gt; to manage system and service daemons and
processes, we will create configuration files to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;create temporary files&lt;/li&gt;
  &lt;li&gt;manage gunicorn system service&lt;/li&gt;
  &lt;li&gt;manage gunicorn system socket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And lastly configuring &lt;em&gt;nginx&lt;/em&gt; to handle requests.&lt;/p&gt;

&lt;p&gt;We assume the following configuration to set up the server, this is a
basic configuration example to follow the tutorial and be easier to
customize with your own data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;website domain: &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Django source code located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/chengue/sites/example&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;environment variable pointing to production settings:
&lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO_SETTINGS_MODULE=example.settings.production&lt;/code&gt;`&lt;/li&gt;
  &lt;li&gt;Python virtual environment for the &lt;code class=&quot;highlighter-rouge&quot;&gt;example&lt;/code&gt; project at:
&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/chengue/.virtualenvs/example&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ubuntu User: chengue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end of the tutorial we will have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nginx handling requests to &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;traffic gets redirected from &lt;em&gt;non-www&lt;/em&gt; to &lt;em&gt;www&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuring-systemd-services&quot;&gt;Configuring Systemd services&lt;/h2&gt;

&lt;h3 id=&quot;socket&quot;&gt;Socket&lt;/h3&gt;

&lt;p&gt;To handle incoming Gunicorn requests we create a unix socket
controlled by &lt;em&gt;systemd&lt;/em&gt;. As the configuration filename should end in
&lt;code class=&quot;highlighter-rouge&quot;&gt;.socket&lt;/code&gt; we create the following file:
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/gunicorn.socket&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn/socket

[Install]
WantedBy=sockets.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p cite=&quot;http://docs.gunicorn.org/en/stable/deploy.html#systemd&quot;&gt;&lt;em&gt;systemd&lt;/em&gt; will listen on this socket and start &lt;strong&gt;Gunicorn&lt;/strong&gt;
automatically in response to traffic.&lt;/p&gt;

&lt;p&gt;This sockets will be used by Gunicorn service using the parameter
&lt;code class=&quot;highlighter-rouge&quot;&gt;--bind unix:/run/gunicorn/socket&lt;/code&gt; in the service file.&lt;/p&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;

&lt;p&gt;Then the service that use the above socket, In
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/systemd/system/gunicorn.service&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
PIDFile=/run/gunicorn/pid
User=chengue
Group=www-data
RuntimeDirectory=gunicorn
WorkingDirectory=/home/chengue/sites/example/example
ExecStart=/home/chengue/.virtualenvs/example/bin/gunicorn \
          --access-logfile /home/chengue/sites/logs/example.access.log \
          --error-logfile /home/chengue/sites/logs/example.error.log \
          --pid /run/gunicorn/pid   \
          --env DJANGO_SETTINGS_MODULE=example.settings.production \
          --bind unix:/run/gunicorn/socket example.wsgi
ExecReload=/bin/kill -s HUP $MAINPID
ExecStop=/bin/kill -s TERM $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;Be sure to adjust &lt;code class=&quot;highlighter-rouge&quot;&gt;WorkingDirectory&lt;/code&gt; to your application root.&lt;/p&gt;

&lt;h3 id=&quot;temporal-file&quot;&gt;Temporal file&lt;/h3&gt;

&lt;p&gt;Temporal files handled by &lt;em&gt;systemd&lt;/em&gt; are located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/tmpfiles.d/&lt;/code&gt;,
we create &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/tmpfiles.d/gunicorn.conf&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;d /run/gunicorn 0755 chengue www-data -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;www-data&lt;/code&gt; is the Linux group of &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;web-proxy&quot;&gt;Web proxy&lt;/h2&gt;

&lt;p&gt;Lastly, configure the web proxy to send traffic to the &lt;em&gt;Gunicorn&lt;/em&gt;
socket. Create a virtual site in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available/example.com&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
	# redirect www to non-www
    server_name www.example.com;
    return 301 $scheme://example.com$request_uri;
}

server {
	server_name example.com;

	#location /static {
	#    alias /home/chengue/sites/example/static;
	#}

	#location /media {
	#    alias /home/chengue/sites/example/media;
	#}

	location / {
		proxy_set_header Host $host;
		proxy_pass http://unix:/run/gunicorn/socket;
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have our &lt;code class=&quot;highlighter-rouge&quot;&gt;example.com&lt;/code&gt; configuration as an available
website in nginx, we should enable it creating a symbolic link in
&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-enabled/example.com&lt;/code&gt; pointing to the above file:&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;sudo ln -s /etc/nginx/sites-available/example.com \
    /etc/nginx/sites-enabled/example.com&lt;/kbd&gt;&lt;/p&gt;

&lt;h2 id=&quot;commands&quot;&gt;Commands&lt;/h2&gt;

&lt;h3 id=&quot;enabling-services&quot;&gt;Enabling services&lt;/h3&gt;

&lt;p&gt;Enable services to autostart at boot:&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;systemctl enable gunicorn.socket&lt;/kbd&gt;
&lt;kbd&gt;systemctl enable nginx.service&lt;/kbd&gt;&lt;/p&gt;

&lt;h3 id=&quot;activate-services&quot;&gt;Activate services&lt;/h3&gt;

&lt;p&gt;Manually activating services:&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;systemctl start gunicorn.socket&lt;/kbd&gt;
&lt;kbd&gt;systemctl start nginx&lt;/kbd&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;To test if Gunicorn works &lt;kbd&gt;curl --unix-socket /run/gunicorn/socket
http&lt;/kbd&gt; should retrieve an HTML from the server.&lt;/p&gt;

&lt;h3 id=&quot;status&quot;&gt;Status&lt;/h3&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;systemctl status gunicorn.socket&lt;/kbd&gt;
● gunicorn.socket - gunicorn socket
   Loaded: loaded (/etc/systemd/system/gunicorn.socket; enabled; vendor preset: enabled)
   Active: active (running) since Mon 2017-07-03 18:52:15 EDT; 2h 58min ago
   Listen: /run/gunicorn/socket (Stream)

Jul 03 18:52:15  systemd[1]: Closed gunicorn socket.
Jul 03 18:52:15  systemd[1]: Stopping gunicorn socket.
Jul 03 18:52:15  systemd[1]: Listening on gunicorn socket.
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;systemctl status gunicorn.service&lt;/kbd&gt;
   Loaded: loaded (/etc/systemd/system/gunicorn.service; disabled; vendor preset: enabled)
   Active: active (running) since Mon 2017-07-03 18:52:15 EDT; 2h 59min ago
 Main PID: 14216 (gunicorn)
    Tasks: 2 (limit: 4915)
   Memory: 41.8M
      CPU: 5.544s
   CGroup: /system.slice/gunicorn.service
           ├─14216 /home/chengue/.virtualenvs/example/bin/python3.6 /home/chengue/.virtualenvs/example/bin/gunicorn --access
           └─14252 /home/chengue/.virtualenvs/pullgravity/bin/python3.6 /home/chengue/.virtualenvs/example/bin/gunicorn --access

Jul 03 18:52:15  systemd[1]: Started gunicorn daemon.
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;systemctl status nginx.service&lt;/kbd&gt;
   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)
  Drop-In: /etc/systemd/system/nginx.service.d
           └─override.conf
   Active: active (running) since Mon 2017-07-03 18:52:21 EDT; 3h 1min ago
     Docs: man:nginx(8)
 Main PID: 14353 (nginx)
    Tasks: 2 (limit: 4915)
   Memory: 2.8M
      CPU: 205ms
   CGroup: /system.slice/nginx.service
           ├─14353 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;
           └─14357 nginx: worker process

Jul 03 18:52:21  systemd[1]: Starting A high performance web server and a reverse proxy server...
Jul 03 18:52:21  systemd[1]: Started A high performance web server and a reverse proxy server.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;debugging&quot;&gt;Debugging&lt;/h3&gt;

&lt;p&gt;An useful command to see &lt;em&gt;systemd&lt;/em&gt; logs filtered by service is
&lt;kbd&gt;journalctl&lt;/kbd&gt;, it query the &lt;em&gt;systemd&lt;/em&gt; journal and with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; parameter show messages for the specified systemd unit.&lt;/p&gt;

&lt;p&gt;Using our services:&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;journalctl -u nginx.service&lt;/kbd&gt;
&lt;kbd&gt;journalctl -u gunicorn.service&lt;/kbd&gt;
&lt;kbd&gt;journalctl -u gunicorn.socket&lt;/kbd&gt;&lt;/p&gt;

&lt;h2 id=&quot;repo&quot;&gt;Repo&lt;/h2&gt;

&lt;p&gt;The files created in this tutorial are available in this Github repository: &lt;a href=&quot;https://github.com/marcanuy/django-deploy-guide&quot;&gt;https://github.com/marcanuy/django-deploy-guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Official page &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/systemd/&quot;&gt;https://www.freedesktop.org/wiki/Software/systemd/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gunicorn systemd section &lt;a href=&quot;http://docs.gunicorn.org/en/stable/deploy.html#systemd&quot;&gt;http://docs.gunicorn.org/en/stable/deploy.html#systemd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Linux manual pages:
    &lt;ul&gt;
      &lt;li&gt;&lt;kbd&gt;man systemd.socket&lt;/kbd&gt;&lt;/li&gt;
      &lt;li&gt;&lt;kbd&gt;man systemd.service&lt;/kbd&gt;&lt;/li&gt;
      &lt;li&gt;&lt;kbd&gt;man tmpfiles.d&lt;/kbd&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unix socket &lt;a href=&quot;https://en.wikipedia.org/wiki/Unix_domain_socket&quot;&gt;https://en.wikipedia.org/wiki/Unix_domain_socket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;nginx proxy &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&quot;&gt;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 03 Jul 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/set-up-ubuntu-to-serve-a-django-website-step-by-step/</link>
        <guid isPermaLink="true">https://simpleit.rocks/set-up-ubuntu-to-serve-a-django-website-step-by-step/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>django</category>
        
      </item>
    
      <item>
        <title>How To Download A Website With Wget The Right Way</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;To download an entire website from Linux it is often recommended to
use &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;, however, it must be done using the right parameters or the
downloaded website won’t be similar to the original one, with probably
relative broken links. This tutorial explores the right combination to
download a website:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;converting relative links to full paths so they can be browsed
offline.&lt;/li&gt;
  &lt;li&gt;preventing requesting too many web pages too fast, overloading the server
and possibly being blocked from requesting more.&lt;/li&gt;
  &lt;li&gt;avoid overwriting or creating duplicates of already downloaded files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-wget&quot;&gt;Using Wget&lt;/h2&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://www.gnu.org/software/wget/manual/html_node/Overview.html#Overview&quot;&gt;
  &lt;p&gt;GNU Wget is a free utility for non-interactive download of files
from the Web&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://www.gnu.org/software/wget/manual/html_node/Overview.html#Overview&quot;&gt;wget
manual Overview&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;wget-needed-parameters&quot;&gt;Wget needed parameters&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; command is very popular in Linux and present in most
distributions.&lt;/p&gt;

&lt;p&gt;To download an entire website we use the following parameters:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--wait=2&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Wait the specified number of seconds between the retrievals. In
this case 2 seconds.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--limit-rate=20K&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Limit the download speed to amount bytes per second.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--recursive&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Turn on recursive retrieving. The default maximum depth is 5.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dd&gt;If the website has more levels than 5, then you can specify it with &lt;code class=&quot;highlighter-rouge&quot;&gt;--level=depth&lt;/code&gt;&lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--page-requisites&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;download all the files that are necessary to properly display a
given HTML page.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This includes such things as inlined images, sounds, and
referenced stylesheets.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--user-agent=Mozilla&lt;/code&gt;`&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Identify as Mozilla to the HTTP server.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-parent&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Do not ever ascend to the parent directory when retrieving
recursively.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--convert-links&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;After the download is complete, convert the links in the document
to make them suitable for local viewing.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--adjust-extension&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;If a file of type application/xhtml+xml or text/html is downloaded
and the URL does not end with the regexp &lt;code class=&quot;highlighter-rouge&quot;&gt;\.[Hh][Tt][Mm][Ll]?&lt;/code&gt;, this
option will cause the suffix .html to be appended to the local
filename.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--no-clobber&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;When running Wget with -r, re-downloading a file will result in
the new copy simply overwriting the old.  Adding -nc will prevent
this behavior, instead causing the original version to be preserved
and any newer copies on the server to be ignored.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e robots=off&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;turn off the robot exclusion&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
  &lt;dt&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--level&lt;/code&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;blockquote&gt;
      &lt;p&gt;Specify recursion maximum depth level depth. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;inf&lt;/code&gt; as the
value for inifinite.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Summarizing, these are the needed parameters:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget &lt;span class=&quot;nt&quot;&gt;--wait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;--level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;inf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--limit-rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;20K &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--recursive&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--page-requisites&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--user-agent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Mozilla &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--no-parent&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--convert-links&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--adjust-extension&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;--no-clobber&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;robots&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
	 https://example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or in one line:&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;wget --wait=2 --level=inf --limit-rate=20K --recursive --page-requisites --user-agent=Mozilla --no-parent --convert-links --adjust-extension --no-clobber -e robots=off https://example.com&lt;/kbd&gt;&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;

&lt;p&gt;Let’s try to download the &lt;a href=&quot;https://example.com&quot;&gt;https://example.com&lt;/a&gt; website (single page)
to see how verbose is &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; and how it behaves.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;wget --wait=2
--limit-rate=20K --recursive --page-requisites --user-agent=Mozilla
--no-parent --convert-links --adjust-extension --no-clobber  https://example.com&lt;/kbd&gt;
--2017-06-30 19:48:46--  https://example.com/
Resolving example.com (example.com)... 93.184.216.34
Connecting to example.com (example.com)|93.184.216.34|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1270 (1,2K) [text/html]
Saving to: ‘example.com/index.html’

example.com/index.html            100%[===========================================================&amp;gt;]   1,24K  --.-KB/s    in 0,003s

2017-06-30 19:48:46 (371 KB/s) - ‘example.com/index.html’ saved [1270/1270]

FINISHED --2017-06-30 19:48:46--
Total wall clock time: 0,6s
Downloaded: 1 files, 1,2K in 0,003s (371 KB/s)
Converting links in example.com/index.html... nothing to do.
Converted links in 1 files in 0 seconds.
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;tree example.com/&lt;/kbd&gt;
example.com/
└── index.html

0 directories, 1 file

&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;wget-mirror&quot;&gt;Wget mirror&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Wget&lt;/code&gt; already comes with a handy &lt;code class=&quot;highlighter-rouge&quot;&gt;--mirror&lt;/code&gt; paramater that is the
same to use &lt;code class=&quot;highlighter-rouge&quot;&gt;-r -l inf -N&lt;/code&gt;. That is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;recursive download&lt;/li&gt;
  &lt;li&gt;with infinite depth&lt;/li&gt;
  &lt;li&gt;turn on time-stamping.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;download-all-the-urls-at-websites-sitemap&quot;&gt;Download all the URLs at website’s sitemap&lt;/h2&gt;

&lt;p&gt;Another approach is to avoid doing a recursive traversal of the
website and download all the URLs present in &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;filtering-url-from-sitemap&quot;&gt;Filtering url from sitemap&lt;/h3&gt;

&lt;p&gt;A sitemap file typically has the form:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;urlset&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;https://marcanuy.com/en/projects/conversions&lt;span class=&quot;nt&quot;&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;2014-09-15T00:00:00-03:00&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;https://marcanuy.com/en/projects/games-for-kids&lt;span class=&quot;nt&quot;&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;lastmod&amp;gt;&lt;/span&gt;2014-09-15T00:00:00-03:00&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lastmod&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/urlset&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We need to get all the URLs present in &lt;code class=&quot;highlighter-rouge&quot;&gt;sitemap.xml&lt;/code&gt;, using &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;:
&lt;kbd&gt;grep &quot;&lt;loc&gt;&quot; sitemap.xml&amp;lt;/kbd&amp;gt;.&lt;/loc&gt;&lt;/kbd&gt;&lt;/p&gt;

&lt;h3 id=&quot;removing-loc-tags&quot;&gt;Removing loc tags&lt;/h3&gt;

&lt;p&gt;Now to remove the superfluous tags: &lt;kbd&gt;sed -e 's/&amp;lt;[^&amp;gt;]*&amp;gt;//g'`&lt;/kbd&gt;&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;After the previous two command we have a list of URLs, and that is the
parameter read by &lt;code class=&quot;highlighter-rouge&quot;&gt;wget -i&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;wget -i `grep &quot;&lt;loc&gt;&quot; sitemap.xml| sed -e 's/&amp;lt;[^&amp;gt;]*&amp;gt;//g'`&amp;lt;/kbd&amp;gt;&lt;/loc&gt;&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;And wget will start downloading them sequentially.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; is a fantastic command line tool, it has everything you will
ever need without having to use any other GUI tool, just be sure to
browse its manual for the right parameters you want.&lt;/p&gt;

&lt;p&gt;The above parameters combination will make you have a browseable
website locally.&lt;/p&gt;

&lt;p&gt;You should be careful to check that &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; extensions works for your
case, sometimes you may want that wget generates them based on the
Content Type but sometimes you should avoid wget generating them as is
the case when using &lt;em&gt;pretty urls&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt; manual &lt;a href=&quot;https://www.gnu.org/software/wget/&quot;&gt;https://www.gnu.org/software/wget/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 30 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/how-to-download-a-website-with-wget-the-right-way/</link>
        <guid isPermaLink="true">https://simpleit.rocks/how-to-download-a-website-with-wget-the-right-way/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Writing Alternating Between English And Spanish In Emacs</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;If you write in Spanish and English then you will have to choose
between using a keyboard with Spanish or English layout. No matter
which one you select, when you write in the other language you will
have to choose a strategy to handle the letters that are present in
one language that are not in the other one.&lt;/p&gt;

&lt;p&gt;This is a quick overview to handle this situation with an English
keyboard layout (i.e.: not having &lt;code class=&quot;highlighter-rouge&quot;&gt;ñ&lt;/code&gt;, and tildes &lt;code class=&quot;highlighter-rouge&quot;&gt;ó&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;á&lt;/code&gt;, etc)&lt;/p&gt;

&lt;h2 id=&quot;changing-the-keyboard-layout&quot;&gt;Changing the keyboard layout&lt;/h2&gt;

&lt;p&gt;In Emacs you can quickly change the layout with &lt;code class=&quot;highlighter-rouge&quot;&gt;set-input-method&lt;/code&gt;,
which will change the keyboard layout for the current buffer.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;set-input-method:
 Select and activate input method INPUT-METHOD for the current buffer.
 This also sets the default input method to the one you specify.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt;mule-cmds.el &lt;cite&gt;Emacs manual&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are three alternatives for &lt;strong&gt;Spanish&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;spanish-keyboard&lt;/li&gt;
  &lt;li&gt;spanish-postfix&lt;/li&gt;
  &lt;li&gt;spanish-prefix&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;check-layouts&quot;&gt;Check layouts&lt;/h2&gt;

&lt;p&gt;What layout each keyboard uses? Let’s find out with
&lt;kbd&gt;quail-show-keyboard-layout&lt;/kbd&gt;, in each input method it prints
the recognized layout:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;spanish-keyboard&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Keyboard layout (keyboard type: standard)

     +----------------------------------------------------------------+
      | 1 ! | 2 &quot; | 3 · | 4 $ | 5 % | 6 &amp;amp; | 7 / | 8 ( | 9 ) | 0 = | ' ? | ¡ ¿ | í Í |
     +----------------------------------------------------------------+
        | q Q | w W | e E | r R | t T | y Y | u U | i I | o O | p P | é É | ó Ó |
       +------------------------------------------------------------+
         | a A | s S | d D | f F | g G | h H | j J | k K | l L | ñ Ñ | á Á | ú Ú |
        +-----------------------------------------------------------+
           | z Z | x X | c C | v V | b B | n N | m M | , ; | . : | - _ |
          +-------------------------------------------------+
		    +-----------------------------+
		    |          space bar          |
		    +-----------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;spanish-postfix&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Keyboard layout (keyboard type: standard)

     +----------------------------------------------------------------+
      | 1 ! | 2 @ | 3 # | 4 $ | 5 % | 6 ^ | 7 &amp;amp; | 8 * | 9 ( | 0 ) | - _ | = + | ` ~ |
     +----------------------------------------------------------------+
        | q Q | w W | e E | r R | t T | y Y | u U | i I | o O | p P | [ { | ] } |
       +------------------------------------------------------------+
         | a A | s S | d D | f F | g G | h H | j J | k K | l L | ; : | ' &quot; | \ | |
        +-----------------------------------------------------------+
           | z Z | x X | c C | v V | b B | n N | m M | , &amp;lt; | . &amp;gt; | / ? |
          +-------------------------------------------------+
		    +-----------------------------+
		    |          space bar          |
		    +-----------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;spanish-prefix&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Keyboard layout (keyboard type: standard)

     +----------------------------------------------------------------+
      | 1 ! | 2 @ | 3 # | 4 $ | 5 % | 6 ^ | 7 &amp;amp; | 8 * | 9 ( | 0 ) | - _ | = + | ` ~ |
     +----------------------------------------------------------------+
        | q Q | w W | e E | r R | t T | y Y | u U | i I | o O | p P | [ { | ] } |
       +------------------------------------------------------------+
         | a A | s S | d D | f F | g G | h H | j J | k K | l L | ; : | ' &quot; | \ | |
        +-----------------------------------------------------------+
           | z Z | x X | c C | v V | b B | n N | m M | , &amp;lt; | . &amp;gt; | / ? |
          +-------------------------------------------------+
		    +-----------------------------+
		    |          space bar          |
		    +-----------------------------+

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;choosing-the-layout&quot;&gt;Choosing the layout&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;spanish-keyboard&lt;/strong&gt;: while having all the typical Spanish letters
their own key, I don’t find it pretty close to any other keyboard I
have ever tried.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;spanish-postfix&lt;/strong&gt;: expects to press tildes &lt;strong&gt;after&lt;/strong&gt; the desired
letter, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;o+tilde=ó&lt;/code&gt; which I find a bit unnatural.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;spanish-prefix&lt;/strong&gt;: The one that resembles more the classical Spanish keyboard behaviour
is the &lt;strong&gt;spanish-prefix&lt;/strong&gt; one. In this one you will write tildes
before the letter, e.g.:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;to write &lt;strong&gt;ó&lt;/strong&gt;: press the tilde key and &lt;strong&gt;then&lt;/strong&gt; the &lt;kbd&gt;o&lt;/kbd&gt;.&lt;/li&gt;
      &lt;li&gt;to write &lt;strong&gt;ñ&lt;/strong&gt;: press the &lt;kbd&gt;~&lt;/kbd&gt; symbol and &lt;strong&gt;then&lt;/strong&gt; &lt;kbd&gt;o&lt;/kbd&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;After executing &lt;kbd&gt;set-input-method&lt;/kbd&gt; and selecting
&lt;strong&gt;spanish-prefix&lt;/strong&gt;, writing in each language is as easy as switching
them with &lt;kbd&gt;C-\&lt;/kbd&gt; &lt;em&gt;(toggle-input-method)&lt;/em&gt; and have a pretty close experience as using a
Spanish keyboard in an English keyboard layout.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;toggle-input-method:&lt;/p&gt;

  &lt;p&gt;Enable or disable multilingual text input method for the current
  buffer. Only one input method can be enabled at any time in a given buffer.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt;mule-cmds.el &lt;cite&gt;Emacs manual&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sat, 17 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/writing-alternating-between-english-and-spanish-in-emacs/</link>
        <guid isPermaLink="true">https://simpleit.rocks/writing-alternating-between-english-and-spanish-in-emacs/</guid>
        
        
        <category>docs</category>
        
        <category>lisp</category>
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>Writing In Emacs Checking Spelling Style And Grammar</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Emacs comes with several options to make your writing better by
avoiding mistakes, controlling typos and grammar, like the
ones described in the Emacs
manual:
&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html&quot;&gt;Checking and Correcting Spelling&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After getting familiar with them you will probably want to
&lt;strong&gt;automatically&lt;/strong&gt; enable them in text modes (like markdown), and even
controlling your source code comments and strings.&lt;/p&gt;

&lt;p&gt;This guide shows how to make it with two of the best packages for
writing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.emacswiki.org/emacs/FlySpell&quot;&gt;flyspell-mode&lt;/a&gt;&lt;/strong&gt;: Flyspell enables on-the-fly spell checking, highlighting incorrect words as soon as they are completed.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/mhayashi1120/Emacs-langtool&quot;&gt;langtool&lt;/a&gt;&lt;/strong&gt;: is a grammar check utility using &lt;a href=&quot;http://languagetool.org/&quot;&gt;LanguageTool&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;LanguageTool&lt;/em&gt; is &lt;cite&gt;an Open Source proof­reading program for
English, Spanish, and more than 20 other languages. It finds many
errors that a simple spell checker cannot detect and several grammar
problems.&lt;/cite&gt;&lt;/p&gt;

&lt;p&gt;After having both packages installed and properly configured, we will
activate &lt;strong&gt;flyspell-mode&lt;/strong&gt; as soon as we load a text mode, and check
for grammatical errors each time we save the file.&lt;/p&gt;

&lt;h2 id=&quot;activate-flyspell-mode-when-loading-text-modes&quot;&gt;Activate flyspell-mode when loading text-modes&lt;/h2&gt;

&lt;p&gt;I find very helpful to activate &lt;code class=&quot;highlighter-rouge&quot;&gt;flyspell-mode&lt;/code&gt; as soon as I load any
&lt;em&gt;Markdown&lt;/em&gt; file, as &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-mode&lt;/code&gt; is a derivate of &lt;code class=&quot;highlighter-rouge&quot;&gt;text-mode&lt;/code&gt; you
can choose what works better for you. In this case I will activate it
for &lt;code class=&quot;highlighter-rouge&quot;&gt;text-mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To load &lt;code class=&quot;highlighter-rouge&quot;&gt;flyspell-mode&lt;/code&gt; when loading a file in any of the recognized
&lt;code class=&quot;highlighter-rouge&quot;&gt;text-mode&lt;/code&gt;’s, we load it with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can also avoid loading them in any other specific &lt;code class=&quot;highlighter-rouge&quot;&gt;text-mode&lt;/code&gt;,
for example &lt;code class=&quot;highlighter-rouge&quot;&gt;change-log-mode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;log-edit-mode&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To also use &lt;code class=&quot;highlighter-rouge&quot;&gt;flyspell-mode&lt;/code&gt; to check source code comments and strings there is a
special mode called &lt;code class=&quot;highlighter-rouge&quot;&gt;flyspell-prog-mode&lt;/code&gt;, for example we can enable
for &lt;code class=&quot;highlighter-rouge&quot;&gt;python-mode&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-hook 'python-mode-hook
    (lambda ()
    (flyspell-prog-mode)
    ))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;check-grammar-after-saving-a-text-file-with-languagetools&quot;&gt;Check grammar after saving a text file with LanguageTools&lt;/h2&gt;

&lt;p&gt;To check a text buffer and light up errors with &lt;code class=&quot;highlighter-rouge&quot;&gt;langtool&lt;/code&gt; we use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;langtool-check&lt;/code&gt; function each time we save the buffer using
&lt;code class=&quot;highlighter-rouge&quot;&gt;after-save-hook&lt;/code&gt;, in this case I will activate it only for &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-mode&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-lisp&quot;&gt;(add-hook 'markdown-mode-hook
          (lambda () 
             (add-hook 'after-save-hook 'langtool-check nil 'make-it-local)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In Emacs is easy to forget to check for errors manually, enabling them
automatically is a great way to minimize errors that can be avoided
easily and improving our documents legibility.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;flyspell-mode&lt;/em&gt;: &lt;a href=&quot;https://www.emacswiki.org/emacs/FlySpell&quot;&gt;https://www.emacswiki.org/emacs/FlySpell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;langtool&lt;/em&gt;: &lt;a href=&quot;https://github.com/mhayashi1120/Emacs-langtool&quot;&gt;https://github.com/mhayashi1120/Emacs-langtool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;LanguageTool&lt;/em&gt;: &lt;a href=&quot;http://languagetool.org/&quot;&gt;http://languagetool.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/users/6148/trey-jackson&quot;&gt;Trey Jackson&lt;/a&gt;
answer to &lt;a href=&quot;https://stackoverflow.com/a/6141681/1165509&quot;&gt;How to add a hook to only run in a particular mode?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/writing-in-emacs-checking-spelling-style-and-grammar/</link>
        <guid isPermaLink="true">https://simpleit.rocks/writing-in-emacs-checking-spelling-style-and-grammar/</guid>
        
        
        <category>docs</category>
        
        <category>lisp</category>
        
        <category>emacs</category>
        
      </item>
    
  </channel>
</rss>
