<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT 🤘 Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>http://simpleit.rocks/</link>
    <atom:link href="http://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 14 Nov 2016 23:36:39 +0000</pubDate>
    <lastBuildDate>Mon, 14 Nov 2016 23:36:39 +0000</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>Auto Tweet New Blog Posts Based In A Website Feed</title>
        <description>
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/auto-tweet-new-blog-posts-based-in-a-website-feed/</link>
        <guid isPermaLink="true">http://simpleit.rocks/auto-tweet-new-blog-posts-based-in-a-website-feed/</guid>
        
        <category>git</category>
        
        <category>gh-pages</category>
        
        <category>travis</category>
        
        
        <category>docs</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Contributing To A Github Repository Step By Step</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Simply guide to contribute to any project in Github. The basic
workflow consist of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fork the repository&lt;/li&gt;
  &lt;li&gt;Make a fix or contribution&lt;/li&gt;
  &lt;li&gt;Submit a pull request to the original project&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;forking&quot;&gt;Forking&lt;/h2&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;
  &lt;p&gt;A fork is a copy of a repository. Forking a repository allows you to
freely experiment with changes without affecting the original
project.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Fork A Repo in &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;Github help&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to the project you want to contribute and press the &lt;strong&gt;Fork&lt;/strong&gt;
button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/bootcamp/Bootcamp-Fork.png&quot; alt=&quot;fork&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That will generate a copy of the repository in your Github profile
where you can work with the code.&lt;/p&gt;

&lt;p&gt;In this example I will fork the following
repo: &lt;a href=&quot;https://github.com/housed/feedr&quot;&gt;https://github.com/housed/feedr&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;clone-the-forked-repo&quot;&gt;Clone the forked repo&lt;/h2&gt;

&lt;p&gt;Make a local copy of the forked repo with &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git clone https://github.com/marcanuy/feedr.git&lt;/kbd&gt;
Cloning into 'feedr'...
remote: Counting objects: 65, done.
remote: Total 65 (delta 0), reused 0 (delta 0), pack-reused 65
Ricezione degli oggetti: 100% (65/65), 178.73 KiB | 282.00 KiB/s, done.
Risoluzione dei delta: 100% (22/22), done.
Checking connectivity... fatto.
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;cd feedr&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;feedr$&lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;configure-the-original-repo-as-a-remote&quot;&gt;Configure the original repo as a remote&lt;/h2&gt;

&lt;p&gt;Having the original repo as a remote makes it possible to keep your
code up to date with all the contributions made to the original repo
and contribute your own code.&lt;/p&gt;

&lt;p&gt;The convention is to name this remote repo &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;feedr$&lt;/span&gt; &lt;kbd&gt;git remote add upstream https://github.com/housed/feedr.git&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;feedr$&lt;/span&gt; &lt;kbd&gt;git remote -v&lt;/kbd&gt;
origin  git@github.com:marcanuy/feedr.git (fetch)
origin  git@github.com:marcanuy/feedr.git (push)
upstream        https://github.com/housed/feedr.git (fetch)
upstream        https://github.com/housed/feedr.git (push)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-branch&quot;&gt;Create a branch&lt;/h2&gt;

&lt;p&gt;Create a topic branch where you fix or improve the code and move to
that branch.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git checkout -b fix-indentation&lt;/kbd&gt;
Switched to a new branch 'fix-indentation'
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-branch-with-new-changes&quot;&gt;Create a branch with new changes&lt;/h2&gt;

&lt;p&gt;After working in the new branch, making some changes and &lt;em&gt;commits&lt;/em&gt;,
push the new branch,&lt;code class=&quot;highlighter-rouge&quot;&gt;fix-indentation&lt;/code&gt; in this case, to your Github
repo.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git push origin fix-indentation&lt;/kbd&gt;
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 367 bytes | 0 bytes/s, done.
Total 4 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:marcanuy/feedr.git
 * [new branch]      fix-indentation -&amp;gt; fix-indentation
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-pull-request&quot;&gt;Create a pull request&lt;/h2&gt;

&lt;p&gt;Now your changes are in a new branch in your Github repo, it is time
to make a &lt;em&gt;pull request&lt;/em&gt; to merge your changes in the original repo.&lt;/p&gt;

&lt;p&gt;The Github repo webpage shows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your recently pushed branches:
    fix-indentation (less than a minute ago)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and makes it available a button to send the &lt;strong&gt;Pull Request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After pressing the &lt;strong&gt;Pull request&lt;/strong&gt; button, the webpage redirects to
&lt;strong&gt;Open a pull request&lt;/strong&gt; page, after selecting the base fork and the
head fork, you can make the &lt;strong&gt;pull request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now just wait to the repo owner to merge your fixes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;marcanuy wants to merge 1 commit into housed:master from  marcanuy:fix-indentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;Syncing a fork&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request-from-a-fork/&quot;&gt;Creating a pull request from a fork&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/activities/forking/&quot;&gt;Forking Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/contributing-to-a-github-repository-step-by-step/</link>
        <guid isPermaLink="true">http://simpleit.rocks/contributing-to-a-github-repository-step-by-step/</guid>
        
        
        <category>docs</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Bash Script to Find Out If MySQL Is Running Or Not</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a simple solution to monitor the MySQL daemon, if it detects
that the daemon is not running, it starts it and send a notification
email.&lt;/p&gt;

&lt;p&gt;It is a simpler solution than using other more complete software like
&lt;em&gt;supervisord&lt;/em&gt; or &lt;em&gt;MonIT&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-script&quot;&gt;Creating the script&lt;/h2&gt;

&lt;p&gt;Create the script &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/scripts/monitor_mysql.sh&lt;/code&gt; with the following
content:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Config #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mysql_daemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysqld'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pgrep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/usr/bin/pgrep'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mysql_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sudo service mysql start'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;fail_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MySQL is down in &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;hostname&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Script #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#look up process&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pgrep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mysql_daemon&lt;/span&gt; &amp;gt; /dev/null
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fail_msg&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mysql_start&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And make it executable:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;chmod +x /root/scripts/monitor_mysql.sh&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;cronjob&quot;&gt;Cronjob&lt;/h2&gt;

&lt;p&gt;Specify through &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; to run it every 10 minutes. Running&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;crontab -e&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Add the following lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MAILTO=mail@example.com
*/10 * * * * /root/scripts/monitor_mysql.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Every time the script starts the daemon, an email will be sent with
its output.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;
  &lt;p&gt;cron(8) looks at the MAILTO variable if a mail needs to be send as a
result of running any commands in that particular crontab.  If
MAILTO is defined (and non-empty), mail is sent to the specified
address.  If MAILTO is defined but empty (MAILTO=””), no mail is
sent.  Otherwise, mail is sent to the owner of the crontab.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Crontab &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;man description&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Crontab &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;http://man7.org/linux/man-pages/man5/crontab.5.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mheadd/5571023&quot;&gt;Simple bash script to check whether MySQL is running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/lightweight-solution-to-start-mysql-daemon-if-not-running/</link>
        <guid isPermaLink="true">http://simpleit.rocks/lightweight-solution-to-start-mysql-daemon-if-not-running/</guid>
        
        
        <category>docs</category>
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Automated Deployment Of Jekyll Websites To Github Pages With A Git Push To Github</title>
        <description>
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A step-by-step guide to publish a Jekyll website automatically after
doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; to Github.&lt;/p&gt;

&lt;p&gt;This guide makes use of &lt;em&gt;Github Pages&lt;/em&gt;, &lt;em&gt;Jekyll&lt;/em&gt; and &lt;em&gt;Travis CI&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Github offers a free service called &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; to host regular
&lt;abbr title=&quot;HyperTextMarkupLanguage&quot;&gt;HTML&lt;/abbr&gt; content hosted directly from users GitHub repositories.&lt;/p&gt;

&lt;p&gt;It has a special, built-in support, for Jekyll, one of the most popular static
site generators, but you will have to use the Jekyll version currently
supported by Github (not always the latest one) and it does not allow
custom Jekyll plugins, because Jekyll is executed with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--safe&lt;/code&gt; flag.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;
  &lt;p&gt;GitHub Pages is powered by Jekyll. However, all Pages sites are
generated using the –safe option to disable custom plugins for
security reasons. Unfortunately, this means your plugins won’t work
if you’re deploying to GitHub Pages.&lt;/p&gt;

  &lt;p&gt;You can still use GitHub Pages to publish your site, but you’ll need
to convert the site locally and push the generated static files to
your GitHub repository instead of the Jekyll source files.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;&lt;cite&gt;&lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;Plugins on GitHub Pages&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;A simple way to overcome these limitations is to manually build the
site before pushing to the repo or make use of automation tools like
Travis CI that will do this job for us in each &lt;em&gt;push&lt;/em&gt; to Github.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;create-the-basic-travisyml-file&quot;&gt;Create the basic .travis.yml file&lt;/h3&gt;

&lt;p&gt;Travis configuration is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;, we will create a new
one with the following contents (adjust versions to your needs):&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.3.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install -g bower&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bower install&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x ./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash ./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES=true&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;COMMIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;me@marcanuy.com&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-the-deployment-script-deploysh&quot;&gt;Create the deployment script deploy.sh&lt;/h3&gt;

&lt;p&gt;We will create the following &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e &lt;span class=&quot;c&quot;&gt;# Exit with nonzero exit code if anything fails&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TARGET_BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gh-pages&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;doCompile &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build -d out/
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pull requests and commits to other branches shouldn't try to deploy, just build to verify&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TRAVIS_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt; -o &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TRAVIS_BRANCH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skipping deploy; just doing a build.&quot;&lt;/span&gt;
    doCompile
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Save some useful information&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git config remote.origin.url&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SSH_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/https&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;\/\/github.com\//git@github.com&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SHA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git rev-parse --verify HEAD&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Clone the existing gh-pages for this repo into out/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deply)&lt;/span&gt;
git clone &lt;span class=&quot;nv&quot;&gt;$REPO&lt;/span&gt; out
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;out
git checkout &lt;span class=&quot;nv&quot;&gt;$TARGET_BRANCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; git checkout --orphan &lt;span class=&quot;nv&quot;&gt;$TARGET_BRANCH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..

&lt;span class=&quot;c&quot;&gt;# Clean out existing contents&lt;/span&gt;
rm -rf out/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0

&lt;span class=&quot;c&quot;&gt;# Run our compile script&lt;/span&gt;
doCompile

&lt;span class=&quot;c&quot;&gt;# Now let's go have some fun with the cloned repo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;out
git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;Travis CI&quot;&lt;/span&gt;
git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$COMMIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# If there are no changes to the compiled out (e.g. this is a README update) then just bail.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git diff --exit-code&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No changes to the output on this push; exiting.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Commit the &quot;changes&quot;, i.e. the new version.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The delta will show diffs between new and old versions.&lt;/span&gt;
git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Deploy to GitHub Pages: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SHA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_KEY_VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;encrypted_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_key&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_IV_VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;encrypted_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_iv&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!ENCRYPTED_KEY_VAR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_IV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!ENCRYPTED_IV_VAR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
openssl aes-256-cbc -K &lt;span class=&quot;nv&quot;&gt;$ENCRYPTED_KEY&lt;/span&gt; -iv &lt;span class=&quot;nv&quot;&gt;$ENCRYPTED_IV&lt;/span&gt; -in deploy_key.enc -out deploy_key -d
chmod 600 deploy_key
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ssh-agent -s&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
ssh-add deploy_key

&lt;span class=&quot;c&quot;&gt;# Now that we're all set up, we can push.&lt;/span&gt;
git push &lt;span class=&quot;nv&quot;&gt;$SSH_REPO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TARGET_BRANCH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The script basically performs the following actions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the &lt;em&gt;gh-pages&lt;/em&gt; branch &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --orphan gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;
  &lt;p&gt;Updates files in the working tree to match the version in the index
or the specified tree. If no paths are given, git checkout will also
update HEAD to set the specified branch as the current branch.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; git checkout orphan flag in &lt;cite&gt;&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;git-checkout&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Generate the Jekyll build inside &lt;code class=&quot;highlighter-rouge&quot;&gt;out/&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;Commit and deploy generated files to &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;enable-travis-for-the-repository&quot;&gt;Enable Travis for the repository&lt;/h3&gt;

&lt;p&gt;Sign in to Travis CI with your GitHub account.&lt;/p&gt;

&lt;p&gt;Once you’re signed in, Travis will synchronize your repositories from
GitHub. Go to your profile page and enable Travis CI for the
repository you want to build.&lt;/p&gt;

&lt;h3 id=&quot;generate-credentials&quot;&gt;Generate credentials&lt;/h3&gt;

&lt;p&gt;We need to generate credentials to be able to publish the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;
branch contents on GitHub
using
&lt;a href=&quot;https://docs.travis-ci.com/user/encrypting-files/&quot;&gt;Travis Automated Encryption&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;generating-a-new-ssh-key-to-use-with-travis&quot;&gt;Generating a new SSH key to use with Travis&lt;/h4&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ssh-keygen -t rsa -b 4096 -C &quot;your_github_email@example.com&quot;&lt;/kbd&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/home/marcanuy/.ssh/id_rsa): &lt;kbd&gt;deploy_key&lt;/kbd&gt;
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in deploy_key.
Your public key has been saved in deploy_key.pub.
The key fingerprint is:
SHA256:vn3O/NkfKHg2nb9p0J7yam72elUInAHa0MtGWbsZ048 me@marcanuy.com
The key's randomart image is:
+---[RSA 4096]----+
|        .o.=o+   |
|        .o=.* .  |
|       oo+o.oo.+ |
|       o+ o  oE o|
|       .S ooo o .|
|          .  o..o|
|           o o++o|
|            o=-*=|
|            =*xX*|
+----[SHA256]-----+
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;add-deploy-key-to-github-keys&quot;&gt;Add deploy key to GitHub keys&lt;/h3&gt;

&lt;p&gt;Add the generated &lt;strong&gt;public key&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy_key.pub&lt;/code&gt; to your repository at
https://github.com/&lt;your name=&quot;&quot;&gt;/&lt;your repo=&quot;&quot;&gt;/settings/keys.&lt;/your&gt;&lt;/your&gt;&lt;/p&gt;

&lt;p&gt;You can copy easily with &lt;code class=&quot;highlighter-rouge&quot;&gt;xclip&lt;/code&gt; and then paste it in the keys textbox:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;xclip -sel clip &amp;lt; deploy_key.pub&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img class=&quot;img-fluid&quot; alt=&quot;Responsive image&quot; src=&quot;/assets/travis_add_deploy_key.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Detailed steps are &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot;&gt;in this Github guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;encrypt-the-generated-deploy-key-with-the-travis-client&quot;&gt;Encrypt the generated deploy key with the Travis client&lt;/h3&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;travis encrypt-file deploy_key --add&lt;/kbd&gt;
Detected repository as marcanuy/simpleit.rocks, is this correct? |yes| &lt;kbd&gt;yes&lt;/kbd&gt;
encrypting deploy_key for marcanuy/emacside.com
storing result as deploy_key.enc
storing secure env variables for decryption

Make sure to add deploy_key.enc to the git repository.
Make sure not to add deploy_key to the git repository.
Commit all changes to your .travis.yml.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;edit-travisyml-with-encryption-ids&quot;&gt;Edit .travis.yml with encryption ids&lt;/h3&gt;

&lt;p&gt;The previous step added the before_install section with the proper
command to decrypt the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy_key&lt;/code&gt;, now we have to detect the
encription id and add an environment variable like: ` ENCRYPTION_LABEL: “&amp;lt;…. encryption label from previous step ….&amp;gt;”`&lt;/p&gt;

&lt;p&gt;The encription id is the string between &lt;code class=&quot;highlighter-rouge&quot;&gt;$encrypted_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_key&lt;/code&gt; in
the automatically added &lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt; line:&lt;/p&gt;

&lt;p&gt;
openssl aes-256-cbc -K $encrypted_&lt;span style=&quot;color:red&quot;&gt;0c6d27255ccf&lt;/span&gt;_key -iv $encrypted_0c6d27255ccf_iv -in deploy_key.enc -out deploy_key -d.
&lt;/p&gt;

&lt;p&gt;In the previous case I will have to add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;- ENCRYPTION_LABEL:
0c6d27255ccf&lt;/code&gt;, the file &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; will look like:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0c6d27255ccf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the final &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.3.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install -g bower&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bower install&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x ./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES=true&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;COMMIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;me@marcanuy.com&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0c6d27255ccf&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openssl aes-256-cbc -K $encrypted_0c6d27255ccf_key -iv $encrypted_0c6d27255ccf_iv -in deploy_key.enc -out deploy_key -d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-deploy-key-to-gitignore&quot;&gt;Add deploy key to gitignore:&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; add &lt;em&gt;deploy_key&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_site
.sass-cache
.jekyll-metadata
bower_components
deploy_key
deploy_key.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-the-travis-button-to-github-readme&quot;&gt;Adding the travis button to github readme&lt;/h3&gt;

&lt;p&gt;In your project &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; file you can add the fancy Travis button with
the current status of the building, adding a similar code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[![Build Status](https://travis-ci.org/marcanuy/emacside.com.svg?branch=master)](https://travis-ci.org/marcanuy/emacside.com)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can find your project button url following &lt;a href=&quot;https://docs.travis-ci.com/user/status-images/&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;This guide is heavily based in &lt;a href=&quot;https://gist.github.com/domenic/ec8b0fc8ab45f39403dd&quot;&gt;Auto-deploying built products to gh-pages with
  Travis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Related articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/encrypting-files/&quot;&gt;https://docs.travis-ci.com/user/encrypting-files/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/settings/keys&quot;&gt;https://github.com/settings/keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key&quot;&gt;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot;&gt;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://awestruct.org/auto-deploy-to-github-pages/&quot;&gt;http://awestruct.org/auto-deploy-to-github-pages/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/deployment-methods/&quot;&gt;https://jekyllrb.com/docs/deployment-methods/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/&quot;&gt;https://jekyllrb.com/docs/continuous-integration/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/automated-deployment-of-jekyll-websites-to-github-pages-with-a-git-push-to-github/</link>
        <guid isPermaLink="true">http://simpleit.rocks/automated-deployment-of-jekyll-websites-to-github-pages-with-a-git-push-to-github/</guid>
        
        <category>git</category>
        
        <category>github</category>
        
        <category>gh-pages</category>
        
        <category>jekyll</category>
        
        <category>travis</category>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
        <category>tutorials</category>
        
      </item>
    
      <item>
        <title>How To Check Local Websites For Broken Links</title>
        <description>
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;After generating a website statically, it is a good practice to check
that there are no broken links or images, there are some popular
command line tools for this, in this case I will be
using &lt;a href=&quot;https://github.com/gjtorikian/html-proofer&quot;&gt;htmlproofer&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://github.com/gjtorikian/html-proofer&quot;&gt;
  &lt;p&gt;HTMLProofer is a set of tests to validate your HTML output. These
tests check if your image references are legitimate, if they have
alt tags, if your internal links are working, and so on. It’s
intended to be an all-in-one checker for your output.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://github.com/gjtorikian/html-proofer&quot;&gt;HTMLProofer&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;It can be installed directly with &lt;em&gt;&lt;a href=&quot;https://rubygems.org&quot;&gt;gem&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;gem install html-proofer&lt;/kbd&gt;
&lt;/pre&gt;

&lt;p&gt;Or using &lt;em&gt;&lt;a href=&quot;http://bundler.io&quot;&gt;bundle&lt;/a&gt;&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;Adding &lt;code class=&quot;highlighter-rouge&quot;&gt;gem 'html-proofer'&lt;/code&gt; to the file &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; and then:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;gem install html-proofer&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;executing&quot;&gt;Executing&lt;/h2&gt;

&lt;p&gt;To test for broken links, just specify the directory, for example
using the common Jekyll output directory &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htmlproofer ./_site&lt;/kbd&gt;
0
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gjtorikian/html-proofer&quot;&gt;https://github.com/gjtorikian/html-proofer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://validator.w3.org/checklink&quot;&gt;https://validator.w3.org/checklink&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/&quot;&gt;https://jekyllrb.com/docs/continuous-integration/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/how-to-check-local-websites-for-broken-links/</link>
        <guid isPermaLink="true">http://simpleit.rocks/how-to-check-local-websites-for-broken-links/</guid>
        
        <category>html</category>
        
        <category>html5</category>
        
        <category>validator</category>
        
        <category>web-development</category>
        
        
        <category>docs</category>
        
        <category>web</category>
        
        <category>html</category>
        
      </item>
    
      <item>
        <title>Adding Custom Snippets To Yasnippet</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;When using &lt;a href=&quot;https://github.com/joaotavora/yasnippet&quot;&gt;Yasnippets&lt;/a&gt; (a
popular template system for Emacs), you will usually need to add your
custom snippets to easy the task of writing repetitive content.&lt;/p&gt;

&lt;p&gt;To extend the snippets, there is a special snippet template that acts
as a template in a similar way that &lt;em&gt;yasnippets&lt;/em&gt; handle other templates.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-snippet&quot;&gt;Writing a snippet&lt;/h2&gt;

&lt;h3 id=&quot;snippet-directory&quot;&gt;Snippet directory&lt;/h3&gt;

&lt;p&gt;The directory for storing snippets is defined by the variable
&lt;code class=&quot;highlighter-rouge&quot;&gt;yas-snippet-dirs&lt;/code&gt; and by default is &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.emacs.d/snippets&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;You can check its value in your system with &lt;code class=&quot;highlighter-rouge&quot;&gt;C-v yas-snippet-dirs&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-snippet&quot;&gt;Creating the snippet&lt;/h3&gt;

&lt;p&gt;To create the snippet file execute the command &lt;code class=&quot;highlighter-rouge&quot;&gt;yas-new-snippet&lt;/code&gt; &lt;em&gt;(C-c
&amp;amp; C-n)&lt;/em&gt;,
yasnippets internally expands the &lt;code class=&quot;highlighter-rouge&quot;&gt;snippet-writing&lt;/code&gt; snippet.&lt;/p&gt;

&lt;p&gt;A new buffer will open with the base model to define the new snippet
in the &lt;strong&gt;snippet-mode&lt;/strong&gt; major mode.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- mode: snippet -*-
# name: 
# key: 
# --

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;example&quot;&gt;Example&lt;/h4&gt;

&lt;p&gt;The following is an example of the current &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; statement in
&lt;em&gt;Python&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# name: for ... in ... : ...
# key: for
# group : control structure
# --
for ${var} in ${collection}:
    $0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;More details of the customizations can be found in
the
&lt;a href=&quot;https://joaotavora.github.io/yasnippet/snippet-development.html&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;saving-the-snippet&quot;&gt;Saving the snippet&lt;/h3&gt;

&lt;p&gt;The snippet will be saved in the default snippets directory and inside
the current &lt;em&gt;major-mode&lt;/em&gt; subdirectory. For example, if we attempt to
save the previous &lt;em&gt;python&lt;/em&gt; snippet it will be located in
&lt;code class=&quot;highlighter-rouge&quot;&gt;.emacs.d/snippets/python-mode&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-snippet&quot;&gt;Testing the snippet&lt;/h3&gt;

&lt;p&gt;Once saved, the snippet can be tested with the command &lt;em&gt;M-x
yas-tryout-snippet&lt;/em&gt; which will test the current snippet buffer
template in other buffer with the proper &lt;em&gt;major mode&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To load the new snippet just use &lt;code class=&quot;highlighter-rouge&quot;&gt;M-x yas-load-snippet-buffer&lt;/code&gt; and it
will be available in other buffers.&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;If you are extending the snippets definitions with something that
would be useful for others, consider making
a &lt;a href=&quot;https://help.github.com/articles/about-pull-requests&quot;&gt;pull request&lt;/a&gt;
to the official snippets
&lt;a href=&quot;https://github.com/AndreaCrotti/yasnippet-snippets&quot;&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://joaotavora.github.io/yasnippet/snippet-development.html&quot;&gt;https://joaotavora.github.io/yasnippet/snippet-development.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/adding-custom-snippets-to-yasnippet/</link>
        <guid isPermaLink="true">http://simpleit.rocks/adding-custom-snippets-to-yasnippet/</guid>
        
        
        <category>docs</category>
        
        <category>lisp</category>
        
        <category>emacs</category>
        
      </item>
    
      <item>
        <title>How To Dump And Import Utf 8 Mysql Databases In A Safe Way</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;If you have a MySQL database with its character set encoded in
&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-8&quot;&gt;UTF-8&lt;/a&gt;, then you need to treat it
in a special way when dumping and restoring the database to be able to
read its special characters.&lt;/p&gt;

&lt;h1 id=&quot;dumping-a-database&quot;&gt;Dumping a database&lt;/h1&gt;

&lt;p&gt;The common and quickest way of dumping a database with &lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump&lt;/code&gt; does not
treat &lt;em&gt;utf-8&lt;/em&gt; encoding right.&lt;/p&gt;

&lt;p&gt;Avoid doing it like:&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;
	mysqldump -uroot -p database &amp;gt; utf8.dump
&lt;/div&gt;

&lt;p&gt;This is the correct way to dump a MySQL database safely:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;mysqldump -uroot -p database -r utf8.dump&lt;/kbd&gt;
...
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; or, the same,&lt;code class=&quot;highlighter-rouge&quot;&gt;--result-file&lt;/code&gt; option, will create the output in ASCII format.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html#option_mysqldump_result-file&quot;&gt;
  &lt;p&gt;–result-file=file_name, -r file_name&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      Direct output to the named file. The result file is created and its previous contents overwritten, even if an error
      occurs while generating the dump.

      This option should be used on Windows to prevent newline “\n” characters from being converted to “\r\n” carriage
      return/newline sequences.
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;MySQL 5.7 &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/mysqldump.html#option_mysqldump_result-file&quot;&gt;Reference Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;restoring-a-database&quot;&gt;Restoring a database&lt;/h1&gt;

&lt;p&gt;Usually you will restore a database simply inserting the data with an input
file descriptor &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, but this won’t handle &lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt; encoding properly, so
this should be avoided:&lt;/p&gt;

&lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&gt;
mysql -u username -p database &amp;lt; dump_file
&lt;/div&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;mysql -uroot -p --default-character-set=utf8 database&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;mysql&amp;gt; &lt;/span&gt; &lt;kbd&gt;SET names 'utf8'&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;mysql&amp;gt; &lt;/span&gt; &lt;kbd&gt;SOURCE utf8.dump&lt;/kbd&gt;
...
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h1 id=&quot;related-definitions&quot;&gt;Related Definitions&lt;/h1&gt;

&lt;h2 id=&quot;character-set&quot;&gt;Character set&lt;/h2&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://dev.mysql.com/doc/refman/5.7/en/charset-general.html&quot;&gt;
  &lt;p&gt;A character set is a set of symbols and encodings. A collation is a set 
of rules for comparing characters in a character set. Let’s make the
distinction clear with an example of an imaginary character set.
Suppose that we have an alphabet with four letters: A, B, a, b. We give
each letter a number: A = 0, B = 1, a = 2, b = 3. The letter A is a 
symbol, the number 0 is the encoding for A, and the combination of all
four letters and their encodings is a character set.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;Character Sets and Collations in General &lt;cite title=&quot;MySQL Docs&quot;&gt;MySQL Docs&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;utf-8&quot;&gt;UTF-8&lt;/h2&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://dev.mysql.com/doc/refman/5.7/en/charset-unicode-utf8.html&quot;&gt;
  &lt;p&gt;UTF-8 (Unicode Transformation Format with 8-bit units) is an alternative 
way to store Unicode data. It is implemented according to RFC 3629, which
describes encoding sequences that take from one to four bytes.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;The utf8 Character Set (3-Byte UTF-8 Unicode Encoding) &lt;cite title=&quot;MySQL Docs&quot;&gt;MySQL Docs&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://makandracards.com/makandra/595-dumping-and-importing-from-to-mysql-in-an-utf-8-safe-way&quot;&gt;https://makandracards.com/makandra/595-dumping-and-importing-from-to-mysql-in-an-utf-8-safe-way&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Configuring the default database charset &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/charset-applications.html&quot;&gt;https://dev.mysql.com/doc/refman/5.7/en/charset-applications.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/how-to-dump-and-import-utf-8-mysql-databases-in-a-safe-way/</link>
        <guid isPermaLink="true">http://simpleit.rocks/how-to-dump-and-import-utf-8-mysql-databases-in-a-safe-way/</guid>
        
        
        <category>docs</category>
        
        <category>sql</category>
        
        <category>mysql</category>
        
      </item>
    
      <item>
        <title>Ionic 2 Framework Overview</title>
        <description>&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;p&gt;Ionic 2 framework has been &lt;strong&gt;designed to build cross-platform mobile apps&lt;/strong&gt; and
web apps in a way similar to building websites, i.e.: using HTML, CSS, and
JavaScript (&lt;a href=&quot;https://angular.io/&quot;&gt;Angular&lt;/a&gt;) languages.&lt;/p&gt;

&lt;p&gt;It is built on top of &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt;, a framework 
to build mobile apps with HTML, CSS &amp;amp; JS.&lt;/p&gt;

&lt;h1 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h1&gt;

&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;/h2&gt;

&lt;p&gt;To use Ionic 2 installing Cordova is required: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo npm install -g cordova&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then install Ionic: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ npm install -g ionic@beta&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start an &lt;a href=&quot;https://github.com/driftyco/ionic2-app-base&quot;&gt;Ionic project&lt;/a&gt;
with the ionic_&lt;a href=&quot;https://github.com/driftyco/ionic2-starter-tutorial&quot;&gt;tutorial template&lt;/a&gt;_:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ ionic start myProject tutorial --v2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, to run it, enter project directory and &lt;em&gt;run&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd myProject
$ ionic platform add android
$ ionic run android
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or serve it with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ionic serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;directory-structure&quot;&gt;Directory structure&lt;/h2&gt;

&lt;p&gt;The basic structure of the app contains the following directories and files:&lt;/p&gt;

&lt;pre&gt;
config.xml
ionic.config.json
package.json       __the npm packages that will be in node_modules dir__
resources/         __platform specific resources__
tsconfig.json
tslint.json
hooks/
node_modules/
platforms/         __platform specific files e.g. for android or ios __
plugins/           __where cordova plugins are stored when installed__
src/               __our app source code__
tsconfig.tmp.json
www/
&lt;/pre&gt;

&lt;p&gt;The generated website will be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt; directory with a 
structure similar to:&lt;/p&gt;

&lt;pre&gt;
www/
├── assets
│   ├── fonts
│   │   ├── ionicons.eot
│   │   ├── ionicons.svg
│   │   ├── ionicons.ttf
│   │   ├── ionicons.woff
│   │   └── ionicons.woff2
│   ├── icon
│   │   └── favicon.ico
│   └── manifest.json
├── build
│   ├── main.css
│   ├── main.js
│   ├── main.js.map
│   └── polyfills.js
└── index.html       &amp;lt;-- root component of the app
&lt;/pre&gt;

&lt;h1 id=&quot;app-organization&quot;&gt;App organization&lt;/h1&gt;

&lt;h2 id=&quot;pages&quot;&gt;Pages&lt;/h2&gt;

&lt;p&gt;Each page of the application can be generated with &lt;code class=&quot;highlighter-rouge&quot;&gt;ionic generate page mylist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And will contain &lt;a href=&quot;https://ionicframework.com/docs/v2/components/&quot;&gt;components&lt;/a&gt;
like &lt;code class=&quot;highlighter-rouge&quot;&gt;ionic-navbar&lt;/code&gt; that will help to quickly create app interfaces.&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ionicframework.com/docs/v2/&quot;&gt;http://ionicframework.com/docs/v2/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 30 Sep 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/ionic-2-framework-overview/</link>
        <guid isPermaLink="true">http://simpleit.rocks/ionic-2-framework-overview/</guid>
        
        
        <category>docs</category>
        
        <category>mobile</category>
        
        <category>ionic</category>
        
      </item>
    
      <item>
        <title>The Idiomatically Correct Way To Make An Instance Of A Many To One Relationship Model</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Having a many-to-one model relationship in Rails, an instance of such model
can be manually made inserting the other model foreign id, but that is not
the most natural way to express it in &lt;em&gt;Rails&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The most common way to write such relationship in &lt;em&gt;Rails&lt;/em&gt; is to &lt;strong&gt;create the
related model through its association&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;Having the following models&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
    User--has_many--&amp;gt;Article;
&lt;/div&gt;

&lt;p&gt;then each &lt;code class=&quot;highlighter-rouge&quot;&gt;Article&lt;/code&gt; would have an &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt; &lt;em&gt;foreign key&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;manually-assign-fk&quot;&gt;Manually assign FK&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;manually&lt;/em&gt; form for creating an &lt;code class=&quot;highlighter-rouge&quot;&gt;Article&lt;/code&gt; instance with an associated
&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt; would be to create an User and assign its &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; to the 
Article’s &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;content: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;user_id: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-through-association&quot;&gt;Create through association&lt;/h2&gt;

&lt;p&gt;Creating an article through the &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; instance would automagically set
&lt;code class=&quot;highlighter-rouge&quot;&gt;Article.user_id&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;content: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Foobar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/books/ruby-on-rails-tutorial/&quot;&gt;Ruby on rails tutorial Book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/association_basics.html&quot;&gt;Active Record Associations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 18 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/the-idiomatically-correct-way-to-make-an-instance-of-a-many-to-one-relationship-model/</link>
        <guid isPermaLink="true">http://simpleit.rocks/the-idiomatically-correct-way-to-make-an-instance-of-a-many-to-one-relationship-model/</guid>
        
        <category>rails</category>
        
        <category>models</category>
        
        <category>web-development</category>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Authorization Versus Authentication In Web Apps</title>
        <description>&lt;h2 id=&quot;authorization&quot;&gt;Authorization&lt;/h2&gt;

&lt;p&gt;Authorization lets us control what the users of our site can do.&lt;/p&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;What can they do?&lt;/p&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;Authentication allows us to identify the users of the site.&lt;/p&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;Who are them?&lt;/p&gt;

</description>
        <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/authorization-versus-authentication-in-web-apps/</link>
        <guid isPermaLink="true">http://simpleit.rocks/authorization-versus-authentication-in-web-apps/</guid>
        
        
        <category>docs</category>
        
        <category>theory</category>
        
        <category>web-development</category>
        
      </item>
    
  </channel>
</rss>
