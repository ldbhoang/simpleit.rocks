<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT 🤘 Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>http://simpleit.rocks/</link>
    <atom:link href="http://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 24 Jan 2017 18:09:39 +0000</pubDate>
    <lastBuildDate>Tue, 24 Jan 2017 18:09:39 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Avoid Using Flask Instance Folder When Deploying To Heroku</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Flask framework comes with an elegant solution to store credentials
and sensitive information, it is the usage of &lt;strong&gt;instance
folders&lt;/strong&gt;. Unfortunately this approach would have not sense if you
plan to deploy your &lt;em&gt;webapp&lt;/em&gt; to Heroku, &lt;strong&gt;flask’s instance folder is
not compatible with Heroku&lt;/strong&gt; because the nature of its filesystem,
that is, the way the files are organized on the disk.&lt;/p&gt;

&lt;h2 id=&quot;instance-folders-problem&quot;&gt;Instance folders problem&lt;/h2&gt;

&lt;p&gt;From Flask 0.8, &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/config/#instance-folders&quot;&gt;instance folders&lt;/a&gt; are the recommended way to store
sensitive information:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;designed to not be under version control and be deployment specific.&lt;/p&gt;

  &lt;p&gt;It’s the perfect place to drop things that either change at runtime or
configuration files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you deploy to Heroku, its &lt;em&gt;Dynos&lt;/em&gt; are cycled every 24 hours due
to its &lt;a href=&quot;https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem&quot;&gt;ephemereal system&lt;/a&gt;. As the project’s instance folder would
be out of version control, if you
can
&lt;a href=&quot;http://stackoverflow.com/q/27761986/1165509&quot;&gt;somehow copy it to Heroku&lt;/a&gt;,
it will disappear after some time.&lt;/p&gt;

&lt;blockquote class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;A dyno is a lightweight Linux container that runs a single
user-specified command. Each dyno gets its own ephemeral filesystem,
with a fresh copy of the most recently deployed code, any files
written will be discarded the moment the dyno is stopped or
restarted&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the only solution to set all the sensitive information in
production is to set each environment variable, one by one, without
the possibility to drop all your sensitive environment variables in a
&lt;em&gt;config&lt;/em&gt; file in the instance folder.&lt;/p&gt;

&lt;h2 id=&quot;alternative-use-a-local-env-file&quot;&gt;Alternative: use a local .env file&lt;/h2&gt;

&lt;p&gt;To view all of your Flask app’s config vars, you can use &lt;kbd&gt;heroku config&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; heroku config&lt;kbd&gt;&lt;/kbd&gt;
=== myapp-1234 Config Vars
APP_CONFIG_FILE:                /app/config.py
DATABASE_URL:                   postgres://asldfkjwg:2152134jsdfj23i5234j@ec2-194-32-16.compute-2.amazonaws.com:2232/aslkdgjsadj234
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Then you can create the same variables for your local environment with
&lt;kbd&gt;$ heroku config:get CONFIG-VAR-NAME -s  &amp;gt;&amp;gt; .env&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;After adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; to avoid committing your local
environment variables, you can customize them locally and add
&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; support to your flask apps in development and deployments with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;python-dotenv&lt;/code&gt;
package: &lt;a href=&quot;https://github.com/theskumar/python-dotenv&quot;&gt;https://github.com/theskumar/python-dotenv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This way we achieve a strict &lt;strong&gt;separation of config from code&lt;/strong&gt;, which
complies with twelve-factor’s third statement: 
&lt;a href=&quot;https://12factor.net/config&quot;&gt;Store config in the environment&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/config/#instance-folders&quot;&gt;http://flask.pocoo.org/docs/0.12/config/#instance-folders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/dynos&quot;&gt;https://devcenter.heroku.com/articles/dynos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://12factor.net/config&quot;&gt;https://12factor.net/config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/avoid-using-flask-instance-folder-when-deploying-to-heroku/</link>
        <guid isPermaLink="true">http://simpleit.rocks/avoid-using-flask-instance-folder-when-deploying-to-heroku/</guid>
        
        <category>heroku,</category>
        
        <category>deployment,</category>
        
        <category>web-development</category>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Organize A Flask Project To Handle Production And Development Environments Effectively</title>
        <description>&lt;p&gt;Separated configurations for Development and Production&lt;/p&gt;

&lt;p&gt;In most situations, applications would need different configurations
for each environment: Production, Staging, Development, etc.&lt;/p&gt;

&lt;h5 id=&quot;load-default-config-and-an-environment-specific&quot;&gt;Load default config and an environment specific&lt;/h5&gt;

&lt;p&gt;The easiest way to have multiple configurations is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use a default configuration that is always loaded and&lt;/li&gt;
  &lt;li&gt;the default configuration is under version control (e.g.: part of the &lt;em&gt;git&lt;/em&gt; project repo) and&lt;/li&gt;
  &lt;li&gt;Use an environment variable to switch between the configurations that overrides the values as needed in each environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Having a configuration that loads configuration values from the
specified &lt;em&gt;config&lt;/em&gt; environment &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourapplication.default_settings'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'YOURAPPLICATION_SETTINGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we create a separate config.py for each &lt;em&gt;env&lt;/em&gt; and export the
configuration path:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export
YOURAPPLICATION_SETTINGS=/path/to/config.py&lt;/kbd&gt;
&lt;/pre&gt;

&lt;p&gt;This way it will always load the default &lt;em&gt;configs&lt;/em&gt; and then our custom
variables from &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&quot;instance-paths&quot;&gt;Instance paths&lt;/h5&gt;

&lt;p&gt;From Flask 0.8, there is the concept of &lt;strong&gt;instance folders&lt;/strong&gt;. The
instance folder is a good fit for configuration files because it is
designed to &lt;strong&gt;not be under version control&lt;/strong&gt; and &lt;strong&gt;be deployment specific&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;To keep the &lt;em&gt;instance&lt;/em&gt; folder out of versioning in &lt;em&gt;Git&lt;/em&gt; add &lt;code class=&quot;highlighter-rouge&quot;&gt;instance/&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;/.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, Flask looks for a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; in the same
level of your main file or the package.&lt;/p&gt;

&lt;p&gt;Using this folder and having environment specific configuration files
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder we end up having the following directory structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
config/
  __init__.py
  default.py
  development.py
  production.py
instance/
  config.py
myapp/
  __init__.py
  myapp.py
  ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To have the configurations loaded we have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;load the default config in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/default.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;load configuration from instance folder  &lt;code class=&quot;highlighter-rouge&quot;&gt;instance/config.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Load the file specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_CONFIG_FILE&lt;/code&gt; environment
variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp/__init__.py&lt;/code&gt; we load them:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# myapp/__init__.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_relative_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pyfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.py'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'APP_CONFIG_FILE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then set the environment variable depending on the server we are
invoking the app:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export APP_CONFIG_FILE=/var/www/yourapp/config/production.py&lt;/kbd&gt;
&lt;/pre&gt;

&lt;p&gt;Now your folder structure should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myapp
├── config
│   ├── __init__.py     # empty
│   ├── development.py
│   ├── default.py
│   └── production.py
├── instance
│   └── config.py
└── myapp
   ├── __init__.py
   └── myapp.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Explore flask book &lt;a href=&quot;http://explore-flask.readthedocs.io/en/latest/configuration.html&quot;&gt;http://explore-flask.readthedocs.io/en/latest/configuration.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/41615662/1165509&quot;&gt;Non existing path when setting up Flask to have separated configurations for each environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/organize-a-flask-project-to-handle-production-and-development-environments-effectively/</link>
        <guid isPermaLink="true">http://simpleit.rocks/organize-a-flask-project-to-handle-production-and-development-environments-effectively/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Change All Files Permissions To 644 And Directories To 755 Commands</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are two common task in Linux environments when handling files
and folders permissions, you often will want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;give directories read and write privileges  &lt;strong&gt;(drwxr-xr-x)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;give files read privileges &lt;strong&gt;(-rw-r–r–)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be done safely with &lt;kbd&gt;find&lt;/kbd&gt; and &lt;kbd&gt;chmod&lt;/kbd&gt;
commands, taking some precautions.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;chmod --help&lt;/kbd&gt;
Usage: chmod [OPTION]... MODE[,MODE]... FILE...
  or:  chmod [OPTION]... OCTAL-MODE FILE...
  or:  chmod [OPTION]... --reference=RFILE FILE...
Change the mode of each FILE to MODE.
With --reference, change the mode of each FILE to that of RFILE.

  -c, --changes          like verbose but report only when a change is made
  -f, --silent, --quiet  suppress most error messages
  -v, --verbose          output a diagnostic for every file processed
      --no-preserve-root  do not treat '/' specially (the default)
      --preserve-root    fail to operate recursively on '/'
      --reference=RFILE  use RFILE's mode instead of MODE values
  -R, --recursive        change files and directories recursively
      --help     display this help and exit
      --version  output version information and exit

Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;change-directory-permissions&quot;&gt;Change directory permissions&lt;/h2&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type d -exec chmod 755 {} +&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;change-files-permissions&quot;&gt;Change files permissions&lt;/h2&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type f -exec chmod 644 {} +&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;run-chmod-efficiently&quot;&gt;Run chmod efficiently&lt;/h2&gt;

&lt;p&gt;To avoid spawning one chmod process per file, we can pipe find output
to &lt;kbd&gt;xargs&lt;/kbd&gt;. This can be helpful if there are many files to
process.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type d -print0 | xargs -0 chmod 755&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type f -print0 | xargs -0 chmod 644&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;-print0
     True;  print the full file name on the standard output, followed
     by a null character (instead of the newline character that -print
     uses). This allows file names that contain newlines or other
     types of white space to be correctly interpreted by programs that
     process the find output. This option corresponds to the -0 option
     of xargs.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find manual page&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;xargs --help&lt;/kbd&gt;
Usage: xargs [OPTION]... COMMAND [INITIAL-ARGS]...
Run COMMAND with arguments INITIAL-ARGS and more arguments read from input.

Mandatory and optional arguments to long options are also
mandatory or optional for the corresponding short option.
  -0, --null                   items are separated by a null, not whitespace;
                                 disables quote and backslash processing and
                                 logical EOF processing
..(truncated)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Superuser answer to &lt;a href=&quot;http://superuser.com/a/91938/158197&quot;&gt;How to chmod all directories except files (recursively)?&lt;/a&gt; by &lt;a href=&quot;http://superuser.com/users/263/nik&quot;&gt;nik&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;StackOverflow: &lt;a href=&quot;http://stackoverflow.com/q/6085156/1165509&quot;&gt;Using semicolon (;) vs plus (+) with exec in find&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/change-all-files-permissions-to-644-and-directories-to-755-commands/</link>
        <guid isPermaLink="true">http://simpleit.rocks/change-all-files-permissions-to-644-and-directories-to-755-commands/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Securing The Images Folder In Joomla</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The images folder is one the most vulnerable Joomla folders, because it allows
users to upload files to your website. That could lead to serious
security problems. The file types allowed to upload should be
restricted to its minimum.&lt;/p&gt;

&lt;p&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; to use several strategies to address this
problem.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; are simply distributed configuration files, they “provide
a way to make configuration changes on a per-directory basis”.&lt;/p&gt;

&lt;p&gt;In the images folder we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable script execution&lt;/li&gt;
  &lt;li&gt;Select which files you can upload to it&lt;/li&gt;
  &lt;li&gt;Select which files you can NOT upload to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategies&quot;&gt;Strategies&lt;/h2&gt;

&lt;h3 id=&quot;disable-script-execution-in-images-folder&quot;&gt;Disable script execution in images folder&lt;/h3&gt;

&lt;p&gt;By default Joomla images directory is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/images&lt;/code&gt; folder,
in this directory we add &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AddHandler cgi-script .php .pl .py .jsp .asp .htm .shtml .sh .cgi
Options -ExecCGI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We used
the Apache &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;Options Directive&lt;/a&gt; and &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler&quot;&gt;AddHandler Directive&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;First we tell Apache to treat the files ending with the above
extensions as &lt;abbr title=&quot;Common Gateway Interface&quot;&gt;CGI&lt;/abbr&gt; scripts, i.e.: be served by &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_cgi.html&quot;&gt;mod_cgi&lt;/a&gt; handler, then we prevent the execution of those &lt;abbr title=&quot;Common Gateway Interface&quot;&gt;CGI&lt;/abbr&gt;
scripts.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;
  &lt;p&gt;The Options directive controls which server features are available
in a particular directory.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Options Directive in &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;Apache Core Features Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;htaccess-whitelist&quot;&gt;.htaccess whitelist&lt;/h3&gt;

&lt;p&gt;We can specify which file types we allow users to upload to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;.+\.(gif|jpe?g|png|pdf)$&quot;&amp;gt;
Allow from all
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That will allow the above filenames extensions and &lt;strong&gt;block&lt;/strong&gt; every
other extension from getting into the folder.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;
  &lt;p&gt;The &lt;FilesMatch&gt; directive limits the scope of the enclosed
directives by filename, just as the &lt;Files&gt; directive does. However,
it accepts a regular expression&lt;/Files&gt;&lt;/FilesMatch&gt;&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;FilesMatch&gt; Directive in &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;Apache docs&lt;/a&gt;&amp;lt;/cite&amp;gt;&amp;lt;/footer&amp;gt;
&lt;/FilesMatch&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;htaccess-blacklist&quot;&gt;.htaccess blacklist&lt;/h3&gt;

&lt;p&gt;Instead of specifying which files we allow to upload, here we tell
Apache to deny the upload of files with these extensions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;\.(asp|sh|php|php5|pl)$&quot;&amp;gt;
Deny from all
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I found a good strategy to always &lt;strong&gt;disable script execution&lt;/strong&gt; and
then also select from one of the other two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; &lt;strong&gt;whitelist&lt;/strong&gt; or
&lt;strong&gt;blacklist&lt;/strong&gt;, so if the attacker even handle to upload the file it won’t
get their scripts executed.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Apache docs &lt;a href=&quot;http://httpd.apache.org/docs/current&quot;&gt;http://httpd.apache.org/docs/current&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache HTTP Server Tutorial: .htaccess files &lt;a href=&quot;http://httpd.apache.org/docs/current/howto/htaccess.html&quot;&gt;http://httpd.apache.org/docs/current/howto/htaccess.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache FilesMatch Directive &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Security Checklist/You have been hacked or defaced &lt;a href=&quot;https://docs.joomla.org/Security_Checklist/You_have_been_hacked_or_defaced&quot;&gt;https://docs.joomla.org/Security_Checklist/You_have_been_hacked_or_defaced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/securing-the-images-folder-in-joomla/</link>
        <guid isPermaLink="true">http://simpleit.rocks/securing-the-images-folder-in-joomla/</guid>
        
        <category>joomla,</category>
        
        <category>images,</category>
        
        <category>htaccess</category>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>Setting Up A Fresh Linux Server</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a checklist to have in mind all the tasks I find useful to
make after installing Linux in a computer.&lt;/p&gt;

&lt;p&gt;What steps to take after installing a fresh Linux server, mainly
oriented to a developer user.&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;Checklist&lt;/h2&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/showing-untracked-files-in-status-after-creating-new-directories-in-git/&quot;&gt;Show untracked files In Git Status After Creating New Directories In Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/&quot;&gt;Ignore emacs and vim backup files in git with gitignore globally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/setting-up-a-fresh-linux-server/</link>
        <guid isPermaLink="true">http://simpleit.rocks/setting-up-a-fresh-linux-server/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Make Git Ignore Temporary Files Produced By Emacs And Vim In All Directories Globally</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Using VIm and &lt;a href=&quot;/docs/lisp/emacs/&quot;&gt;Emacs&lt;/a&gt; on a daily basis is very common for programmers.&lt;/p&gt;

&lt;p&gt;They have recovering systems to avoid losing work if a computer
crashes, that would make your directories full of strange files ending
in &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;, swap files (&lt;code class=&quot;highlighter-rouge&quot;&gt;.swp&lt;/code&gt;) or backup files named like &lt;code class=&quot;highlighter-rouge&quot;&gt;#&amp;lt;filename&amp;gt;#&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Those files would appear from time to time in your &lt;kbd&gt;git
status&lt;/kbd&gt; listings that wouldn’t add any valuable information.&lt;/p&gt;

&lt;p&gt;Better than disabling them, is to avoid seeing them globally, so any new
&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; repository won’t show them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; of changed file list
but you will still be able to recover them if anything bad happens
while editing.&lt;/p&gt;

&lt;h2 id=&quot;enabling-gitignore-globally&quot;&gt;Enabling gitignore globally&lt;/h2&gt;

&lt;p&gt;We will set up a global &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore_global&lt;/code&gt; file, i.e.: a list of rules for
ignoring files in every &lt;em&gt;Git&lt;/em&gt; repository on the computer.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git config --global core.excludesfile ~/.gitignore_global&lt;/kbd&gt;

&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;This command will automatically set the following configuration in
your &lt;a href=&quot;https://git-scm.com/docs/git-config#git-config-gitconfig&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig_global&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[core]
        excludesfile = /home/user/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://git-scm.com/docs/gitignore&quot;&gt;
  &lt;p&gt;Patterns which a user wants Git to ignore in all situations (e.g.,
backup or temporary files generated by the user’s editor of choice)
generally go into a file specified by core.excludesFile in the user’s
~/.gitconfig. Its default value is $XDG_CONFIG_HOME/git/ignore. If
$XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore
is used instead.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;gitignore in &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;git documentation&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;gitignore&lt;/h2&gt;

&lt;p&gt;Github has a great project with useful &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; files
optimized for a Operating System and editor specific.&lt;/p&gt;

&lt;p&gt;We grab the ones for Emacs and Vim (I don’t think you ever need any
other editor ;)&lt;/p&gt;

&lt;p&gt;You should put them together in a single &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitignore_global&lt;/code&gt; file
that will be processed globally.&lt;/p&gt;

&lt;h3 id=&quot;gitignore-for-emacs&quot;&gt;gitignore for Emacs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/Emacs.gitignore&quot;&gt;Gitignore for Emacs&lt;/a&gt; editor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- mode: gitignore; -*-
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Org-mode
.org-id-locations
*_archive

# flymake-mode
*_flymake.*

# eshell files
/eshell/history
/eshell/lastdir

# elpa packages
/elpa/

# reftex files
*.rel

# AUCTeX auto folder
/auto/

# cask packages
.cask/
dist/

# Flycheck
flycheck_*.el

# server auth directory
/server/

# projectiles files
.projectile

# directory configuration
.dir-locals.el
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gitignore-for-vim&quot;&gt;gitignore for Vim&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/Vim.gitignore&quot;&gt;Gitignore for Vim&lt;/a&gt; editor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# swap
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-v][a-z]
[._]sw[a-p]
# session
Session.vim
# temporary
.netrwhist
*~
# auto-generated tag files
tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;other-global-gitignore-properties&quot;&gt;Other global gitignore properties&lt;/h2&gt;

&lt;p&gt;Other common .gitignore configurations are also available in
 Github’s &lt;a href=&quot;https://gist.github.com/octocat/9257657&quot;&gt;gist&lt;/a&gt; that may
 worth adding them to the global gitignore file:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it&amp;#39;s better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/octocat/9257657.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now every time you work in a new or old project you won’t have to deal
with any backup files automatically generated by Vim or Emacs.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Emacs 18.6.3 Recovering Data from Auto-Saves &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html&quot;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vim documentation: recover &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/recover.html&quot;&gt;http://vimdoc.sourceforge.net/htmldoc/recover.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Github gitignore project &lt;a href=&quot;https://github.com/github/gitignore/tree/master/Global&quot;&gt;https://github.com/github/gitignore/tree/master/Global&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gitignore file in git documentation &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;https://git-scm.com/docs/gitignore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/</link>
        <guid isPermaLink="true">http://simpleit.rocks/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/</guid>
        
        
        <category>docs</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Joomla Security Tips Checklist</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Tips to prevent your Joomla website from being hacked.&lt;/p&gt;

&lt;h2 id=&quot;security-checklist&quot;&gt;Security Checklist&lt;/h2&gt;

&lt;h2 id=&quot;upgrade-joomla&quot;&gt;Upgrade Joomla&lt;/h2&gt;

&lt;p&gt;Each new Joomla update come with several security patches, not
updating means getting into troubles sooner or later, as new
vulnerabilities are discovered from time to time.&lt;/p&gt;

&lt;h3 id=&quot;avoid-old-extensions&quot;&gt;Avoid old extensions&lt;/h3&gt;

&lt;p&gt;You should always keep your extensions updated, if you are using an
old extension without support, find an alternative or deactivate it.&lt;/p&gt;

&lt;h3 id=&quot;adjust-files-and-directories-permissions&quot;&gt;Adjust files and directories permissions&lt;/h3&gt;

&lt;h4 id=&quot;htaccess&quot;&gt;htaccess&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;configuration.php&lt;/code&gt; shouldn’t have write permissions,
that would leave your them vulnerable to attacks.&lt;/p&gt;

&lt;h4 id=&quot;php-files&quot;&gt;PHP files&lt;/h4&gt;

&lt;p&gt;All the PHP files shouldn’t have write permissions.&lt;/p&gt;

&lt;h3 id=&quot;fix-images-folder-allowed-files&quot;&gt;Fix images folder allowed files&lt;/h3&gt;

&lt;p&gt;The images folder should only contains &lt;strong&gt;images&lt;/strong&gt;, it should &lt;a href=&quot;/securing-the-images-folder-in-joomla/&quot;&gt;block
users from trying to upload every other type of file&lt;/a&gt;,
specially &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;popular-extensions&quot;&gt;Popular extensions&lt;/h3&gt;

&lt;p&gt;Not try new extensions until they are well tested or popular in the
Joomla community.&lt;/p&gt;

&lt;h3 id=&quot;administrator-are-with-http-basic-auth&quot;&gt;Administrator are with HTTP basic auth&lt;/h3&gt;

&lt;p&gt;Protect the Administrator area, usually the &lt;code class=&quot;highlighter-rouge&quot;&gt;/administrator&lt;/code&gt; path,
with
&lt;a href=&quot;/protect-web-directories-with-http-basic-authentication-in-apache-server/&quot;&gt;HTTP Basic Authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful to
  prevent
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Dictionary_attack&quot;&gt;dictionary attacks&lt;/a&gt; in
  the Joomla Administrator area.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/joomla-security-tips-checklist/</link>
        <guid isPermaLink="true">http://simpleit.rocks/joomla-security-tips-checklist/</guid>
        
        <category>joomla</category>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>Protect Web Directories With Http Basic Authentication In Apache Server</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;HTTP Basic Auth is very common in the web, although it is not the most
secure one.&lt;/p&gt;

&lt;p&gt;It’s simplicity makes it a simple choice to add a layer of security to
web directory quickly, not needing &lt;em&gt;sessions&lt;/em&gt; nor &lt;em&gt;cookies&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;HTTP Basic authentication needs that a client provides a username
and password when making a request.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;
  &lt;p&gt;The “Basic” Hypertext Transfer Protocol (HTTP)
authentication scheme, transmits credentials as user-id/password
pairs, encoded using Base64&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; The 'Basic' HTTP Authentication Scheme in &lt;cite&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;RFC 7617&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;steps-to-secure-a-directory&quot;&gt;Steps to secure a directory&lt;/h2&gt;

&lt;p&gt;To use HTTP Basic Authentication on a server, you need to create two files&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt;: specifies which directory to protect&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htpasswd&lt;/code&gt;: passwords file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The each time you access the directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; it asks for
&lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt; validating it against &lt;code class=&quot;highlighter-rouge&quot;&gt;.htpasswd&lt;/code&gt;
credentials.&lt;/p&gt;

&lt;p&gt;We will end up having this directories structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home
	/secure
		/apasswords
...
/var
	/www
		/myprotected
			.htaccess
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-apache-htaccess&quot;&gt;Create Apache .htaccess&lt;/h3&gt;

&lt;p&gt;Add an &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file inside each directory that will be protected
with the following content, in this case in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/myprotected/.htaccess&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AuthType Basic
AuthName &quot;Restricted Access&quot;
AuthUserFile /home/secure/apasswords
Require valid-user
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;passwords-file&quot;&gt;Passwords file&lt;/h3&gt;

&lt;p&gt;We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; command to manage user files for basic
authentication.&lt;/p&gt;

&lt;p&gt;Command overview:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd --help&lt;/kbd&gt;
Usage:
	htpasswd [-cimBdpsDv] [-C cost] passwordfile username
	htpasswd -b[cmBdpsDv] [-C cost] passwordfile username password

	htpasswd -n[imBdps] [-C cost] username
	htpasswd -nb[mBdps] [-C cost] username password
 -c  Create a new file.
 -n  Don't update file; display results on stdout.
 -b  Use the password from the command line rather than prompting for it.
 -i  Read password from stdin without verification (for script usage).
 -m  Force MD5 encryption of the password (default).
 -B  Force bcrypt encryption of the password (very secure).
 -C  Set the computing time used for the bcrypt algorithm
     (higher is more secure but slower, default: 5, valid: 4 to 31).
 -d  Force CRYPT encryption of the password (8 chars max, insecure).
 -s  Force SHA encryption of the password (insecure).
 -p  Do not encrypt the password (plaintext, insecure).
 -D  Delete the specified user.
 -v  Verify password for the specified user.
On other systems than Windows and NetWare the '-p' flag will probably not work.
The SHA algorithm does not use a salt and is less secure than the MD5 algorithm.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;create-passwords-file&quot;&gt;Create passwords file&lt;/h4&gt;

&lt;p&gt;Create a directory &lt;strong&gt;outside apache document root&lt;/strong&gt;, only Apache should
access the password file.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd -c&lt;/code&gt; creates the &lt;em&gt;passwdfile&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;mkdir -p /home/secure/&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;chmod 0660 /home/secure/apasswords&lt;/kbd&gt;
&lt;span class=&quot;shell-comment&quot;&gt;# Create password file with user foobar&lt;/span&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd -c /home/secure/apasswords foobar&lt;/kbd&gt;
New password:
Re-type new password:
Adding password for user foobar
&lt;span class=&quot;shell-comment&quot;&gt;# In this case the server user and group is www-data&lt;/span&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;chown www-data:www-data /home/secure/apasswords&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;/home/secure/apasswords must be only readable by Apache web server&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir -p&lt;/code&gt; creates all the folder structure specified in the
parameters&lt;/p&gt;

&lt;h4 id=&quot;htpasswd-commands&quot;&gt;htpasswd commands&lt;/h4&gt;

&lt;h5 id=&quot;to-add-more-users&quot;&gt;To add more users&lt;/h5&gt;

&lt;p&gt;To change or add more users of the file, the same command can be used
without the &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; option, to add the user &lt;code class=&quot;highlighter-rouge&quot;&gt;john&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd .htpasswd john&lt;/kbd&gt;
New password:
Re-type new password:
Adding password for user foobar
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;changing-existing-users-passwords&quot;&gt;Changing existing users passwords&lt;/h4&gt;

&lt;p&gt;We execute the same command with the user that we want to change:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd .htpasswd john &lt;/kbd&gt;
New password:
Re-type new password:
Updating password for user foobar
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;risks&quot;&gt;Risks&lt;/h2&gt;

&lt;p&gt;The HTTP Basic authentication has several issues that makes it
insecure in some scenarios, the standard itself states:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;
  &lt;p&gt;This scheme is not considered to be a secure method of user
authentication unless used in conjunction with some external secure
system such as TLS (Transport Layer Security, [RFC5246]), as the
user-id and password are passed over the network as cleartext.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; The 'Basic' HTTP Authentication Scheme in &lt;cite&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;RFC 7617&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;HTTP Basic auth issue&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Insecurity issue&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Password is sent in base64 encoding&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Password can be converted to plaintext &lt;em&gt;(solved by using [Secure Sockets Layer])&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Password is sent for each request&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Larger attack window&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The password is cached by the webbrowser&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Can be reused by any other request to the server, e.g. &lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&quot;&gt;CSRF&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The password may be stored permanently in the browser&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&quot;&gt;CSRF&lt;/a&gt; and it might be stolen by another user on a shared machine&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We have protected a directory with HTTP Basic Authentication, now
every time we attempt to access that directory, tipically from a
browser, it will ask for username/password credentials.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RFC 7617 ‘Basic’ HTTP Authentication Scheme &lt;a href=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;https://tools.ietf.org/html/rfc7617&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Information Security Answer: &lt;a href=&quot;http://security.stackexchange.com/a/990/66281&quot;&gt;Is BASIC-Auth secure if done over HTTPS?&lt;/a&gt; by &lt;a href=&quot;http://security.stackexchange.com/users/33/avid&quot;&gt;AviD♦&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_access_authentication&quot;&gt;https://en.wikipedia.org/wiki/Basic_access_authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/protect-web-directories-with-http-basic-authentication-in-apache-server/</link>
        <guid isPermaLink="true">http://simpleit.rocks/protect-web-directories-with-http-basic-authentication-in-apache-server/</guid>
        
        
        <category>docs</category>
        
        <category>web</category>
        
        <category>servers</category>
        
        <category>apache</category>
        
      </item>
    
      <item>
        <title>Understanding How Python Packages Modules And Imports Work</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Learning about Python’s package system is fundamental for a better
understanding of how Python works and design better software.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Package support was supported first by a standard Python library
module in version 1.3 with the module &lt;abbr title=&quot;New Imports&quot;&gt;ni&lt;/abbr&gt; and later, in Pyhon 1.5, was
incoporated in the interpreter.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;module is a file&lt;/strong&gt; containing Python &lt;em&gt;definitions&lt;/em&gt; and
&lt;em&gt;statements&lt;/em&gt;. Its main goals are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;organize code&lt;/li&gt;
  &lt;li&gt;preventing naming conflicts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Defining a module also defines its &lt;strong&gt;namespace&lt;/strong&gt;, i.e. “the place where a
variable is stored”.&lt;/p&gt;

&lt;p&gt;Code from other modules can be used by the process of &lt;strong&gt;importing&lt;/strong&gt; it
in the current module. The most popular way of importing other modules
functionality is using the &lt;a href=&quot;https://docs.python.org/3/reference/simple_stmts.html#import&quot;&gt;import statement&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; and passing the
&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-qualified-name&quot;&gt;fully qualified name&lt;/a&gt; of the module.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://docs.python.org/3/glossary.html#term-qualified-name&quot;&gt;
  &lt;p&gt;Fully qualified name&lt;/p&gt;

  &lt;p&gt;A dotted name showing the “path” from a module’s global scope to a
  class, function or method defined in that module, as defined in PEP
  3155.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Python documentation &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-qualified-name&quot;&gt;qualified name&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;Package &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; is a method to structure Python’s module namespace by
using “dotted module names”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;import math&lt;/code&gt; makes it possible to use &lt;code class=&quot;highlighter-rouge&quot;&gt;math&lt;/code&gt; functions
in the module that imported it like &lt;code class=&quot;highlighter-rouge&quot;&gt;math.pi&lt;/code&gt; to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;pi&lt;/code&gt;
function.&lt;/p&gt;

&lt;h3 id=&quot;module-search-path&quot;&gt;Module Search Path&lt;/h3&gt;

&lt;p&gt;How does the &lt;em&gt;import statement&lt;/em&gt; knows where the &lt;code class=&quot;highlighter-rouge&quot;&gt;math&lt;/code&gt; module is
located?&lt;/p&gt;

&lt;p&gt;The interpreter looks sequentially in specific locations until it finds
it&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Was the file passed to the interpreter?
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Yes&lt;/strong&gt; - It looks in the directory containing the input script.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt; - It looks in the current directory.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;a list of directory names specified in the &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH&quot;&gt;PYTHONPATH&lt;/a&gt; environment
variable
    &lt;ul&gt;
      &lt;li&gt;&lt;small&gt; &lt;em&gt;PYTHONPATH&lt;/em&gt; augments the default search path for module files, its
format is the same as the shell’s PATH &lt;/small&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$PYTHONPATH&lt;/code&gt; is typically empty and can be found with &lt;kbd&gt;echo $PYTHONPATH&lt;/kbd&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The installation-dependent default.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;The actual list of folders python searches for libraries can be
found with&lt;/p&gt;

        &lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;python3.5&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;import sys&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;print(sys.path)&lt;/kbd&gt;
['', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-x86_64-linux-gnu', '/usr/lib/python3.5/lib-dynload', '/usr/local/lib/python3.5/dist-packages', '/usr/lib/python3/dist-packages']
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.path&quot;&gt;sys.path&lt;/a&gt; is a
list of strings that specifies the search path for
modules. Initialized from the environment variable PYTHONPATH, plus an
installation-dependent default. It can be modified using standard list
operations, adding more directories to the discover modules &lt;em&gt;paths&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.path.insert(0, '/path/to/package')&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;Packages are basically collection of modules.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://docs.python.org/3/tutorial/modules.html#packages&quot;&gt;
  &lt;p&gt;Packages are a way of structuring Python’s module namespace by using
“dotted module names”&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Python packages in &lt;a href=&quot;https://docs.python.org/3/tutorial/modules.html#packages&quot;&gt;official
tutorial&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Besides one can just add a subdirectory to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.path&lt;/code&gt; list, &lt;strong&gt;packages
are an elegant solution to keep related modules together&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For example, the module name &lt;code class=&quot;highlighter-rouge&quot;&gt;my-package.my-module&lt;/code&gt; designates a sub module named &lt;strong&gt;my-module&lt;/strong&gt; in a
package named &lt;strong&gt;my-package&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A simple package with a &lt;em&gt;module&lt;/em&gt; and two &lt;em&gt;sub packages&lt;/em&gt; may look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-package/                 Top-level package
      __init__.py           Initialize package
      my-module.py
      my-subpackage/        Subpackage 
              __init__.py
              ...
      my-other-subpackage/  Subpackage
              __init__.py
              ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file in each directory has two main functions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Marking packages&lt;/strong&gt;: It marks a directory as a Python package (or
sub package), which makes its files ending in &lt;code class=&quot;highlighter-rouge&quot;&gt;.py&lt;/code&gt; considered
Python modules.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Initialize code&lt;/strong&gt;: Code inside &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; is executed when the
package is imported, but it can be empty also.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;Python 3.3+ has [Implicit Namespace Packages] allowing to create
packages without &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; files.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Built-in Package Support in Python
1.5 &lt;a href=&quot;http://legacy.python.org/doc/essays/packages.html&quot;&gt;http://legacy.python.org/doc/essays/packages.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Python Language Reference » The import system &lt;a href=&quot;https://docs.python.org/3/reference/import.html&quot;&gt;https://docs.python.org/3/reference/import.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://askubuntu.com/a/385030/43253&quot;&gt;What does my PYTHONPATH contain?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/modules.html#the-module-search-path&quot;&gt;https://docs.python.org/3/tutorial/modules.html#the-module-search-path&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 02 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/understanding-how-python-packages-modules-and-imports-work/</link>
        <guid isPermaLink="true">http://simpleit.rocks/understanding-how-python-packages-modules-and-imports-work/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>language</category>
        
        <category>concepts</category>
        
      </item>
    
      <item>
        <title>An Overview Of Flask Main Concepts And How It Works</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Flask is one of the Python’s most popular web frameworks. This is an
overview of its main concepts to get started quickly and understand
how it works.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://flask.pocoo.org/&quot;&gt;
  &lt;p&gt;Flask is a microframework for Python based on Werkzeug, Jinja 2 and
good intentions.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Slogan at &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask homepage&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;flask-script&quot;&gt;Flask script&lt;/h2&gt;

&lt;p&gt;Flask, like most modern frameworks, has its own command &lt;code class=&quot;highlighter-rouge&quot;&gt;flask&lt;/code&gt; to
perform tasks.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask --help&lt;/kbd&gt;
Usage: flask [OPTIONS] COMMAND [ARGS]...

  This shell command acts as general utility script for Flask applications.

  It loads the application configured (through the FLASK_APP environment
  variable) and then provides commands either provided by the application or
  Flask itself.

  The most useful commands are the &quot;run&quot; and &quot;shell&quot; command.

  Example usage:

    $ export FLASK_APP=hello.py
    $ export FLASK_DEBUG=1
    $ flask run

Options:
  --version  Show the flask version
  --help     Show this message and exit.

Commands:
  run    Runs a development server.
  shell  Runs a shell in the app context.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Every Flask application you create is an instance of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;flask.Flask&lt;/code&gt; class. The flask object implements a [&lt;abbr title=&quot;Web Server Gateway Interface&quot;&gt;WSGI&lt;/abbr&gt;] application
and acts as the central object.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;flask.Flask&lt;/code&gt; class is responsible for handling all the
&lt;strong&gt;view functions&lt;/strong&gt;, &lt;strong&gt;URLs routing&lt;/strong&gt; and &lt;strong&gt;templates setup&lt;/strong&gt;, so in a
simple app, you will end up having a single file.&lt;/p&gt;

&lt;p&gt;To create a Flask app, we instantiate &lt;code class=&quot;highlighter-rouge&quot;&gt;flask.Flask&lt;/code&gt; in our main module
or in the &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; file of the package like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first parameter tells Flask what belongs to this app, if you are
using a single module, then &lt;code class=&quot;highlighter-rouge&quot;&gt;__name__&lt;/code&gt; is enough, but if not then you
should specify the name of the package or module you are using to help
Flask to find resources, improve debugging information, etc.&lt;/p&gt;

&lt;p&gt;This is what a typical Flask app skeleton looks like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create application&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Load default config and override config from an environment variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# db management&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# routes and views&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show_a_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'show_me.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# local server running&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flask.Flask.config&lt;/code&gt; or likely &lt;code class=&quot;highlighter-rouge&quot;&gt;app.config&lt;/code&gt; contains the configuration
dictionary, it is an instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;config.Config&lt;/code&gt;
from
&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mapping-types-dict&quot;&gt;dict&lt;/a&gt; behaving
like a
common
&lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#dictionaries&quot;&gt;Python dictionary&lt;/a&gt; but
supports additional methods to load a configurations from special dictionaries
and files.&lt;/p&gt;

&lt;p class=&quot;alert alert-success&quot;&gt;See also: &lt;a href=&quot;/organize-a-flask-project-to-handle-production-and-development-environments-effectively/&quot;&gt;How to configure Flask to have different configuration files in production and development environments&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;populating-the-configuration&quot;&gt;Populating the Configuration&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;config.Config&lt;/code&gt; allows us to populate the configuration dictionary
in several ways.&lt;/p&gt;

&lt;p&gt;A common pattern for simple apps that don’t need to have
configurations for multiple environments is to load the configuration
from the &lt;code class=&quot;highlighter-rouge&quot;&gt;yourapplication.default_settings&lt;/code&gt; module and then override
the values with the contents of the file the
&lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt; environment variable points to:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourapplication.default_settings'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'YOURAPPLICATION_SETTINGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And then setup the environment variable with &lt;kbd&gt;$ export
YOURAPPLICATION_SETTINGS=/path/to/settings.cfg&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;The available methods include:&lt;/p&gt;

&lt;h4 id=&quot;dict-keys&quot;&gt;dict keys&lt;/h4&gt;

&lt;p&gt;Defining or updating new configurations like a normal dicttionary&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SQLALCHEMY_TRACK_MODIFICATIONS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# many keys at once&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'...'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;files&quot;&gt;Files&lt;/h4&gt;

&lt;p&gt;Configuration can be stored in Python files with values in
&lt;em&gt;uppercase&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DEBUG = False
SECRET_KEY = '?\xbf,\xb4\x8d\xa3&quot;&amp;lt;\x9c\xb0@\x0f5\xab,w\xee\x8d$0\x13\x8b83'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;python-files&quot;&gt;Python files&lt;/h4&gt;

&lt;p&gt;Creating a configuration in a Python file and loading it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pyfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourconfig.cfg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;load configuration from an environment variable pointing to a file&lt;/p&gt;

    &lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export YOURAPPLICATION_SETTINGS='/path/to/config/file'&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

    &lt;p&gt;Then in your code, load it using &lt;code class=&quot;highlighter-rouge&quot;&gt;config.Config.from_envvar&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'YOURAPPLICATION_SETTINGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p class=&quot;alert alert-info&quot;&gt;This is the same of doing
&lt;code class=&quot;highlighter-rouge&quot;&gt;app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])&lt;/code&gt;
with a nicer error message&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;objects&quot;&gt;Objects&lt;/h4&gt;

&lt;p&gt;Define configuration variables and add them with the &lt;code class=&quot;highlighter-rouge&quot;&gt;from_object&lt;/code&gt;
  method, updating the vales of each variable:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'development key'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;others&quot;&gt;Others&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;From a &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; file with &lt;code class=&quot;highlighter-rouge&quot;&gt;config.Config.from_json&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;from mappings: &lt;code class=&quot;highlighter-rouge&quot;&gt;config.Config.from_mapping&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;development-server&quot;&gt;Development server&lt;/h2&gt;

&lt;p&gt;Flask comes with a development server to debug and test your app
locally, it shouldn’t be used in a production environment mainly because two reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it doesn’t scale well and&lt;/li&gt;
  &lt;li&gt;serves only one request at a time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;kbd&gt;flask run&lt;/kbd&gt; command will end up calling
&lt;code class=&quot;highlighter-rouge&quot;&gt;flask.Flask.run()&lt;/code&gt;, this will always start a local [&lt;abbr title=&quot;Web Server Gateway Interface&quot;&gt;WSGI&lt;/abbr&gt;], so you
need to make sure it is located in the block executed when running
python scripts like &lt;code class=&quot;highlighter-rouge&quot;&gt;if __name__ == '__main__': &lt;/code&gt;, to avoid executing
it when serving your app in another web server.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;flask&lt;/code&gt; command depends on the &lt;code class=&quot;highlighter-rouge&quot;&gt;FLASK_APP&lt;/code&gt; environment
variable to know which app to work on, we start specifying this with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; command, then if we run the flask development server it
knows which file to refer to:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export FLASK_APP=hello.py&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask run&lt;/kbd&gt;
 * Running on http://127.0.0.1:5000/
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;reload-server-when-code-changes&quot;&gt;Reload server when code changes&lt;/h3&gt;

&lt;p&gt;There is a special debug mode handled by the &lt;code class=&quot;highlighter-rouge&quot;&gt;FLASK_DEBUG&lt;/code&gt; environment
variable that allows to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reload the server automatically each time the code changes&lt;/li&gt;
  &lt;li&gt;output debugging information on errors&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export FLASK_DEBUG=1&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask run&lt;/kbd&gt;
 * Forcing debug mode on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 292-824-230
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Routing is done binding functions with URLs, using the &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&quot;&gt;route()&lt;/a&gt;
decorator.&lt;/p&gt;

&lt;p&gt;For example, the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;/hello-world&lt;/code&gt; would run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/hello-world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dynamic-urls&quot;&gt;Dynamic URLs&lt;/h3&gt;

&lt;p&gt;Flask URLs can also handle variables specifying them like
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;variable_name&amp;gt;&lt;/code&gt; or more precisely using &lt;em&gt;converters&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;converter:variable_name&amp;gt;&lt;/code&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;'/post/&amp;lt;int:post_id&amp;gt;'&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.route('/user/&amp;lt;username&amp;gt;')
def show_user_profile(username):
    # show the user profile for that user
    return 'User %s' % username
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reverse-urls&quot;&gt;Reverse URLs&lt;/h3&gt;

&lt;p&gt;Generating URLs knowing the function name is also possible
with &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.url_for&quot;&gt;url_for&lt;/a&gt;
like:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;python&lt;/kbd&gt;
Python 3.5.2+ (default, Sep 22 2016, 12:18:14) 
[GCC 6.2.0 20160927] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;from flask import Flask, url_for&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;app = Flask(__name__)&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;@app.route('/login')&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;def login(): pass&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;with app.test_request_context():&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;    print(url_for('login', next='/'))&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
/login?next=%2F
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.test_request_context&quot;&gt;test_request_context()&lt;/a&gt; method
tells Flask to behave like handling a request, even though
we are using a Python shell.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_request_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;basic-project-structure&quot;&gt;Basic project structure&lt;/h2&gt;

&lt;p&gt;Flask applications are recommended to be installed and run as Python
packages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/myproject
    /myproject
		__init__.py  ## make the project a package
		myproject.py ## application module
		schema.sql   ## SQLite3 database
        /static      ## static files like js and css; var: `static_folder`
        /templates   ## jinja2 templates; var: `template_folder`
    /tests
        test_myproject.py
    setup.py     ## Setuptools packaging
    MANIFEST.in
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Official docs &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;http://flask.pocoo.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Routing &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&quot;&gt;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tutorial folder &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/tutorial/folders/#tutorial-folders&quot;&gt;http://flask.pocoo.org/docs/0.12/tutorial/folders/#tutorial-folders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Explore flask book &lt;a href=&quot;http://explore-flask.readthedocs.io/en/latest/configuration.html&quot;&gt;http://explore-flask.readthedocs.io/en/latest/configuration.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/flask-overview-notes/</link>
        <guid isPermaLink="true">http://simpleit.rocks/flask-overview-notes/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
  </channel>
</rss>
