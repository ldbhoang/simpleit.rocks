<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT ü§ò Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>http://simpleit.rocks/</link>
    <atom:link href="http://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 26 Jan 2017 17:11:05 +0000</pubDate>
    <lastBuildDate>Thu, 26 Jan 2017 17:11:05 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Find Out If Your Joomla Site Has Been Hacked</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Like every popular Content Management System, there is always going to
be at risk of being attacked or hacked. This article explore some
methods to try to detect the integrity of your website.&lt;/p&gt;

&lt;p&gt;Monitor your site regularly.&lt;/p&gt;

&lt;h2 id=&quot;check-web-server-logs&quot;&gt;Check web server logs&lt;/h2&gt;

&lt;p&gt;Check primarily for brute force attacks and attempts to upload
files. With Apache in Ubuntu that would tipically mean to analyze
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/apache2/access.log&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/apache2/error.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, there is someone playing around one of my Joomla websites
trying to explode Wordpress vulnerabilities:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;/var/log/apache2/$&lt;/span&gt; &lt;kbd&gt;grep POST access.log&lt;/kbd&gt;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:03 +0000] &quot;POST /wp-content/themes/method/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:14 +0000] &quot;POST /wp-content/themes/modular/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:25 +0000] &quot;POST /wp-content/themes/myriad/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:56 +0000] &quot;POST /wp-content/themes/persuasion/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;detect-modified-php-files&quot;&gt;Detect modified PHP files&lt;/h2&gt;

&lt;p&gt;You can look for PHP files that were modified recently, or after some
date you are sure didn‚Äôt perform anything to the source code.&lt;/p&gt;

&lt;p&gt;That would show new possibly uploaded scripts or modified files with
injected code in them.&lt;/p&gt;

&lt;h3 id=&quot;find-files-modified-recently&quot;&gt;Find files modified recently&lt;/h3&gt;

&lt;p&gt;To find recently modified files: &lt;kbd&gt;find /path/to/dir -type f -mtime -7 -ls&lt;/kbd&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;-mtime&lt;/code&gt; parameter detects when file‚Äôs data was last modified
&lt;em&gt;n&lt;/em&gt;24* hours ago, in that case we analyze the previous 7 days.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -type f -mtime -7 -ls&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;find-files-modified-after-a-specific-date&quot;&gt;Find files modified after a specific date&lt;/h3&gt;

&lt;p&gt;List files in given directory modified after given date &lt;kbd&gt; find
/path/to/dir -newermt &quot;yyyy-mm-dd&quot;&lt;/kbd&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;-newerXY reference
              Compares the timestamp of the current file with reference.  The reference argument is normally the name  of  a  file
              (and  one  of its timestamps is used for the comparison) but it may also be a string describing an absolute time.  X
              and Y are placeholders for other letters, and these letters select which time belonging to how reference is used for
              the comparison.&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          a   The access time of the file reference
          B   The birth time of the file reference
          c   The inode status change time of reference
          m   The modification time of the file reference
          t   reference is interpreted directly as a time
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find man page&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this example we look for files modified with the current directory
as the base directory and modified after ‚Äú2016-12-01‚Äù.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -newermt &quot;2017-01-25&quot; -ls&lt;/kbd&gt;
1089538    4 drwxr-xr-x   2 marcanuy www-data     4096 Jan 25 04:13 ./website/logs
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;finding-hacked-files-with-pattern-matching&quot;&gt;Finding hacked files with pattern matching&lt;/h3&gt;

&lt;p&gt;Most of the time injected code will be obfuscated, making it harder to
look for obvious patterns, but we can try some alternatives though.&lt;/p&gt;

&lt;p&gt;This code would be tipically inserted as the first line of the PHP
file, starting with a variable, so we can look for that pattern, first
line starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php $&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;grep -m 1 -r &lt;span class=&quot;s1&quot;&gt;'^&amp;lt;?php \$'&lt;/span&gt; .&amp;lt;/kbd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./website/components/com_users/views/profile/tmpl/default_params.php:&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFieldset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'params'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
./website/administrator/cache/com_ajax3j/9411v11.php:&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$coi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x73&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x72&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zioj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x73&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x65&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x36&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x5f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x64&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$jd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x5f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$coi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zioj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$jd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])));&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First line of the output looks fine, but the second line looks a bit
more than suspicious code, we can decode it and understand what it is
doing before removing it.&lt;/p&gt;

&lt;h2 id=&quot;files-with-wrong-permissions&quot;&gt;Files with wrong permissions&lt;/h2&gt;

&lt;p&gt;Check out for writable upload directories. The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command can be used to scan for files and folder with
permission 777.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . \(-type f -o -type d\) -perm 0777 -print &lt;/kbd&gt;
&lt;/pre&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;-perm mode
              File‚Äôs  permission  bits  are  exactly  mode (octal or sym‚Äê
              bolic).  Since an exact match is required, if you  want  to
              use this form for symbolic modes, you may have to specify a
              rather complex mode string.  For example -perm  g=w  will
              only  match  files  which have mode 0020 (that is, ones for
              which group write permission is the only  permission  set).
              It  is more likely that you will want to use the / or -
              forms, for example -perm -g=w,  which  matches  any  file
              with  group write permission.  See the EXAMPLES section for
              some illustrative examples.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find man page&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we can modify it a bit to scan through all the 777 files on the
server and show ones with &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt; to look for uploaded scripts:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -name &quot;*php&quot; -type f -perm 777&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A lot of people recommends to install a clean backup after being
hacked, this approach will fail sooner or later because you need to
know what failed to prevent happening again.&lt;/p&gt;

&lt;p&gt;This article covers some basic strategies for identifying compromised
files, attacks are constant with varying methods so it is important to
know commands and strategies to recover our sites and keep them safe.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gregfreeman.io/2013/how-to-tell-if-your-php-site-has-been-compromised/&quot;&gt;http://www.gregfreeman.io/2013/how-to-tell-if-your-php-site-has-been-compromised/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluebridgedev.com/hacked-joomla-files&quot;&gt;https://www.bluebridgedev.com/hacked-joomla-files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.joomshaper.com/blog/my-joomla-site-was-hacked-what-to-do&quot;&gt;https://www.joomshaper.com/blog/my-joomla-site-was-hacked-what-to-do&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html&quot;&gt;https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Joomla Hacking Compendium &lt;a href=&quot;https://www.exploit-db.com/papers/15780/&quot;&gt;https://www.exploit-db.com/papers/15780/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/find-out-if-your-joomla-site-has-been-hacked/</link>
        <guid isPermaLink="true">http://simpleit.rocks/find-out-if-your-joomla-site-has-been-hacked/</guid>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>What Are The Supported Language Highlighters In Jekyll</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;To highlight code snippets in Jekyll post‚Äôs, there are many
highlighters that can be used. Jekyll comes with &lt;em&gt;Rouge&lt;/em&gt; by
default.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://github.com/jneen/rouge&quot;&gt;
  &lt;p&gt;Rouge is a pure-ruby syntax highlighter. It can highlight 100
different languages, and output HTML or ANSI 256-color text. Its
HTML output is compatible with stylesheets designed for pygments.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Rouge &lt;a href=&quot;https://github.com/jneen/rouge&quot;&gt;project&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;This article explores how to see the languages that Jekyll support in
your current environment and the list of languages for which Jekyll
can generate syntax highlighting in posts.&lt;/p&gt;

&lt;h2 id=&quot;command&quot;&gt;Command&lt;/h2&gt;

&lt;p&gt;To know which languages can have code syntax highlighted, we can user
the command &lt;code class=&quot;highlighter-rouge&quot;&gt;rougify&lt;/code&gt; that is part of
the &lt;a href=&quot;https://rubygems.org/gems/rouge&quot;&gt;rouge gem&lt;/a&gt; already installed by Jekyll.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;rougify --help&lt;/kbd&gt;
usage: rougify [command] [args...]

where &lt;command /&gt; is one of:
        highlight       highlight code
        help            print help info
        style           print CSS styles
        list            list available lexers
        version         print the rouge version number

See `rougify help &lt;command /&gt;` for more info.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;p&gt;As of &lt;em&gt;rouge&lt;/em&gt; version &lt;code class=&quot;highlighter-rouge&quot;&gt;1.11.1&lt;/code&gt;, this is the complete list of languages
that it supports.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;rougify version&lt;/kbd&gt;
1.11.1
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;rougify list&lt;/kbd&gt;
== Available Lexers ==                                                                                                       [168/287]
actionscript: ActionScript [aliases: as,as3]

apache: configuration files for Apache web server

apiblueprint: Markdown based API description language. [aliases: apiblueprint,apib]

applescript: The AppleScript scripting language by Apple Inc. (http://developer.apple.com/applescript/) [aliases: applescript]

biml: BIML, Business Intelligence Markup Language

c: The C programming language

ceylon: Say more, more clearly.

cfscript: CFScript, the CFML scripting language [aliases: cfc]

clojure: The Clojure programming language (clojure.org) [aliases: clj,cljs]

cmake: The cross-platform, open-source build system

coffeescript: The Coffeescript programming language (coffeescript.org) [aliases: coffee,coffee-script]

common_lisp: The Common Lisp variant of Lisp (common-lisp.net) [aliases: cl,common-lisp,elisp,emacs-lisp]

conf: A generic lexer for configuration files [aliases: config,configuration]

coq: Coq (coq.inria.fr)

cpp: The C++ programming language [aliases: c++]

csharp: a multi-paradigm language targeting .NET [aliases: c#,cs]

css: Cascading Style Sheets, used to style web pages

d: The D programming language(dlang.org) [aliases: dlang]

dart: The Dart programming language (dartlang.com)                                                                           [131/287]

diff: Lexes unified diffs or patches [aliases: patch,udiff]

eiffel: Eiffel programming language

elixir: Elixir language (elixir-lang.org) [aliases: elixir,exs]

erb: Embedded ruby template files [aliases: eruby,rhtml]

erlang: The Erlang programming language (erlang.org) [aliases: erl]

factor: Factor, the practical stack language (factorcode.org)

fortran: Fortran 95 Programming Language

gherkin: A business-readable spec DSL ( github.com/cucumber/cucumber/wiki/Gherkin ) [aliases: cucumber,behat]

glsl: The GLSL shader language

go: The Go programming language (http://golang.org) [aliases: go,golang]

gradle: A powerful build system for the JVM

groovy: The Groovy programming language (http://www.groovy-lang.org/)

haml: The Haml templating system for Ruby (haml.info) [aliases: HAML]

handlebars: the Handlebars and Mustache templating languages [aliases: hbs,mustache]

haskell: The Haskell programming language (haskell.org) [aliases: hs]

html: HTML, the markup language of the web

http: http requests and responses

ini: the INI configuration format                                                                                             [95/287]

io: The IO programming language (http://iolanguage.com)

java: The Java programming language (java.com)

javascript: JavaScript, the browser scripting language [aliases: js]

jinja: Django/Jinja template engine (jinja.pocoo.org) [aliases: django]

json: JavaScript Object Notation (json.org)

json-doc: JavaScript Object Notation with extenstions for documentation

jsonnet: An elegant, formally-specified config language for JSON

julia: The Julia programming language [aliases: jl]

kotlin: Kotlin &amp;lt;http://kotlinlang.org&amp;gt;

liquid: Liquid is a templating engine for Ruby (liquidmarkup.org)

literate_coffeescript: Literate coffeescript [aliases: litcoffee]

literate_haskell: Literate haskell [aliases: lithaskell,lhaskell,lhs]

llvm: The LLVM Compiler Infrastructure (http://llvm.org/)

lua: Lua (http://www.lua.org)

make: Makefile syntax [aliases: makefile,mf,gnumake,bsdmake]

markdown: Markdown, a light-weight markup language for authors [aliases: md,mkd]

matlab: Matlab [aliases: m]

moonscript: Moonscript (http://www.moonscript.org) [aliases: moon]                                                            [59/287]

nasm: Netwide Assembler

nginx: configuration files for the nginx web server (nginx.org)

nim: The Nim programming language (http://nim-lang.org/) [aliases: nimrod]

objective_c: an extension of C commonly used to write Apple software [aliases: objc]

ocaml: Objective CAML (ocaml.org)

pascal: a procedural programming language commonly used as a teaching language.

perl: The Perl scripting language (perl.org) [aliases: pl]

php: The PHP scripting language (php.net) [aliases: php,php3,php4,php5]

plaintext: A boring lexer that doesn't highlight anything [aliases: text]

powershell: powershell [aliases: posh]

praat: The Praat scripting language (praat.org)

prolog: The Prolog programming language (http://en.wikipedia.org/wiki/Prolog) [aliases: prolog]

properties: .properties config files for Java

protobuf: Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data [aliases: proto]

puppet: The Puppet configuration management language (puppetlabs.org) [aliases: pp]

python: The Python programming language (python.org) [aliases: py]

qml: QML, a UI markup language [aliases: qml]

r: The R statistics language (r-project.org) [aliases: r,R,s,S]                                                               [23/287]

racket: Racket is a Lisp descended from Scheme (racket-lang.org)

ruby: The Ruby programming language (ruby-lang.org) [aliases: rb]

rust: The Rust programming language (rust-lang.org) [aliases: rs]

sass: The Sass stylesheet language language (sass-lang.com)

scala: The Scala programming language (scala-lang.org) [aliases: scala]

scheme: The Scheme variant of Lisp

scss: SCSS stylesheets (sass-lang.com)

sed: sed, the ultimate stream editor

shell: Various shell languages, including sh and bash [aliases: bash,zsh,ksh,sh]

shell_session: A generic lexer for shell session and command line [aliases: terminal,console]

slim: The Slim template language

smalltalk: The Smalltalk programming language [aliases: st,squeak]

smarty: Smarty Template Engine [aliases: smarty]

sml: Standard ML [aliases: ml]

sql: Structured Query Language, for relational databases

swift: Multi paradigm, compiled programming language developed by Apple for iOS and OS X development. (developer.apple.com/swift)

tap: Test Anything Protocol [aliases: tap]

tcl: The Tool Command Language (tcl.tk)

tex: The TeX typesetting system [aliases: TeX,LaTeX,latex]

toml: the TOML configuration format (https://github.com/mojombo/toml)

tulip: The tulip programming language http://github.com/jneen/tulip [aliases: tlp]

twig: Twig template engine (twig.sensiolabs.org)

typescript: TypeScript, a superset of JavaScript [aliases: ts]

vb: Visual Basic [aliases: visualbasic]

verilog: The System Verilog hardware description language

viml: VimL, the scripting language for the Vim editor (vim.org) [aliases: vim,vimscript,ex]

xml: &lt;desc for=&quot;this-lexer&quot;&gt;XML&lt;/desc&gt;

yaml: Yaml Ain't Markup Language (yaml.org) [aliases: yml]

&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;The list is also available as a wiki page online
at
&lt;a href=&quot;https://github.com/jneen/rouge/wiki/List-of-supported-languages-and-lexers&quot;&gt;Rouge wiki&lt;/a&gt;,
this won‚Äôt be always up to date but will cover most of the languages
you will ever need.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use any of the above languages, you need to enclose the code
snippets with three or more tilde characters &lt;code class=&quot;highlighter-rouge&quot;&gt;~~~&lt;/code&gt; and specify the
language or an alias appending it to the end of the starting line, for
example, to highlight a python snippet the
&lt;a href=&quot;https://kramdown.gettalong.org/syntax.html#fenced-code-blocks&quot;&gt;kramdown markdown parser&lt;/a&gt;
we use &lt;strong&gt;fenced code blocks&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~~ python
# a comment
import datetime

def get_or_create_user(session, model, **kwargs):
    instance = session.query(model).filter_by(twitter_user_id=kwargs[&quot;twitter_user_id&quot;]).first()
	return instance
~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or using the alias &lt;code class=&quot;highlighter-rouge&quot;&gt;py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~~ py
# ...
~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then when rendered it will look like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# a comment&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_or_create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter_user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter_user_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/templates/&quot;&gt;https://jekyllrb.com/docs/templates/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jneen/rouge&quot;&gt;https://github.com/jneen/rouge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kramdown.gettalong.org/syntax.html&quot;&gt;https://kramdown.gettalong.org/syntax.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/what-are-the-supported-language-highlighters-in-jekyll/</link>
        <guid isPermaLink="true">http://simpleit.rocks/what-are-the-supported-language-highlighters-in-jekyll/</guid>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Using Clamav Antivirus In Ubuntu</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are viruses for all platforms, they are just more common on
Windows.&lt;/p&gt;

&lt;p&gt;Having an antivirus in Linux is just another tool to help you protect
the system, you won‚Äôt be entirely safe just using it, you also need
safe practices.&lt;/p&gt;

&lt;p&gt;We will install &lt;em&gt;ClamAV&lt;/em&gt;, one of the most popular antivirus software
for Linux.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://www.clamav.net/&quot;&gt;
  &lt;p&gt;ClamAV¬Æ is an open source antivirus engine for detecting trojans,
viruses, malware &amp;amp; other malicious threats.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://www.clamav.net/&quot;&gt;&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-do-we-need-antivirus-in-linux&quot;&gt;Why do we need antivirus in Linux&lt;/h2&gt;

&lt;p&gt;My choice is to have an antivirus to run from time to time or at
suspicious files and folders, but &lt;strong&gt;not having it running as
daemon&lt;/strong&gt; to avoid a performance decrease in the system.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;To install we use the &lt;em&gt;clamav&lt;/em&gt; package:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;apt-get install clamav&lt;/kbd&gt;
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Suggested packages:
  clamav-docs
The following NEW packages will be installed:
  clamav
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 0 B/90.5 kB of archives.
After this operation, 695 kB of additional disk space will be used.
Selecting previously unselected package clamav.
(Reading database ... 34590 files and directories currently installed.)
Preparing to unpack .../clamav_0.99.2+addedllvm-0ubuntu0.14.04.1_amd64.deb ...
Unpacking clamav (0.99.2+addedllvm-0ubuntu0.14.04.1) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Setting up clamav (0.99.2+addedllvm-0ubuntu0.14.04.1) ...
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;update-db&quot;&gt;Update db&lt;/h3&gt;

&lt;p&gt;Now we need to update the signatures so we have our virus database
updated with &lt;code class=&quot;highlighter-rouge&quot;&gt;freshclam&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;freshclam&lt;/kbd&gt;
ClamAV update process started at Wed Jan 25 15:05:36 2017
Downloading main.cvd [100%]
main.cvd updated (version: 57, sigs: 4218790, f-level: 60, builder: amishhammer)
Downloading daily.cvd [100%]
daily.cvd updated (version: 22948, sigs: 1449757, f-level: 63, builder: neo)
Downloading bytecode.cvd [100%]
bytecode.cvd updated (version: 289, sigs: 57, f-level: 63, builder: neo)
Database updated (5668604 signatures) from db.local.clamav.net (IP: 155.98.64.87)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;scan-commands&quot;&gt;Scan commands&lt;/h2&gt;

&lt;p&gt;To scan a directory recursively we use &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; to just display
the infected files.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;clamscan -r --bell -i ~/Downloads/&lt;/kbd&gt;

----------- SCAN SUMMARY -----------
Known viruses: 5663100
Engine version: 0.99.2
Scanned directories: 61
Scanned files: 380
Infected files: 0
Data scanned: 1077.08 MB
Data read: 551.12 MB (ratio 1.95:1)
Time: 298.129 sec (4 m 58 s)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;other-notes&quot;&gt;Other notes&lt;/h2&gt;

&lt;p&gt;Some other good security recommendations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;keep software updated&lt;/li&gt;
  &lt;li&gt;beware phishing sites (browsing through web pages that looks like
another popular ones)&lt;/li&gt;
  &lt;li&gt;analyze command before running them or use trusted sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/ClamAV&quot;&gt;https://help.ubuntu.com/community/ClamAV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://askubuntu.com/q/250290/43253&quot;&gt;How do I scan for viruses with ClamAV?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Tested in Ubuntu 16.10&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/using-clamav-antivirus-in-ubuntu/</link>
        <guid isPermaLink="true">http://simpleit.rocks/using-clamav-antivirus-in-ubuntu/</guid>
        
        <category>antivirus,</category>
        
        <category>security</category>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Accessing Specific Items From Data Files In Jekyll</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Having a sample data file, we explore some of the options we have to
access a specific item.&lt;/p&gt;

&lt;p&gt;For the data file &lt;code class=&quot;highlighter-rouge&quot;&gt;projects.yml&lt;/code&gt; located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/_data/projects.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;funtime&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.funtime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really fun&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;supertime&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.supertime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really super&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How can we access the data item whose project name is &lt;code class=&quot;highlighter-rouge&quot;&gt;funtime&lt;/code&gt;?&lt;/p&gt;

&lt;h1 id=&quot;using-an-index&quot;&gt;Using an index&lt;/h1&gt;

&lt;p&gt;If we know the data item index, we can access them directly, in this
case it is located in the position ‚Äú0‚Äù:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúproject‚Äù=&amp;gt;‚Äùfuntime‚Äù,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúurl‚Äù=&amp;gt;‚Äùwww.funtime.url‚Äù,‚Äúdescription‚Äù=&amp;gt;‚ÄùThis&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fun‚Äù&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;iterating&quot;&gt;Iterating&lt;/h2&gt;

&lt;p&gt;Iterating through all the data looking for an attribute&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Outputs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúproject‚Äù=&amp;gt;‚Äùfuntime‚Äù,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúurl‚Äù=&amp;gt;‚Äùwww.funtime.url‚Äù,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúdescription‚Äù=&amp;gt;‚ÄùThis&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fun‚Äù&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changing-the-data-file&quot;&gt;Changing the data file&lt;/h2&gt;

&lt;p&gt;The above data file can be optimized to make it more elegant and use
the project name as their key:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;funtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.funtime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really fun&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;supertime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.supertime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really super&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way we can access each of the items directly:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So it would output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúurl‚Äù=&amp;gt;‚Äùwww.funtime.url‚Äù,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‚Äúdescription‚Äù=&amp;gt;‚ÄùThis&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fun‚Äù&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/accessing-specific-items-from-data-files-in-jekyll/</link>
        <guid isPermaLink="true">http://simpleit.rocks/accessing-specific-items-from-data-files-in-jekyll/</guid>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Managing Environment Configuration Variables In Flask With Dotenv</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Often when developing apps with Flask we need to set up environment
variables to keep sensitive information secure and out of version
control.&lt;/p&gt;

&lt;p&gt;This article describes how to set up environment config variables in
Flask with &lt;em&gt;python-dotenv&lt;/em&gt; and why we can‚Äôt rely in Flask‚Äô instance
folder.&lt;/p&gt;

&lt;h2 id=&quot;dotenv-versus-instance-folders&quot;&gt;dotenv versus instance folders&lt;/h2&gt;

&lt;p&gt;Flask introduces the concept of &lt;strong&gt;instance folder&lt;/strong&gt;, designed to store
sensitive information like credentials and passwords for your local
environment, the main problem is that
&lt;a href=&quot;/avoid-using-flask-instance-folder-when-deploying-to-heroku/&quot;&gt;it can‚Äôt work with ephemeral filesystems&lt;/a&gt; like
the one Heroku uses.&lt;/p&gt;

&lt;p&gt;In this case the perfect fit for this is to use python-dotenv, so we
define environment config variables in Heroku and locally we put them
in &lt;code class=&quot;highlighter-rouge&quot;&gt;/.env&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;First we install it with &lt;kbd&gt;pip install -U python-dotenv&lt;/kbd&gt;&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
Collecting python-dotenv
  Downloading python-dotenv-0.6.2.tar.gz
Collecting click&amp;gt;=5.0 (from python-dotenv)
  Downloading click-6.7-py2.py3-none-any.whl (71kB)
    100% |‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 71kB 756kB/s 
Building wheels for collected packages: python-dotenv
  Running setup.py bdist_wheel for python-dotenv ... done
  Stored in directory: /home/user/.cache/pip/wheels/07/08/3a/7591582130baac86479ca3b7cb6314c9878e877645267d25c9
Successfully built python-dotenv
Installing collected packages: click, python-dotenv
  Found existing installation: click 6.6
    Uninstalling click-6.6:
      Successfully uninstalled click-6.6
Successfully installed click-6.7 python-dotenv-0.6.2
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;requirementstxt&quot;&gt;requirements.txt&lt;/h2&gt;

&lt;p&gt;We add the new package to the requirements file.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;pip freeze &amp;gt; requirements.txt&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;gitignore&lt;/h2&gt;

&lt;p&gt;We make sure that we won‚Äôt add it to the source code version control
adding it to &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;echo &quot;.env&quot; &amp;gt;&amp;gt; .gitignore&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;add-variables&quot;&gt;add variables&lt;/h2&gt;

&lt;p&gt;Add variables to &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;, optionally copy all the environment variables
from your heroku app to have this as a skeleton to fill with local
variables:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;heroku config -s &amp;gt;&amp;gt; .env&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;-s, ‚Äìshell         # output config vars in shell format&lt;/p&gt;

&lt;p&gt;or simply add them manually to &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TWITTER_CONSUMER_KEY=MYINCREDIBLEKEY
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-the-new-environment-variables&quot;&gt;use the new environment variables&lt;/h2&gt;

&lt;p&gt;Now we can use this environment variables in our Flask app.&lt;/p&gt;

&lt;p&gt;Having the following typical structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myapp
	.env
	myapp
		__init__.py
		myapp.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I like to initialize my app in &lt;code class=&quot;highlighter-rouge&quot;&gt;/myapp/__init.py__&lt;/code&gt;, but it should be
the same if you add this to &lt;code class=&quot;highlighter-rouge&quot;&gt;/myapp/myapp.py&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dotenv&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_dotenv&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# load dotenv in the base root&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;APP_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# refers to application_top&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dotenv_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APP_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;load_dotenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotenv_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tw_consumer_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TWITTER_CONSUMER_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I find it useful to use &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; for sensitive variables and custom
 paths, and &lt;a href=&quot;/organize-a-flask-project-to-handle-production-and-development-environments-effectively/&quot;&gt;maintain other variables in version control separated by
 server, like development, testing or production&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/managing-environment-configuration-variables-in-flask-with-dotenv/</link>
        <guid isPermaLink="true">http://simpleit.rocks/managing-environment-configuration-variables-in-flask-with-dotenv/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Avoid Using Flask Instance Folder When Deploying To Heroku</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Flask framework comes with an elegant solution to store credentials
and sensitive information, it is the usage of &lt;strong&gt;instance
folders&lt;/strong&gt;. Unfortunately this approach would have not sense if you
plan to deploy your &lt;em&gt;webapp&lt;/em&gt; to Heroku, &lt;strong&gt;flask‚Äôs instance folder is
not compatible with Heroku&lt;/strong&gt; because the nature of its filesystem,
that is, the way the files are organized on the disk.&lt;/p&gt;

&lt;h2 id=&quot;instance-folders-problem&quot;&gt;Instance folders problem&lt;/h2&gt;

&lt;p&gt;From Flask 0.8, &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/config/#instance-folders&quot;&gt;instance folders&lt;/a&gt; are the recommended way to store
sensitive information:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;designed to not be under version control and be deployment specific.&lt;/p&gt;

  &lt;p&gt;It‚Äôs the perfect place to drop things that either change at runtime or
configuration files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you deploy to Heroku, its &lt;em&gt;Dynos&lt;/em&gt; are cycled every 24 hours due
to its &lt;a href=&quot;https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem&quot;&gt;ephemereal system&lt;/a&gt;. As the project‚Äôs instance folder would
be out of version control, if you
can
&lt;a href=&quot;http://stackoverflow.com/q/27761986/1165509&quot;&gt;somehow copy it to Heroku&lt;/a&gt;,
it will disappear after some time.&lt;/p&gt;

&lt;blockquote class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;A dyno is a lightweight Linux container that runs a single
user-specified command. Each dyno gets its own ephemeral filesystem,
with a fresh copy of the most recently deployed code, any files
written will be discarded the moment the dyno is stopped or
restarted&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the only solution to set all the sensitive information in
production is to set each environment variable, one by one, without
the possibility to drop all your sensitive environment variables in a
&lt;em&gt;config&lt;/em&gt; file in the instance folder.&lt;/p&gt;

&lt;h2 id=&quot;alternative-use-a-local-env-file&quot;&gt;Alternative: use a local .env file&lt;/h2&gt;

&lt;p&gt;To view all of your Flask app‚Äôs config vars, you can use &lt;kbd&gt;heroku config&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; heroku config&lt;kbd&gt;&lt;/kbd&gt;
=== myapp-1234 Config Vars
APP_CONFIG_FILE:                /app/config.py
DATABASE_URL:                   postgres://asldfkjwg:2152134jsdfj23i5234j@ec2-194-32-16.compute-2.amazonaws.com:2232/aslkdgjsadj234
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Then you can create the same variables for your local environment with
&lt;kbd&gt;$ heroku config:get CONFIG-VAR-NAME -s  &amp;gt;&amp;gt; .env&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;After adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; to avoid committing your local
environment variables, you can customize them locally and add
&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; support to your flask apps in development and deployments with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;python-dotenv&lt;/code&gt;
package: &lt;a href=&quot;https://github.com/theskumar/python-dotenv&quot;&gt;https://github.com/theskumar/python-dotenv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This way we achieve a strict &lt;strong&gt;separation of config from code&lt;/strong&gt;, which
complies with twelve-factor‚Äôs third statement: 
&lt;a href=&quot;https://12factor.net/config&quot;&gt;Store config in the environment&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/config/#instance-folders&quot;&gt;http://flask.pocoo.org/docs/0.12/config/#instance-folders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/dynos&quot;&gt;https://devcenter.heroku.com/articles/dynos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://12factor.net/config&quot;&gt;https://12factor.net/config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/avoid-using-flask-instance-folder-when-deploying-to-heroku/</link>
        <guid isPermaLink="true">http://simpleit.rocks/avoid-using-flask-instance-folder-when-deploying-to-heroku/</guid>
        
        <category>heroku,</category>
        
        <category>deployment,</category>
        
        <category>web-development</category>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Organize A Flask Project To Handle Production And Development Environments Effectively</title>
        <description>&lt;h2 id=&quot;separated-configurations-for-development-and-production&quot;&gt;Separated configurations for Development and Production&lt;/h2&gt;

&lt;p&gt;In most situations, applications would need different configurations
for each environment: Production, Staging, Development, etc.&lt;/p&gt;

&lt;h2 id=&quot;load-default-config-and-an-environment-specific-one&quot;&gt;Load default config and an environment specific one&lt;/h2&gt;

&lt;p&gt;The easiest way to have multiple configurations is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use a default configuration that is always loaded and&lt;/li&gt;
  &lt;li&gt;the default configuration is under version control (e.g.: part of the &lt;em&gt;git&lt;/em&gt; project repo) and&lt;/li&gt;
  &lt;li&gt;Use an environment variable to switch between the configurations that overrides the values as needed in each environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Having a configuration that loads configuration values from the
specified &lt;em&gt;config&lt;/em&gt; environment &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourapplication.default_settings'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'YOURAPPLICATION_SETTINGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we create a separate config.py for each &lt;em&gt;env&lt;/em&gt; and export the
configuration path:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export
YOURAPPLICATION_SETTINGS=/path/to/config.py&lt;/kbd&gt;
&lt;/pre&gt;

&lt;p&gt;This way it will always load the default &lt;em&gt;configs&lt;/em&gt; and then our custom
variables from &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;instance-paths&quot;&gt;Instance paths&lt;/h2&gt;

&lt;p&gt;From Flask 0.8, there is the concept of &lt;strong&gt;instance folders&lt;/strong&gt;. The
instance folder is a good fit for configuration files because it is
designed to &lt;strong&gt;not be under version control&lt;/strong&gt; and &lt;strong&gt;be deployment specific&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;To keep the &lt;em&gt;instance&lt;/em&gt; folder out of versioning in &lt;em&gt;Git&lt;/em&gt; add &lt;code class=&quot;highlighter-rouge&quot;&gt;instance/&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;/.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, Flask looks for a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; in the same
level of your main file or the package.&lt;/p&gt;

&lt;h2 id=&quot;behaviour&quot;&gt;Behaviour&lt;/h2&gt;

&lt;p&gt;Using this folder and having environment specific configuration files
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder we end up having the following directory structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
config/
  __init__.py
  default.py
  development.py
  production.py
instance/
  config.py
myapp/
  __init__.py
  myapp.py
  ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To have the configurations loaded we have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;load the default config in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/default.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;load configuration from instance folder  &lt;code class=&quot;highlighter-rouge&quot;&gt;instance/config.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Load the file specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_CONFIG_FILE&lt;/code&gt; environment
variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp/__init__.py&lt;/code&gt; we load them:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# myapp/__init__.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_relative_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pyfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.py'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'APP_CONFIG_FILE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then set the environment variable depending on the server we are
invoking the app:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export APP_CONFIG_FILE=/var/www/yourapp/config/production.py&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;final&quot;&gt;Final&lt;/h2&gt;

&lt;p&gt;Now your folder structure should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myapp
‚îú‚îÄ‚îÄ config
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py     # empty
‚îÇ   ‚îú‚îÄ‚îÄ development.py
‚îÇ   ‚îú‚îÄ‚îÄ default.py
‚îÇ   ‚îî‚îÄ‚îÄ production.py
‚îú‚îÄ‚îÄ instance
‚îÇ   ‚îî‚îÄ‚îÄ config.py
‚îî‚îÄ‚îÄ myapp
   ‚îú‚îÄ‚îÄ __init__.py
   ‚îî‚îÄ‚îÄ myapp.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It can be useful to also add support for &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; to &lt;a href=&quot;/managing-environment-configuration-variables-in-flask-with-dotenv/&quot;&gt;handle sensitive
variables when deploying to Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Explore flask book &lt;a href=&quot;http://explore-flask.readthedocs.io/en/latest/configuration.html&quot;&gt;http://explore-flask.readthedocs.io/en/latest/configuration.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/41615662/1165509&quot;&gt;Non existing path when setting up Flask to have separated configurations for each environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/organize-a-flask-project-to-handle-production-and-development-environments-effectively/</link>
        <guid isPermaLink="true">http://simpleit.rocks/organize-a-flask-project-to-handle-production-and-development-environments-effectively/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>How to change all files permissions to 644 and directories to 755</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are two common task in Linux environments when handling files
and folders permissions, you often will want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;give directories read and write privileges  &lt;strong&gt;(drwxr-xr-x)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;give files read privileges &lt;strong&gt;(-rw-r‚Äìr‚Äì)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This can be done safely with &lt;kbd&gt;find&lt;/kbd&gt; and &lt;kbd&gt;chmod&lt;/kbd&gt;
commands, taking some precautions.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;chmod --help&lt;/kbd&gt;
Usage: chmod [OPTION]... MODE[,MODE]... FILE...
  or:  chmod [OPTION]... OCTAL-MODE FILE...
  or:  chmod [OPTION]... --reference=RFILE FILE...
Change the mode of each FILE to MODE.
With --reference, change the mode of each FILE to that of RFILE.

  -c, --changes          like verbose but report only when a change is made
  -f, --silent, --quiet  suppress most error messages
  -v, --verbose          output a diagnostic for every file processed
      --no-preserve-root  do not treat '/' specially (the default)
      --preserve-root    fail to operate recursively on '/'
      --reference=RFILE  use RFILE's mode instead of MODE values
  -R, --recursive        change files and directories recursively
      --help     display this help and exit
      --version  output version information and exit

Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;change-directory-permissions&quot;&gt;Change directory permissions&lt;/h2&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type d -exec chmod 755 {} +&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;change-files-permissions&quot;&gt;Change files permissions&lt;/h2&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type f -exec chmod 644 {} +&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;run-chmod-efficiently&quot;&gt;Run chmod efficiently&lt;/h2&gt;

&lt;p&gt;To avoid spawning one chmod process per file, we can pipe find output
to &lt;kbd&gt;xargs&lt;/kbd&gt;. This can be helpful if there are many files to
process.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type d -print0 | xargs -0 chmod 755&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find /path -type f -print0 | xargs -0 chmod 644&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;-print0
     True;  print the full file name on the standard output, followed
     by a null character (instead of the newline character that -print
     uses). This allows file names that contain newlines or other
     types of white space to be correctly interpreted by programs that
     process the find output. This option corresponds to the -0 option
     of xargs.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find manual page&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;xargs --help&lt;/kbd&gt;
Usage: xargs [OPTION]... COMMAND [INITIAL-ARGS]...
Run COMMAND with arguments INITIAL-ARGS and more arguments read from input.

Mandatory and optional arguments to long options are also
mandatory or optional for the corresponding short option.
  -0, --null                   items are separated by a null, not whitespace;
                                 disables quote and backslash processing and
                                 logical EOF processing
..(truncated)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Superuser answer to &lt;a href=&quot;http://superuser.com/a/91938/158197&quot;&gt;How to chmod all directories except files (recursively)?&lt;/a&gt; by &lt;a href=&quot;http://superuser.com/users/263/nik&quot;&gt;nik&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;StackOverflow: &lt;a href=&quot;http://stackoverflow.com/q/6085156/1165509&quot;&gt;Using semicolon (;) vs plus (+) with exec in find&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/change-all-files-permissions-to-644-and-directories-to-755-commands/</link>
        <guid isPermaLink="true">http://simpleit.rocks/change-all-files-permissions-to-644-and-directories-to-755-commands/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Securing The Images Folder In Joomla</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The images folder is one the most vulnerable Joomla folders, because it allows
users to upload files to your website. That could lead to serious
security problems. The file types allowed to upload should be
restricted to its minimum.&lt;/p&gt;

&lt;p&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; to use several strategies to address this
problem.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; are simply distributed configuration files, they ‚Äúprovide
a way to make configuration changes on a per-directory basis‚Äù.&lt;/p&gt;

&lt;p&gt;In the images folder we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable script execution&lt;/li&gt;
  &lt;li&gt;Select which files you can upload to it&lt;/li&gt;
  &lt;li&gt;Select which files you can NOT upload to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategies&quot;&gt;Strategies&lt;/h2&gt;

&lt;h3 id=&quot;disable-script-execution-in-images-folder&quot;&gt;Disable script execution in images folder&lt;/h3&gt;

&lt;p&gt;By default Joomla images directory is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/images&lt;/code&gt; folder,
in this directory we add &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AddHandler cgi-script .php .pl .py .jsp .asp .htm .shtml .sh .cgi
Options -ExecCGI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We used
the Apache &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;Options Directive&lt;/a&gt; and &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler&quot;&gt;AddHandler Directive&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;First we tell Apache to treat the files ending with the above
extensions as &lt;abbr title=&quot;Common Gateway Interface&quot;&gt;CGI&lt;/abbr&gt; scripts, i.e.: be served by &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_cgi.html&quot;&gt;mod_cgi&lt;/a&gt; handler, then we prevent the execution of those &lt;abbr title=&quot;Common Gateway Interface&quot;&gt;CGI&lt;/abbr&gt;
scripts.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;
  &lt;p&gt;The Options directive controls which server features are available
in a particular directory.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Options Directive in &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;Apache Core Features Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;htaccess-whitelist&quot;&gt;.htaccess whitelist&lt;/h3&gt;

&lt;p&gt;We can specify which file types we allow users to upload to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;.+\.(gif|jpe?g|png|pdf)$&quot;&amp;gt;
Allow from all
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That will allow the above filenames extensions and &lt;strong&gt;block&lt;/strong&gt; every
other extension from getting into the folder.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;
  &lt;p&gt;The &lt;FilesMatch&gt; directive limits the scope of the enclosed
directives by filename, just as the &lt;Files&gt; directive does. However,
it accepts a regular expression&lt;/Files&gt;&lt;/FilesMatch&gt;&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;FilesMatch&gt; Directive in &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;Apache docs&lt;/a&gt;&amp;lt;/cite&amp;gt;&amp;lt;/footer&amp;gt;
&lt;/FilesMatch&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;htaccess-blacklist&quot;&gt;.htaccess blacklist&lt;/h3&gt;

&lt;p&gt;Instead of specifying which files we allow to upload, here we tell
Apache to deny the upload of files with these extensions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;\.(asp|sh|php|php5|pl)$&quot;&amp;gt;
Deny from all
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I found a good strategy to always &lt;strong&gt;disable script execution&lt;/strong&gt; and
then also select from one of the other two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; &lt;strong&gt;whitelist&lt;/strong&gt; or
&lt;strong&gt;blacklist&lt;/strong&gt;, so if the attacker even handle to upload the file it won‚Äôt
get their scripts executed.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Apache docs &lt;a href=&quot;http://httpd.apache.org/docs/current&quot;&gt;http://httpd.apache.org/docs/current&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache HTTP Server Tutorial: .htaccess files &lt;a href=&quot;http://httpd.apache.org/docs/current/howto/htaccess.html&quot;&gt;http://httpd.apache.org/docs/current/howto/htaccess.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache FilesMatch Directive &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Security Checklist/You have been hacked or defaced &lt;a href=&quot;https://docs.joomla.org/Security_Checklist/You_have_been_hacked_or_defaced&quot;&gt;https://docs.joomla.org/Security_Checklist/You_have_been_hacked_or_defaced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/securing-the-images-folder-in-joomla/</link>
        <guid isPermaLink="true">http://simpleit.rocks/securing-the-images-folder-in-joomla/</guid>
        
        <category>joomla,</category>
        
        <category>images,</category>
        
        <category>htaccess</category>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>Setting Up A Fresh Linux Server</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a checklist to have in mind all the tasks I find useful to
make after installing Linux in a computer.&lt;/p&gt;

&lt;p&gt;What steps to take after installing a fresh Linux server, mainly
oriented to a developer user.&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;Checklist&lt;/h2&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/showing-untracked-files-in-status-after-creating-new-directories-in-git/&quot;&gt;Show untracked files In Git Status After Creating New Directories In Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/&quot;&gt;Ignore emacs and vim backup files in git with gitignore globally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/setting-up-a-fresh-linux-server/</link>
        <guid isPermaLink="true">http://simpleit.rocks/setting-up-a-fresh-linux-server/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
      </item>
    
  </channel>
</rss>
