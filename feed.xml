<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT 🤘 Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>http://simpleit.rocks/</link>
    <atom:link href="http://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 04 Jan 2017 15:42:47 +0000</pubDate>
    <lastBuildDate>Wed, 04 Jan 2017 15:42:47 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Flask Overview</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Flask is a microframework for Python based on Werkzeug, Jinja 2 and
good intentions. And before you ask: It’s BSD licensed!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flask is one of the most popular web frameworks in Github. This is an
overview of its main concepts to get started quickly.&lt;/p&gt;

&lt;h2 id=&quot;flask-script&quot;&gt;Flask script&lt;/h2&gt;

&lt;p&gt;Flask, like most modern frameworks, has its own command &lt;code class=&quot;highlighter-rouge&quot;&gt;flask&lt;/code&gt; to
perform tasks.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask --help&lt;/kbd&gt;
Usage: flask [OPTIONS] COMMAND [ARGS]...

  This shell command acts as general utility script for Flask applications.

  It loads the application configured (through the FLASK_APP environment
  variable) and then provides commands either provided by the application or
  Flask itself.

  The most useful commands are the &quot;run&quot; and &quot;shell&quot; command.

  Example usage:

    $ export FLASK_APP=hello.py
    $ export FLASK_DEBUG=1
    $ flask run

Options:
  --version  Show the flask version
  --help     Show this message and exit.

Commands:
  run    Runs a development server.
  shell  Runs a shell in the app context.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;development-server&quot;&gt;Development server&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;flask&lt;/code&gt; command depends on the &lt;code class=&quot;highlighter-rouge&quot;&gt;FLASK_APP&lt;/code&gt; environment
variable to know which app to work on, we start specifying this with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; command, then if we run the flask development server it
knows which file to refer to:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export FLASK_APP=hello.py&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask run&lt;/kbd&gt;
 * Running on http://127.0.0.1:5000/
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;reload-server-when-code-changes&quot;&gt;Reload server when code changes&lt;/h3&gt;

&lt;p&gt;There is a special debug mode handled by the &lt;code class=&quot;highlighter-rouge&quot;&gt;FLASK_DEBUG&lt;/code&gt; environment
variable that allows to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reload the server automatically each time the code changes&lt;/li&gt;
  &lt;li&gt;output debugging information on errors&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export FLASK_DEBUG=1&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask run&lt;/kbd&gt;
 * Forcing debug mode on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 292-824-230
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Routing is done binding functions with URLs, using the &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&quot;&gt;route()&lt;/a&gt;
decorator.&lt;/p&gt;

&lt;p&gt;For example, the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;/hello-world&lt;/code&gt; would run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/hello-world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dynamic-urls&quot;&gt;Dynamic URLs&lt;/h3&gt;

&lt;p&gt;Flask URLs can also handle variables specifying them like
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;variable_name&amp;gt;&lt;/code&gt; or more precisely using &lt;em&gt;converters&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;converter:variable_name&amp;gt;&lt;/code&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;'/post/&amp;lt;int:post_id&amp;gt;'&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.route('/user/&amp;lt;username&amp;gt;')
def show_user_profile(username):
    # show the user profile for that user
    return 'User %s' % username
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reverse-urls&quot;&gt;Reverse URLs&lt;/h3&gt;

&lt;p&gt;Generating URLs knowing the function name is also possible
with &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.url_for&quot;&gt;url_for&lt;/a&gt;
like:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;python&lt;/kbd&gt;
Python 3.5.2+ (default, Sep 22 2016, 12:18:14) 
[GCC 6.2.0 20160927] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;from flask import Flask, url_for&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;app = Flask(__name__)&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;@app.route('/login')&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;def login(): pass&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;with app.test_request_context():&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;    print(url_for('login', next='/'))&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
/login?next=%2F
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.test_request_context&quot;&gt;test_request_context()&lt;/a&gt; method
tells Flask to behave like handling a request, even though
we are using a Python shell.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_request_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;basic-project-structure&quot;&gt;Basic project structure&lt;/h2&gt;

&lt;p&gt;Flask applications are recommended to be installed and run as Python
packages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/myproject
    /myproject
		__init__.py  ## make the project a package
		myproject.py ## application module
		schema.sql   ## SQLite3 database
        /static      ## static files like js and css
        /templates   ## jinja2 templates
	/tests
		test_myproject.py
	setup.py     ## Setuptools packaging
    MANIFEST.in
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Official docs &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;http://flask.pocoo.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Routing &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&quot;&gt;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tutorial folder &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/tutorial/folders/#tutorial-folders&quot;&gt;http://flask.pocoo.org/docs/0.12/tutorial/folders/#tutorial-folders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/flask-overview-notes/</link>
        <guid isPermaLink="true">http://simpleit.rocks/flask-overview-notes/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Colors Palettes For Web Design</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Websites to choose the right color scheme for your web design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coolors &lt;a href=&quot;https://coolors.co/browser/best/1&quot;&gt;https://coolors.co/browser/best/1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Adobe Color CC &lt;a href=&quot;https://color.adobe.com/it/explore/most-popular/?time=all&quot;&gt;https://color.adobe.com/it/explore/most-popular/?time=all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/colors-palettes-for-web-design/</link>
        <guid isPermaLink="true">http://simpleit.rocks/colors-palettes-for-web-design/</guid>
        
        
        <category>docs</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Shell Redirect Output And Errors To The Null Device In Bash</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;In shell scripting, you often want to avoid printing error messages to
the console or discard any possible output the script could
generate. Capturing program output can be done with &lt;em&gt;I/O Redirection&lt;/em&gt;
in Linux.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;In Linux, everything is a file, even data streams and devices are
treated like ordinary files.&lt;/p&gt;

&lt;p&gt;There are always three default files open:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;stdin&lt;/dt&gt;
  &lt;dd&gt;the keyboard&lt;/dd&gt;
  &lt;dt&gt;stdout&lt;/dt&gt;
  &lt;dd&gt;the screen&lt;/dd&gt;
  &lt;dt&gt;stderr&lt;/dt&gt;
  &lt;dd&gt;error messages output to the screen&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Output from these files can be captured and sent as input to another
file, command, program or script. This is called &lt;strong&gt;redirection&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How do you choose what file to handle? With &lt;strong&gt;file descriptors&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;file-descriptors&quot;&gt;File descriptors&lt;/h3&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://www.tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17894&quot;&gt;
  &lt;p&gt;A file descriptor is simply a number that the operating system
assigns to an open file to keep track of it. Consider it a
simplified type of file pointer. It is analogous to a file handle in
C.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Chapter 20. I/O Redirection in &lt;a href=&quot;http://www.tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17894&quot;&gt;Advanced Bash-Scripting Guide&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kowing the &lt;em&gt;file descriptors&lt;/em&gt; of each file, we can select with which
one we want to work and process redirection between them.&lt;/p&gt;

&lt;p&gt;The file descriptors for our open files are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stdin: 0&lt;/li&gt;
  &lt;li&gt;stdout: 1&lt;/li&gt;
  &lt;li&gt;stderr: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;M&amp;gt;N&lt;/code&gt; in each command to redirect the file descriptor
&lt;strong&gt;M&lt;/strong&gt; to &lt;strong&gt;N&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;: file descriptor, which defaults to 1, if not explicitly set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt; can be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;: filename,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;amp;N&lt;/strong&gt;: another file descriptor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;null-device&quot;&gt;Null device&lt;/h3&gt;

&lt;p&gt;Linux has a special device file that discards all data written to
it. In Linux this device is &lt;strong&gt;/dev/null&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;redirect-to-the-null-device&quot;&gt;Redirect to the null device.&lt;/h2&gt;

&lt;p&gt;The way to discard commands output and error messages is to redirect
them to the &lt;em&gt;null device&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This can be done explicitely redirecting both output and/or errors in
many ways:&lt;/p&gt;

&lt;p&gt;Redirect stdout to the null device:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirect stderr to the null device&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirect both stdout and stderr to the null device&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirect stderr to the same file of stdout&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Let’s see a simple example with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls &amp;gt;/dev/null&lt;/kbd&gt;

&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;stdout file descriptor isn’t present so it defaults to 1, any error
would be echoed to the screen.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls -error 1&amp;gt;/dev/null&lt;/kbd&gt;
ls: invalid option -- 'e'
Try 'ls --help' for more information.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;we only redirect &lt;em&gt;stdout&lt;/em&gt; but we still see the error generated by the
command.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls -error 2&amp;gt;/dev/null&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;we produce an error with &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; but redirects the error output to the
null device, so we don’t see any output in the screen.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls -error &amp;amp;&amp;gt;/dev/null&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls &amp;amp;&amp;gt;/dev/null&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;we avoid outputting errors and the standard command output.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Understanding &lt;em&gt;file descriptors&lt;/em&gt; is key to handle commands output and
errors.&lt;/p&gt;

&lt;p&gt;This is a common practice to avoid outputting anything in &lt;em&gt;cronjobs&lt;/em&gt;
where the output would be sent to the users email.&lt;/p&gt;

&lt;p&gt;Additionally, it is very useful to work with bash redirection not only
to the null device.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tldp.org/LDP/abs/html/io-redirection.html&quot;&gt;http://www.tldp.org/LDP/abs/html/io-redirection.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Null_device&quot;&gt;https://en.wikipedia.org/wiki/Null_device&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams&quot;&gt;https://en.wikipedia.org/wiki/Standard_streams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Device_file&quot;&gt;https://en.wikipedia.org/wiki/Device_file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/shell-redirect-output-and-errors-to-the-null-device-in-bash/</link>
        <guid isPermaLink="true">http://simpleit.rocks/shell-redirect-output-and-errors-to-the-null-device-in-bash/</guid>
        
        <category>bash</category>
        
        <category>linux</category>
        
        <category>redirection</category>
        
        
        <category>docs</category>
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Prevent Running Of Duplicate Cron Jobs</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;When you set up a cronjob you often want no more than one copy running
at a time, so you need to apply a strategy to prevent a cron job from
having multiple running instances when a script takes longer time to
finish.&lt;/p&gt;

&lt;p&gt;This can be done “manually” with a a shell script that detects a
running instance before executing it again, using &lt;code class=&quot;highlighter-rouge&quot;&gt;pidof&lt;/code&gt;, or you can
take benefit of software that are built to handle this scenario
specifically like &lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;run-once&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lock-file-approach&quot;&gt;Lock file approach&lt;/h2&gt;

&lt;p&gt;A lock file is an ordinary file that it is created before executing the
script, and removed after the script finishes.&lt;/p&gt;

&lt;p&gt;This way if any other command tries to execute the same script &lt;strong&gt;using
the same lock file&lt;/strong&gt; it will exit or wait until it can execute.&lt;/p&gt;

&lt;h3 id=&quot;using-flock&quot;&gt;Using flock&lt;/h3&gt;

&lt;p&gt;Most Linux distros already comes with
the &lt;a href=&quot;http://man7.org/linux/man-pages/man1/flock.1.html&quot;&gt;flock&lt;/a&gt;
command.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://man7.org/linux/man-pages/man1/flock.1.html&quot;&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; manages locks from within shell scripts or from the command line.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Flock in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/flock.1.html&quot;&gt;User Commands&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use &lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; to execute the script, specifying explicitly the lock
file to use, and to exit if the script is already running with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flock -n /tmp/myfind.lock myscript.sh&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;For example, editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; to execute the command every 5 minutes should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/5 * * * * /usr/bin/flock -n /tmp/ms.lockfile /usr/local/bin/my_script --some-parameter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Every time the script takes longer than 5 minutes to execute, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;cronjob&lt;/code&gt; will fail and leave the original script to finish.&lt;/p&gt;

&lt;h3 id=&quot;using-run-one&quot;&gt;Using run-one&lt;/h3&gt;

&lt;p&gt;In some &lt;em&gt;distros&lt;/em&gt; like &lt;a href=&quot;https://apps.ubuntu.com/cat/applications/run-one&quot;&gt;Ubuntu&lt;/a&gt;, there is also
the &lt;a href=&quot;https://launchpad.net/run-one&quot;&gt;run-one&lt;/a&gt; utility that handles the
lock automatically.&lt;/p&gt;

&lt;p&gt;Example crontab with &lt;code class=&quot;highlighter-rouge&quot;&gt;run-one&lt;/code&gt; for the previous script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/5 * * * *   run-one /usr/local/bin/my_script --some-parameter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;These approaches are easier and safer than detecting the running
scripts manually which may lead to other problems.&lt;/p&gt;

&lt;p&gt;Not thinking what could happen if a duplicate running instance of a
cronjob appears can lead to several problems that should not be
overlooked and handled accordingly when defining them.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Crontab &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;http://man7.org/linux/man-pages/man5/crontab.5.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://serverfault.com/q/82857/135885&quot;&gt;Prevent duplicate cron jobs running&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File_locking&quot;&gt;File locking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/prevent-running-of-duplicate-cron-jobs/</link>
        <guid isPermaLink="true">http://simpleit.rocks/prevent-running-of-duplicate-cron-jobs/</guid>
        
        
        <category>docs</category>
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Delete All Backup Files Recursively In Bash</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The most popular *nix editors, &lt;a href=&quot;/docs/lisp/emacs/&quot;&gt;Emacs&lt;/a&gt; and Vim automatically generate
backup files of each file you edit, this is because they both has the
auto-save feature so you don’t lose your work if anything happens.&lt;/p&gt;

&lt;p&gt;Vim backup files has &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; at the end of the file as it was before you
edited it: &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bar~&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Emacs backup files are surrounded by &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; in their filenames: &lt;code class=&quot;highlighter-rouge&quot;&gt;#foo.bar#&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will show the commands to remove the files of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;*~&lt;/code&gt; so they
should be adjusted to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;#*#&lt;/code&gt; files easily.&lt;/p&gt;

&lt;h2 id=&quot;visualize-the-files-to-remove&quot;&gt;Visualize the files to remove&lt;/h2&gt;

&lt;p&gt;Removing files is always a sensitive task, you should always check
what files the command you execute will remove.&lt;/p&gt;

&lt;p&gt;To see what files the command affects we use &lt;code class=&quot;highlighter-rouge&quot;&gt;find -name &quot;*~&quot; -print&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;
  &lt;p&gt;-print
        print the full file name on the standard output,
        followed by a newline.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find command _man_ page in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;General Commands Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -print&lt;/kbd&gt;
./_includes/lang_nav.html~
./_includes/head.html~
./_includes/share_buttons.html~
./_includes/adsense_content_1.html~
./_includes/adsense_content_2.html~
./_includes/adsense_side.html~
./_sass/cached/_main.scss~
./_sass/cached/_share_buttons.scss~
./_sass/cached.scss~
./_layouts/default.html~
./index.md~
./trans/hola.md~
./trans/es.md~
./trans/index.md~
./README.md~
./assets/main.scss~
./Gemfile~
./_config.yml~
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;If you need further information about each file you can also specify
set a custom command, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l &amp;lt;file&amp;gt;&lt;/code&gt; with: &lt;code class=&quot;highlighter-rouge&quot;&gt;find -name &quot;*~&quot; -exec
ls -l {} \;&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -exec ls -l {} \;&lt;/kbd&gt;
-rw-rw-r-- 1 marcanuy marcanuy 272 nov 22 23:21 ./_includes/lang_nav.html~
-rw-rw-r-- 1 marcanuy marcanuy 1861 nov 22 23:21 ./_includes/head.html~
-rw-rw-r-- 1 marcanuy marcanuy 2063 nov 22 15:07 ./_includes/share_buttons.html~
-rw-rw-r-- 1 marcanuy marcanuy 543 nov 27 11:02 ./_includes/adsense_content_1.html~
-rw-rw-r-- 1 marcanuy marcanuy 543 nov 27 11:07 ./_includes/adsense_content_2.html~
-rw-rw-r-- 1 marcanuy marcanuy 538 nov 27 10:55 ./_includes/adsense_side.html~
-rw-rw-r-- 1 marcanuy marcanuy 1143 nov 22 14:08 ./_sass/cached/_main.scss~
-rw-rw-r-- 1 marcanuy marcanuy 331 nov 22 14:08 ./_sass/cached/_share_buttons.scss~
-rw-rw-r-- 1 marcanuy marcanuy 46 nov 22 07:44 ./_sass/cached.scss~
-rw-rw-r-- 1 marcanuy marcanuy 3324 nov 26 18:06 ./_layouts/default.html~
-rw-r--r-- 1 marcanuy marcanuy 2569 nov 27 01:51 ./index.md~
-rw-rw-r-- 1 marcanuy marcanuy 34 nov 26 16:20 ./trans/hola.md~
-rw-rw-r-- 1 marcanuy marcanuy 2689 nov 27 01:45 ./trans/es.md~
-rw-rw-r-- 1 marcanuy marcanuy 2256 nov 22 18:09 ./trans/index.md~
-rw-rw-r-- 1 marcanuy marcanuy 835 nov 22 18:25 ./README.md~
-rw-r--r-- 1 marcanuy marcanuy 947 nov 21 19:34 ./assets/main.scss~
-rw-rw-r-- 1 marcanuy marcanuy 811 nov 21 19:53 ./Gemfile~
-rw-r--r-- 1 marcanuy marcanuy 290 nov 22 13:36 ./_config.yml~
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;remove-files&quot;&gt;Remove files&lt;/h2&gt;

&lt;p&gt;After making sure the above files we want to delete, we add the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-delete&lt;/code&gt; flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;find -name &quot;*~&quot; -print -delete&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -print -delete&lt;/kbd&gt;
./_includes/lang_nav.html~
./_includes/head.html~
./_includes/share_buttons.html~
./_includes/adsense_content_1.html~
./_includes/adsense_content_2.html~
./_includes/adsense_side.html~
./_sass/cached/_main.scss~
./_sass/cached/_share_buttons.scss~
./_sass/cached.scss~
./_layouts/default.html~
./index.md~
./trans/hola.md~
./trans/es.md~
./trans/index.md~
./README.md~
./assets/main.scss~
./Gemfile~
./_config.yml~
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -print&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;important-notes&quot;&gt;Important notes&lt;/h3&gt;

&lt;h4 id=&quot;find-parameters-order-matter&quot;&gt;Find parameters order matter&lt;/h4&gt;

&lt;blockquote class=&quot;blockquote alert alert-danger&quot; cite=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;
  &lt;p&gt;Warnings: Don’t forget that the find command line is evaluated as an
expression, so putting -delete first will make find try to delete
everything below the starting points you specified. When testing a
find command line that you later intend to use with -delete, you
should explicitly specify -depth in order to avoid later surprises.
Because -delete implies -depth, you cannot usefully use -prune and
-delete together.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt; Find command in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;General Commands Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is: &lt;strong&gt;using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-delete&lt;/code&gt; switch before &lt;code class=&quot;highlighter-rouge&quot;&gt;-name&lt;/code&gt; deletes all the
file tree recursively&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;safer-find-command&quot;&gt;Safer find command&lt;/h4&gt;

&lt;p&gt;If your version of &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; doesn’t have the &lt;code class=&quot;highlighter-rouge&quot;&gt;-delete&lt;/code&gt; switch, then you
can execute &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; on each matched file with &lt;code class=&quot;highlighter-rouge&quot;&gt;-exec rm {} \;&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -exec rm {} \;&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;alternative-using-git&quot;&gt;Alternative using git&lt;/h2&gt;

&lt;p&gt;If you are working in a &lt;a href=&quot;/docs/git/&quot;&gt;git&lt;/a&gt; repo, then
there is a high chance you want to delete all the untracked local
files from your current branch, that would delete all the
automatically created backup files and possibly some other files you
don’t want to be there.&lt;/p&gt;

&lt;p&gt;If this is the case then you can
use &lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git clean&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://git-scm.com/docs/git-clean&quot;&gt;
  &lt;p&gt;Cleans the working tree by recursively removing files that are not
under version control, starting from the current directory.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;Documentation of &lt;cite&gt;&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git-clean command&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git clean -n&lt;/kbd&gt;
Would remove _data/people.yml~
Would remove _includes/author.html~
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git clean&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Parameters used:&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;-n
–dry-run
Don’t actually remove anything, just show what would be done.&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;-i
–interactive
Show what would be done and clean files interactively. See “Interactive mode” for details.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is a simple way for removing backup files from Emacs and
Vim. Special care should be taken when using the &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; action of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command, using it incorrectly could lead to deleting all
the files recursively.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Find command manual &lt;a href=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;http://man7.org/linux/man-pages/man1/find.1.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Emacs AutoSave &lt;a href=&quot;https://www.emacswiki.org/emacs/AutoSave&quot;&gt;https://www.emacswiki.org/emacs/AutoSave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/delete-all-backup-files-recursively-in-bash/</link>
        <guid isPermaLink="true">http://simpleit.rocks/delete-all-backup-files-recursively-in-bash/</guid>
        
        <category>emacs</category>
        
        <category>vim</category>
        
        <category>bash</category>
        
        <category>backups</category>
        
        
        <category>docs</category>
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Handling Mysql Credentials From Linux Command Line The Right Way</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Credentials should never by typed in the command line, it is better to
handle them in configuration files so they are never shown in logs,
processes and you don’t need to explicitly type them.&lt;/p&gt;

&lt;p&gt;This is specially useful to automate &lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; backups and use it safely
in shared environments like a &lt;abbr title=&quot;Virtual Private Server&quot;&gt;VPS&lt;/abbr&gt; or any shared hosting.&lt;/p&gt;

&lt;p&gt;We use &lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; configuration files to configure credentials as they are
read at the startup stage.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://dev.mysql.com/doc/refman/5.7/en/option-files.html&quot;&gt;
  &lt;p&gt;Option files provide a convenient way to specify commonly used
options so that they need not be entered on the command line each
time you run a program.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; 5.7 Reference Manual
in &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/option-files.html&quot;&gt;Using Option Files&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;Always avoid typing the user and password &lt;code class=&quot;highlighter-rouge&quot;&gt;$ mysql --host=localhost
--user=myname --password=mypass mydb&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-credentials-file&quot;&gt;Setting up the credentials file&lt;/h2&gt;

&lt;p&gt;We create a configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;mydb.cnf&lt;/code&gt; with the following format.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[client]
host=
user=
password=
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;using-the-config-file&quot;&gt;Using the config file&lt;/h2&gt;

&lt;p&gt;Then we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;defaults-extra-file&lt;/code&gt; parameter to tell &lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; to read our configuration.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://dev.mysql.com/doc/refman/5.7/en/option-file-options.html#option_general_defaults-extra-file&quot;&gt;
  &lt;p&gt;–defaults-extra-file=file_name&lt;/p&gt;

  &lt;p&gt;Read this option file after the global option file but (on Unix)
  before the user option file and (on all platforms) before the login
  path file. (For information about the order in which option files are
  used, see Section 5.2.6, “Using Option Files”.) If the file does not
  exist or is otherwise inaccessible, an error occurs. file_name is
  interpreted relative to the current directory if given as a relative
  path name rather than a full path name.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; 5.7 Reference Manual &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/option-file-options.html#option_general_defaults-extra-file&quot;&gt;5.2.7 Command-Line Options that Affect Option-File Handling&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;usage-examples&quot;&gt;Usage examples&lt;/h2&gt;

&lt;p&gt;Having the credentials in a configuration file makes it possible to
create scripts and automate tasks easily.&lt;/p&gt;

&lt;h3 id=&quot;mysql-backup-script&quot;&gt;&lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; Backup script&lt;/h3&gt;

&lt;p&gt;Having this configuration we can easily make a backup script to build
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cron&quot;&gt;cronjob&lt;/a&gt; and automatically
backup the database regularly using &lt;kbd&gt;mysqldump&lt;/kbd&gt;. Edit the
file &lt;code class=&quot;highlighter-rouge&quot;&gt;backup.sh&lt;/code&gt; with the following content.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Backup database from console&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULTS_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATABASE&lt;/span&gt;.cnf
&lt;span class=&quot;nv&quot;&gt;BACKUP_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOGS_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DB_OUT_FILENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULTS_FILE&lt;/span&gt;-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date +&lt;span class=&quot;se&quot;&gt;\%&lt;/span&gt;Y&lt;span class=&quot;se&quot;&gt;\%&lt;/span&gt;m&lt;span class=&quot;se&quot;&gt;\%&lt;/span&gt;d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.sql.gz
mysqldump --defaults-extra-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULTS_FILE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DATABASE&lt;/span&gt; 2&amp;gt;&amp;gt; &lt;span class=&quot;nv&quot;&gt;$LOGS_DIR&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$DATABASE&lt;/span&gt;.log | gzip - &amp;gt; &lt;span class=&quot;nv&quot;&gt;$BACKUP_DIR&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$DB_OUT_FILENAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then make it executable &lt;kbd&gt;chmod +x backup.sh&lt;/kbd&gt;&lt;/p&gt;

&lt;h3 id=&quot;truncate-mysql-tables-from-console&quot;&gt;Truncate &lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; tables from console&lt;/h3&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://dev.mysql.com/doc/refman/5.7/en/truncate-table.html&quot;&gt;
  &lt;p&gt;TRUNCATE TABLE empties a table completely. It requires the DROP privilege.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; 5.7 Reference Manual in &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/truncate-table.html&quot;&gt;14.1.34 TRUNCATE TABLE Syntax&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can remove all the content from all the tables of a database
automatically with the following script &lt;code class=&quot;highlighter-rouge&quot;&gt;truncate_db.sh&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Truncate database tables from console&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATABASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEFAULTS_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATABASE&lt;/span&gt;.cnf

mysql --defaults-extra-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULTS_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -Nse &lt;span class=&quot;s1&quot;&gt;'show tables'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DATABASE&lt;/span&gt; | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;table; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;mysql --defaults-extra-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DEFAULTS_FILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;truncate table &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$table&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DATABASE&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then make it executable &lt;kbd&gt;chmod +x truncate_db.sh&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Using &lt;abbr title=&quot;My Structured Query Language&quot;&gt;MySQL&lt;/abbr&gt; options file, it is very easy to setup a safer environment
than executing commands with the user or password shown in console.&lt;/p&gt;

&lt;p&gt;Backing up the database or perform any other task from console with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump&lt;/code&gt; command becomes trivial.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/marcanuy/5977648&quot;&gt;https://gist.github.com/marcanuy/5977648&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/option-files.html&quot;&gt;http://dev.mysql.com/doc/refman/5.7/en/option-files.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/handling-mysql-credentials-from-linux-command-line-the-right-way/</link>
        <guid isPermaLink="true">http://simpleit.rocks/handling-mysql-credentials-from-linux-command-line-the-right-way/</guid>
        
        <category>mysql</category>
        
        <category>bash</category>
        
        <category>console</category>
        
        
        <category>docs</category>
        
        <category>sql</category>
        
        <category>mysql</category>
        
      </item>
    
      <item>
        <title>Bash script to automatically tweet new blog posts based in a website rss feed</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Based in the &lt;abbr title=&quot;Really Simple Syndication&quot;&gt;RSS&lt;/abbr&gt; feed generated by websites, feed a Twitter account
with daily new blog posts.&lt;/p&gt;

&lt;p&gt;This method is specially useful for websites that has been built with
static site generators, like &lt;a href=&quot;/docs/ruby/jekyll/&quot;&gt;Jekyll&lt;/a&gt; for example, where they
automatically publish a &lt;abbr title=&quot;Really Simple Syndication&quot;&gt;RSS&lt;/abbr&gt; feed with new content in each build.&lt;/p&gt;

&lt;p&gt;Based in this information, you can set up a script in another server
that will check the above feed, and if it detects new posts it will
publish a link to it directly in Twitter.&lt;/p&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;h3 id=&quot;set-up-a-virtual-environment&quot;&gt;Set up a virtual environment&lt;/h3&gt;

&lt;p&gt;If you already have a virtual environment installed, you can skip this
step. In Ubuntu you can install the package &lt;code class=&quot;highlighter-rouge&quot;&gt;python-virtualenv&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;apt install python-virtualenv&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;Or refer to this &lt;a href=&quot;/python-virtual-environments-using-virtualenv/&quot;&gt;virtualenv installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Activate the virtual environment to install the required packages&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;virtualenv -p python2.7 ~/.virtualenvs/twitter_bot&lt;/kbd&gt;
Running virtualenv with interpreter /usr/bin/python2.7
New python executable in /home/user/.virtualenvs/twitter_bot/bin/python2.7
Also creating executable in /home/user/.virtualenvs/twitter_bot/bin/python
&lt;/samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;source ~/.virtualenvs/twitter_bot/bin/activate&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot)$&lt;/span&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;twitter-credentials&quot;&gt;Twitter credentials&lt;/h3&gt;

&lt;p&gt;Log into &lt;a href=&quot;https://apps.twitter.com/&quot;&gt;Twitter Apps&lt;/a&gt; and select “Create
New App”.&lt;/p&gt;

&lt;p&gt;Create the Application with the following content:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Name&lt;/dt&gt;
  &lt;dd&gt;Website &lt;abbr title=&quot;Really Simple Syndication&quot;&gt;RSS&lt;/abbr&gt; Twitter Feeder&lt;/dd&gt;
  &lt;dt&gt;Description&lt;/dt&gt;
  &lt;dd&gt;Automatic new blog posts publisher&lt;/dd&gt;
  &lt;dt&gt;Website&lt;/dt&gt;
  &lt;dd&gt;Example.com&lt;/dd&gt;
  &lt;dt&gt;Callback URL&lt;/dt&gt;
  &lt;dd&gt;
    &lt;Leave it=&quot;&quot; empty=&quot;&quot;&gt;

&lt;/Leave&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;And then proceed to “Create your Twitter Application” button.&lt;/p&gt;

&lt;p&gt;Now go to “Keys and Access Tokens” tab, and make sure your app has
rights to publish tweets, the &lt;em&gt;Access Level Read and write&lt;/em&gt; option
should be enabled.&lt;/p&gt;

&lt;p&gt;Then go to “Token Actions” and “Create my access token”.&lt;/p&gt;

&lt;p&gt;You will need the following items from this page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Consumer Key (API Key)&lt;/li&gt;
  &lt;li&gt;Consumer Secret (API Secret)&lt;/li&gt;
  &lt;li&gt;Access Token&lt;/li&gt;
  &lt;li&gt;Access Token Secret&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;set-up-application&quot;&gt;Set up application&lt;/h3&gt;

&lt;p&gt;We will use the &lt;a href=&quot;https://github.com/housed/feedr&quot;&gt;feedr&lt;/a&gt; script to
publish tweets, so we have to clone the repo:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot)$&lt;/span&gt; &lt;kbd&gt;git clone https://github.com/housed/feedr.git&lt;/kbd&gt;
Cloning into 'feedr'...
remote: Counting objects: 65, done.
remote: Total 65 (delta 0), reused 0 (delta 0), pack-reused 65
Unpacking objects: 100% (65/65), done.
Checking connectivity... done.
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot)$&lt;/span&gt; &lt;kbd&gt;cd feedr&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot) feedr$&lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Edit ` src/main.py` and add the previous generated Twitter consumer
keys and replace the feed with your website.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Initialize the list of desired feeds&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Feed(Name, XML, Media, Hashtags)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FEEDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Feed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SimpleIt.Rocks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://simpleit.rocks/feed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Twitter Account Keys &lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONSUMER_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'consumer_key'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONSUMER_SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'consumer_secret'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ACCESS_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'access_key'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ACCESS_SECRET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'access_secret'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;install-dependencies&quot;&gt;Install dependencies&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Feedr&lt;/em&gt; relies on
&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;BeautifulSoup4&lt;/a&gt;,
&lt;a href=&quot;https://pypi.python.org/pypi/feedparser&quot;&gt;FeedParser&lt;/a&gt;
and &lt;a href=&quot;http://www.tweepy.org/&quot;&gt;Tweepy&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot) feedr$&lt;/span&gt; &lt;kbd&gt;pip install bs4&lt;/kbd&gt;
Downloading/unpacking bs4
  Downloading bs4-0.0.1.tar.gz
  Running setup.py (path:/home/user/.virtualenvs/twitter_bot/build/bs4/setup.py) egg_info for package bs4
    
Downloading/unpacking beautifulsoup4 (from bs4)
  Downloading beautifulsoup4-4.5.1-py2-none-any.whl (83kB): 83kB downloaded
Installing collected packages: bs4, beautifulsoup4
  Running setup.py install for bs4
    
Successfully installed bs4 beautifulsoup4
Cleaning up...
&lt;/samp&gt;
&lt;/pre&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot) feedr$&lt;/span&gt; &lt;kbd&gt;pip install feedparser&lt;/kbd&gt;
Downloading/unpacking feedparser
  Downloading feedparser-5.2.1.zip (1.2MB): 1.2MB downloaded
  Running setup.py (path:/home/user/.virtualenvs/twitter_bot/build/feedparser/setup.py) egg_info for package feedparser
    
Installing collected packages: feedparser
  Running setup.py install for feedparser
    
Successfully installed feedparser
Cleaning up...
&lt;/samp&gt;
&lt;/pre&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot) feedr$&lt;/span&gt; &lt;kbd&gt;pip install tweepy&lt;/kbd&gt;
Downloading/unpacking tweepy
  Downloading tweepy-3.5.0-py2.py3-none-any.whl
Downloading/unpacking requests&amp;gt;=2.4.3 (from tweepy)
  Downloading requests-2.11.1-py2.py3-none-any.whl (514kB): 514kB downloaded
Downloading/unpacking six&amp;gt;=1.7.3 (from tweepy)
  Downloading six-1.10.0-py2.py3-none-any.whl
Downloading/unpacking requests-oauthlib&amp;gt;=0.4.1 (from tweepy)
  Downloading requests_oauthlib-0.7.0-py2.py3-none-any.whl
Downloading/unpacking oauthlib&amp;gt;=0.6.2 (from requests-oauthlib&amp;gt;=0.4.1-&amp;gt;tweepy)
  Downloading oauthlib-2.0.0.tar.gz (122kB): 122kB downloaded
  Running setup.py (path:/home/user/.virtualenvs/twitter_bot/build/oauthlib/setup.py) egg_info for package oauthlib
    
Installing collected packages: tweepy, requests, six, requests-oauthlib, oauthlib
  Running setup.py install for oauthlib
    
Successfully installed tweepy requests six requests-oauthlib oauthlib
Cleaning up...

&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;execute-twitter-feeder&quot;&gt;Execute Twitter feeder&lt;/h3&gt;

&lt;p&gt;After setting up credentials you can execute &lt;code class=&quot;highlighter-rouge&quot;&gt;feedr/src/main.py&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot) feedr$&lt;/span&gt; &lt;kbd&gt;cd src&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;(twitter_bot) feedr/src$&lt;/span&gt; &lt;kbd&gt;python2.7 main.py&lt;/kbd&gt;

&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;schedule-posts&quot;&gt;Schedule posts&lt;/h3&gt;

&lt;p&gt;We set up a cron job to check for new posts every a certain amount of
time, in this case every hour. We enter the crontab editor:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;crontab -e&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;And then we add the following line (adjust the path of your
installation, in this case I have used &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/feedr&lt;/code&gt;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 * * * * cd /opt/feedr/src; flock -n /tmp/twbot.lock ~/.virtualenvs/twitter_bot/bin/python2.7 main.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; command to
&lt;a href=&quot;/prevent-running-of-duplicate-cron-jobs/&quot;&gt;prevent duplicate cron job executions&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_feed&quot;&gt;https://en.wikipedia.org/wiki/Web_feed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RSS&quot;&gt;https://en.wikipedia.org/wiki/&lt;abbr title=&quot;Really Simple Syndication&quot;&gt;RSS&lt;/abbr&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/housed/feedr&quot;&gt;https://github.com/housed/feedr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/automatically-tweet-new-blog-posts-based-in-rss/</link>
        <guid isPermaLink="true">http://simpleit.rocks/automatically-tweet-new-blog-posts-based-in-rss/</guid>
        
        
        <category>docs</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Contributing To A Github Repository Step By Step</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Simply guide to contribute to any project in Github. The basic
workflow consist of&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fork the repository&lt;/li&gt;
  &lt;li&gt;Make a fix or contribution&lt;/li&gt;
  &lt;li&gt;Submit a pull request to the original project&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;forking&quot;&gt;Forking&lt;/h2&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;
  &lt;p&gt;A fork is a copy of a repository. Forking a repository allows you to
freely experiment with changes without affecting the original
project.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Fork A Repo in &lt;a href=&quot;https://help.github.com/articles/fork-a-repo/&quot;&gt;Github help&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to the project you want to contribute and press the &lt;strong&gt;Fork&lt;/strong&gt;
button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github-images.s3.amazonaws.com/help/bootcamp/Bootcamp-Fork.png&quot; alt=&quot;fork&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That will generate a copy of the repository in your Github profile
where you can work with the code.&lt;/p&gt;

&lt;p&gt;In this example I will fork the following
repo: &lt;a href=&quot;https://github.com/housed/feedr&quot;&gt;https://github.com/housed/feedr&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;clone-the-forked-repo&quot;&gt;Clone the forked repo&lt;/h2&gt;

&lt;p&gt;Make a local copy of the forked repo with &lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git clone https://github.com/marcanuy/feedr.git&lt;/kbd&gt;
Cloning into 'feedr'...
remote: Counting objects: 65, done.
remote: Total 65 (delta 0), reused 0 (delta 0), pack-reused 65
Ricezione degli oggetti: 100% (65/65), 178.73 KiB | 282.00 KiB/s, done.
Risoluzione dei delta: 100% (22/22), done.
Checking connectivity... fatto.
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;cd feedr&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;feedr$&lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;configure-the-original-repo-as-a-remote&quot;&gt;Configure the original repo as a remote&lt;/h2&gt;

&lt;p&gt;Having the original repo as a remote makes it possible to keep your
code up to date with all the contributions made to the original repo
and contribute your own code.&lt;/p&gt;

&lt;p&gt;The convention is to name this remote repo &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;feedr$&lt;/span&gt; &lt;kbd&gt;git remote add upstream https://github.com/housed/feedr.git&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;feedr$&lt;/span&gt; &lt;kbd&gt;git remote -v&lt;/kbd&gt;
origin  git@github.com:marcanuy/feedr.git (fetch)
origin  git@github.com:marcanuy/feedr.git (push)
upstream        https://github.com/housed/feedr.git (fetch)
upstream        https://github.com/housed/feedr.git (push)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-branch&quot;&gt;Create a branch&lt;/h2&gt;

&lt;p&gt;Create a topic branch where you fix or improve the code and move to
that branch.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git checkout -b fix-indentation&lt;/kbd&gt;
Switched to a new branch 'fix-indentation'
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-branch-with-new-changes&quot;&gt;Create a branch with new changes&lt;/h2&gt;

&lt;p&gt;After working in the new branch, making some changes and &lt;em&gt;commits&lt;/em&gt;,
push the new branch,&lt;code class=&quot;highlighter-rouge&quot;&gt;fix-indentation&lt;/code&gt; in this case, to your Github
repo.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git push origin fix-indentation&lt;/kbd&gt;
Counting objects: 4, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 367 bytes | 0 bytes/s, done.
Total 4 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To github.com:marcanuy/feedr.git
 * [new branch]      fix-indentation -&amp;gt; fix-indentation
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;create-a-pull-request&quot;&gt;Create a pull request&lt;/h2&gt;

&lt;p&gt;Now your changes are in a new branch in your Github repo, it is time
to make a &lt;em&gt;pull request&lt;/em&gt; to merge your changes in the original repo.&lt;/p&gt;

&lt;p&gt;The Github repo webpage shows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Your recently pushed branches:
    fix-indentation (less than a minute ago)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and makes it available a button to send the &lt;strong&gt;Pull Request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After pressing the &lt;strong&gt;Pull request&lt;/strong&gt; button, the webpage redirects to
&lt;strong&gt;Open a pull request&lt;/strong&gt; page, after selecting the base fork and the
head fork, you can make the &lt;strong&gt;pull request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now just wait to the repo owner to merge your fixes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;marcanuy wants to merge 1 commit into housed:master from  marcanuy:fix-indentation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/syncing-a-fork/&quot;&gt;Syncing a fork&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/creating-a-pull-request-from-a-fork/&quot;&gt;Creating a pull request from a fork&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.github.com/activities/forking/&quot;&gt;Forking Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/contributing-to-a-github-repository-step-by-step/</link>
        <guid isPermaLink="true">http://simpleit.rocks/contributing-to-a-github-repository-step-by-step/</guid>
        
        
        <category>docs</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Bash Script to Find Out If MySQL Is Running Or Not</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a simple solution to monitor the MySQL daemon, if it detects
that the daemon is not running, it starts it and send a notification
email.&lt;/p&gt;

&lt;p&gt;It is a simpler solution than using other more complete software like
&lt;em&gt;supervisord&lt;/em&gt; or &lt;em&gt;MonIT&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-script&quot;&gt;Creating the script&lt;/h2&gt;

&lt;p&gt;Create the script &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/scripts/monitor_mysql.sh&lt;/code&gt; with the following
content:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Config #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mysql_daemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mysqld'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;pgrep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/usr/bin/pgrep'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;mysql_start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sudo service mysql start'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;fail_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MySQL is down in &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;hostname&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Script #&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##########&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#look up process&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$pgrep&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mysql_daemon&lt;/span&gt; &amp;gt; /dev/null
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; -ne 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fail_msg&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$mysql_start&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And make it executable:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;chmod +x /root/scripts/monitor_mysql.sh&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;cronjob&quot;&gt;Cronjob&lt;/h2&gt;

&lt;p&gt;Specify through &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; to run it every 10 minutes. Running&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;crontab -e&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Add the following lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MAILTO=mail@example.com
*/10 * * * * /root/scripts/monitor_mysql.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Every time the script starts the daemon, an email will be sent with
its output.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;
  &lt;p&gt;cron(8) looks at the MAILTO variable if a mail needs to be send as a
result of running any commands in that particular crontab.  If
MAILTO is defined (and non-empty), mail is sent to the specified
address.  If MAILTO is defined but empty (MAILTO=””), no mail is
sent.  Otherwise, mail is sent to the owner of the crontab.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Crontab &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;man description&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Crontab &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;http://man7.org/linux/man-pages/man5/crontab.5.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/mheadd/5571023&quot;&gt;Simple bash script to check whether MySQL is running&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/lightweight-solution-to-start-mysql-daemon-if-not-running/</link>
        <guid isPermaLink="true">http://simpleit.rocks/lightweight-solution-to-start-mysql-daemon-if-not-running/</guid>
        
        
        <category>docs</category>
        
        <category>bash</category>
        
      </item>
    
      <item>
        <title>Automated Deployment Of Jekyll Websites To Github Pages With A Git Push To Github</title>
        <description>
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;A step-by-step guide to publish a Jekyll website automatically after
doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; to Github.&lt;/p&gt;

&lt;p&gt;This guide makes use of &lt;em&gt;Github Pages&lt;/em&gt;, &lt;em&gt;Jekyll&lt;/em&gt; and &lt;em&gt;Travis CI&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Github offers a free service called &lt;a href=&quot;https://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; to host regular
&lt;abbr title=&quot;HyperTextMarkupLanguage&quot;&gt;HTML&lt;/abbr&gt; content hosted directly from users GitHub repositories.&lt;/p&gt;

&lt;p&gt;It has a special, built-in support, for Jekyll, one of the most popular static
site generators, but you will have to use the Jekyll version currently
supported by Github (not always the latest one) and it does not allow
custom Jekyll plugins, because Jekyll is executed with the &lt;code class=&quot;highlighter-rouge&quot;&gt;--safe&lt;/code&gt; flag.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;
  &lt;p&gt;GitHub Pages is powered by Jekyll. However, all Pages sites are
generated using the –safe option to disable custom plugins for
security reasons. Unfortunately, this means your plugins won’t work
if you’re deploying to GitHub Pages.&lt;/p&gt;

  &lt;p&gt;You can still use GitHub Pages to publish your site, but you’ll need
to convert the site locally and push the generated static files to
your GitHub repository instead of the Jekyll source files.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;&lt;cite&gt;&lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;Plugins on GitHub Pages&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;A simple way to overcome these limitations is to manually build the
site before pushing to the repo or make use of automation tools like
Travis CI that will do this job for us in each &lt;em&gt;push&lt;/em&gt; to Github.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;create-the-basic-travisyml-file&quot;&gt;Create the basic .travis.yml file&lt;/h3&gt;

&lt;p&gt;Travis configuration is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;, we will create a new
one with the following contents (adjust versions to your needs):&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.3.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install -g bower&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bower install&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x ./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bash ./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES=true&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;COMMIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;me@marcanuy.com&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-the-deployment-script-deploysh&quot;&gt;Create the deployment script deploy.sh&lt;/h3&gt;

&lt;p&gt;We will create the following &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt; script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e &lt;span class=&quot;c&quot;&gt;# Exit with nonzero exit code if anything fails&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;master&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TARGET_BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gh-pages&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;doCompile &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build -d out/
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Pull requests and commits to other branches shouldn't try to deploy, just build to verify&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TRAVIS_PULL_REQUEST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt; -o &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TRAVIS_BRANCH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SOURCE_BRANCH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Skipping deploy; just doing a build.&quot;&lt;/span&gt;
    doCompile
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Save some useful information&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git config remote.origin.url&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SSH_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/https&lt;/span&gt;:&lt;span class=&quot;p&quot;&gt;\/\/github.com\//git@github.com&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SHA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git rev-parse --verify HEAD&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Clone the existing gh-pages for this repo into out/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Create a new empty branch if gh-pages doesn't exist yet (should only happen on first deply)&lt;/span&gt;
git clone &lt;span class=&quot;nv&quot;&gt;$REPO&lt;/span&gt; out
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;out
git checkout &lt;span class=&quot;nv&quot;&gt;$TARGET_BRANCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; git checkout --orphan &lt;span class=&quot;nv&quot;&gt;$TARGET_BRANCH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..

&lt;span class=&quot;c&quot;&gt;# Clean out existing contents&lt;/span&gt;
rm -rf out/&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0

&lt;span class=&quot;c&quot;&gt;# Run our compile script&lt;/span&gt;
doCompile

&lt;span class=&quot;c&quot;&gt;# Now let's go have some fun with the cloned repo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;out
git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;Travis CI&quot;&lt;/span&gt;
git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$COMMIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# If there are no changes to the compiled out (e.g. this is a README update) then just bail.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -z &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;git diff --exit-code&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No changes to the output on this push; exiting.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Commit the &quot;changes&quot;, i.e. the new version.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The delta will show diffs between new and old versions.&lt;/span&gt;
git add .
git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Deploy to GitHub Pages: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SHA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_KEY_VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;encrypted_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_key&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_IV_VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;encrypted_&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;_iv&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!ENCRYPTED_KEY_VAR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ENCRYPTED_IV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!ENCRYPTED_IV_VAR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
openssl aes-256-cbc -K &lt;span class=&quot;nv&quot;&gt;$ENCRYPTED_KEY&lt;/span&gt; -iv &lt;span class=&quot;nv&quot;&gt;$ENCRYPTED_IV&lt;/span&gt; -in deploy_key.enc -out deploy_key -d
chmod 600 deploy_key
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ssh-agent -s&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
ssh-add deploy_key

&lt;span class=&quot;c&quot;&gt;# Now that we're all set up, we can push.&lt;/span&gt;
git push &lt;span class=&quot;nv&quot;&gt;$SSH_REPO&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TARGET_BRANCH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The script basically performs the following actions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create the &lt;em&gt;gh-pages&lt;/em&gt; branch &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout --orphan gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;
  &lt;p&gt;Updates files in the working tree to match the version in the index
or the specified tree. If no paths are given, git checkout will also
update HEAD to set the specified branch as the current branch.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; git checkout orphan flag in &lt;cite&gt;&lt;a href=&quot;https://git-scm.com/docs/git-checkout&quot;&gt;git-checkout&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;Generate the Jekyll build inside &lt;code class=&quot;highlighter-rouge&quot;&gt;out/&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;Commit and deploy generated files to &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;enable-travis-for-the-repository&quot;&gt;Enable Travis for the repository&lt;/h3&gt;

&lt;p&gt;Sign in to Travis CI with your GitHub account.&lt;/p&gt;

&lt;p&gt;Once you’re signed in, Travis will synchronize your repositories from
GitHub. Go to your profile page and enable Travis CI for the
repository you want to build.&lt;/p&gt;

&lt;h3 id=&quot;generate-credentials&quot;&gt;Generate credentials&lt;/h3&gt;

&lt;p&gt;We need to generate credentials to be able to publish the &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;
branch contents on GitHub
using
&lt;a href=&quot;https://docs.travis-ci.com/user/encrypting-files/&quot;&gt;Travis Automated Encryption&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;generating-a-new-ssh-key-to-use-with-travis&quot;&gt;Generating a new SSH key to use with Travis&lt;/h4&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ssh-keygen -t rsa -b 4096 -C &quot;your_github_email@example.com&quot;&lt;/kbd&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/home/marcanuy/.ssh/id_rsa): &lt;kbd&gt;deploy_key&lt;/kbd&gt;
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in deploy_key.
Your public key has been saved in deploy_key.pub.
The key fingerprint is:
SHA256:vn3O/NkfKHg2nb9p0J7yam72elUInAHa0MtGWbsZ048 me@marcanuy.com
The key's randomart image is:
+---[RSA 4096]----+
|        .o.=o+   |
|        .o=.* .  |
|       oo+o.oo.+ |
|       o+ o  oE o|
|       .S ooo o .|
|          .  o..o|
|           o o++o|
|            o=-*=|
|            =*xX*|
+----[SHA256]-----+
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;add-deploy-key-to-github-keys&quot;&gt;Add deploy key to GitHub keys&lt;/h3&gt;

&lt;p&gt;Add the generated &lt;strong&gt;public key&lt;/strong&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy_key.pub&lt;/code&gt; to your repository at
https://github.com/&lt;your name=&quot;&quot;&gt;/&lt;your repo=&quot;&quot;&gt;/settings/keys.&lt;/your&gt;&lt;/your&gt;&lt;/p&gt;

&lt;p&gt;You can copy easily with &lt;code class=&quot;highlighter-rouge&quot;&gt;xclip&lt;/code&gt; and then paste it in the keys textbox:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;xclip -sel clip &amp;lt; deploy_key.pub&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;&lt;img class=&quot;img-fluid&quot; alt=&quot;Responsive image&quot; src=&quot;/assets/travis_add_deploy_key.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Detailed steps are &lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot;&gt;in this Github guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;encrypt-the-generated-deploy-key-with-the-travis-client&quot;&gt;Encrypt the generated deploy key with the Travis client&lt;/h3&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;travis encrypt-file deploy_key --add&lt;/kbd&gt;
Detected repository as marcanuy/simpleit.rocks, is this correct? |yes| &lt;kbd&gt;yes&lt;/kbd&gt;
encrypting deploy_key for marcanuy/emacside.com
storing result as deploy_key.enc
storing secure env variables for decryption

Make sure to add deploy_key.enc to the git repository.
Make sure not to add deploy_key to the git repository.
Commit all changes to your .travis.yml.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;edit-travisyml-with-encryption-ids&quot;&gt;Edit .travis.yml with encryption ids&lt;/h3&gt;

&lt;p&gt;The previous step added the before_install section with the proper
command to decrypt the &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy_key&lt;/code&gt;, now we have to detect the
encription id and add an environment variable like: ` ENCRYPTION_LABEL: “&amp;lt;…. encryption label from previous step ….&amp;gt;”`&lt;/p&gt;

&lt;p&gt;The encription id is the string between &lt;code class=&quot;highlighter-rouge&quot;&gt;$encrypted_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_key&lt;/code&gt; in
the automatically added &lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt; line:&lt;/p&gt;

&lt;p&gt;
openssl aes-256-cbc -K $encrypted_&lt;span style=&quot;color:red&quot;&gt;0c6d27255ccf&lt;/span&gt;_key -iv $encrypted_0c6d27255ccf_iv -in deploy_key.enc -out deploy_key -d.
&lt;/p&gt;

&lt;p&gt;In the previous case I will have to add the line &lt;code class=&quot;highlighter-rouge&quot;&gt;- ENCRYPTION_LABEL:
0c6d27255ccf&lt;/code&gt;, the file &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; will look like:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0c6d27255ccf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So the final &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; is:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.3.1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;npm install -g bower&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bower install&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x ./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./deploy.sh&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES=true&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;COMMIT_AUTHOR_EMAIL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;me@marcanuy.com&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ENCRYPTION_LABEL&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0c6d27255ccf&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;sudo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;before_install&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openssl aes-256-cbc -K $encrypted_0c6d27255ccf_key -iv $encrypted_0c6d27255ccf_iv -in deploy_key.enc -out deploy_key -d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;add-deploy-key-to-gitignore&quot;&gt;Add deploy key to gitignore:&lt;/h3&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; add &lt;em&gt;deploy_key&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_site
.sass-cache
.jekyll-metadata
bower_components
deploy_key
deploy_key.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;adding-the-travis-button-to-github-readme&quot;&gt;Adding the travis button to github readme&lt;/h3&gt;

&lt;p&gt;In your project &lt;code class=&quot;highlighter-rouge&quot;&gt;README&lt;/code&gt; file you can add the fancy Travis button with
the current status of the building, adding a similar code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[![Build Status](https://travis-ci.org/marcanuy/emacside.com.svg?branch=master)](https://travis-ci.org/marcanuy/emacside.com)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can find your project button url following &lt;a href=&quot;https://docs.travis-ci.com/user/status-images/&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;This guide is heavily based in &lt;a href=&quot;https://gist.github.com/domenic/ec8b0fc8ab45f39403dd&quot;&gt;Auto-deploying built products to gh-pages with
  Travis&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Related articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/encrypting-files/&quot;&gt;https://docs.travis-ci.com/user/encrypting-files/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/settings/keys&quot;&gt;https://github.com/settings/keys&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key&quot;&gt;https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#generating-a-new-ssh-key&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&quot;&gt;https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://awestruct.org/auto-deploy-to-github-pages/&quot;&gt;http://awestruct.org/auto-deploy-to-github-pages/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/deployment-methods/&quot;&gt;https://jekyllrb.com/docs/deployment-methods/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/continuous-integration/&quot;&gt;https://jekyllrb.com/docs/continuous-integration/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/automated-deployment-of-jekyll-websites-to-github-pages-with-a-git-push-to-github/</link>
        <guid isPermaLink="true">http://simpleit.rocks/automated-deployment-of-jekyll-websites-to-github-pages-with-a-git-push-to-github/</guid>
        
        <category>git</category>
        
        <category>github</category>
        
        <category>gh-pages</category>
        
        <category>jekyll</category>
        
        <category>travis</category>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
        <category>tutorials</category>
        
      </item>
    
  </channel>
</rss>
