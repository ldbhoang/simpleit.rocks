<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT ü§ò Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>http://simpleit.rocks/</link>
    <atom:link href="http://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 10 Jan 2017 03:20:20 +0000</pubDate>
    <lastBuildDate>Tue, 10 Jan 2017 03:20:20 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Securing The Images Folder In Joomla</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The images folder is one the most vulnerable Joomla folders, because it allows
users to upload files to your website. That could lead to serious
security problems. The file types allowed to upload should be
restricted to its minimum.&lt;/p&gt;

&lt;p&gt;We will use &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; to use several strategies to address this
problem.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; are simply distributed configuration files, they ‚Äúprovide
a way to make configuration changes on a per-directory basis‚Äù.&lt;/p&gt;

&lt;p&gt;In the images folder we can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable script execution&lt;/li&gt;
  &lt;li&gt;Select which files you can upload to it&lt;/li&gt;
  &lt;li&gt;Select which files you can NOT upload to it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;strategies&quot;&gt;Strategies&lt;/h2&gt;

&lt;h3 id=&quot;disable-script-execution-in-images-folder&quot;&gt;Disable script execution in images folder&lt;/h3&gt;

&lt;p&gt;By default Joomla images directory is located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/images&lt;/code&gt; folder,
in this directory we add &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AddHandler cgi-script .php .pl .py .jsp .asp .htm .shtml .sh .cgi
Options -ExecCGI
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We used
the Apache &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;Options Directive&lt;/a&gt; and &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_mime.html#addhandler&quot;&gt;AddHandler Directive&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;First we tell Apache to treat the files ending with the above
extensions as &lt;abbr title=&quot;Common Gateway Interface&quot;&gt;CGI&lt;/abbr&gt; scripts, i.e.: be served by &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/mod_cgi.html&quot;&gt;mod_cgi&lt;/a&gt; handler, then we prevent the execution of those &lt;abbr title=&quot;Common Gateway Interface&quot;&gt;CGI&lt;/abbr&gt;
scripts.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;
  &lt;p&gt;The Options directive controls which server features are available
in a particular directory.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Options Directive in &lt;a href=&quot;http://httpd.apache.org/docs/current/mod/core.html#options&quot;&gt;Apache Core Features Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;htaccess-whitelist&quot;&gt;.htaccess whitelist&lt;/h3&gt;

&lt;p&gt;We can specify which file types we allow users to upload to the
&lt;code class=&quot;highlighter-rouge&quot;&gt;images&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;.+\.(gif|jpe?g|png|pdf)$&quot;&amp;gt;
Allow from all
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That will allow the above filenames extensions and &lt;strong&gt;block&lt;/strong&gt; every
other extension from getting into the folder.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;
  &lt;p&gt;The &lt;FilesMatch&gt; directive limits the scope of the enclosed
directives by filename, just as the &lt;Files&gt; directive does. However,
it accepts a regular expression&lt;/Files&gt;&lt;/FilesMatch&gt;&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;FilesMatch&gt; Directive in &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;Apache docs&lt;/a&gt;&amp;lt;/cite&amp;gt;&amp;lt;/footer&amp;gt;
&lt;/FilesMatch&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;htaccess-blacklist&quot;&gt;.htaccess blacklist&lt;/h3&gt;

&lt;p&gt;Instead of specifying which files we allow to upload, here we tell
Apache to deny the upload of files with these extensions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;FilesMatch &quot;\.(asp|sh|php|php5|pl)$&quot;&amp;gt;
Deny from all
&amp;lt;/FilesMatch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I found a good strategy to always &lt;strong&gt;disable script execution&lt;/strong&gt; and
then also select from one of the other two methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; &lt;strong&gt;whitelist&lt;/strong&gt; or
&lt;strong&gt;blacklist&lt;/strong&gt;, so if the attacker even handle to upload the file it won‚Äôt
get their scripts executed.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Apache docs &lt;a href=&quot;http://httpd.apache.org/docs/current&quot;&gt;http://httpd.apache.org/docs/current&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache HTTP Server Tutorial: .htaccess files &lt;a href=&quot;http://httpd.apache.org/docs/current/howto/htaccess.html&quot;&gt;http://httpd.apache.org/docs/current/howto/htaccess.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Apache FilesMatch Directive &lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&quot;&gt;https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Security Checklist/You have been hacked or defaced &lt;a href=&quot;https://docs.joomla.org/Security_Checklist/You_have_been_hacked_or_defaced&quot;&gt;https://docs.joomla.org/Security_Checklist/You_have_been_hacked_or_defaced&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/securing-the-images-folder-in-joomla/</link>
        <guid isPermaLink="true">http://simpleit.rocks/securing-the-images-folder-in-joomla/</guid>
        
        <category>joomla,</category>
        
        <category>images,</category>
        
        <category>htaccess</category>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>Setting Up A Fresh Linux Server</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This is a checklist to have in mind all the tasks I find useful to
make after installing Linux in a computer.&lt;/p&gt;

&lt;p&gt;What steps to take after installing a fresh Linux server, mainly
oriented to a developer user.&lt;/p&gt;

&lt;h2 id=&quot;checklist&quot;&gt;Checklist&lt;/h2&gt;

&lt;h3 id=&quot;git&quot;&gt;Git&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/showing-untracked-files-in-status-after-creating-new-directories-in-git/&quot;&gt;Show untracked files In Git Status After Creating New Directories In Git&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/&quot;&gt;Ignore emacs and vim backup files in git with gitignore globally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/setting-up-a-fresh-linux-server/</link>
        <guid isPermaLink="true">http://simpleit.rocks/setting-up-a-fresh-linux-server/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Make Git Ignore Temporary Files Produced By Emacs And Vim In All Directories Globally</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Using VIm and &lt;a href=&quot;/docs/lisp/emacs/&quot;&gt;Emacs&lt;/a&gt; on a daily basis is very common for programmers.&lt;/p&gt;

&lt;p&gt;They have recovering systems to avoid losing work if a computer
crashes, that would make your directories full of strange files ending
in &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;, swap files (&lt;code class=&quot;highlighter-rouge&quot;&gt;.swp&lt;/code&gt;) or backup files named like &lt;code class=&quot;highlighter-rouge&quot;&gt;#&amp;lt;filename&amp;gt;#&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Those files would appear from time to time in your &lt;kbd&gt;git
status&lt;/kbd&gt; listings that wouldn‚Äôt add any valuable information.&lt;/p&gt;

&lt;p&gt;Better than disabling them, is to avoid seeing them globally, so any new
&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt; repository won‚Äôt show them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;status&lt;/code&gt; of changed file list
but you will still be able to recover them if anything bad happens
while editing.&lt;/p&gt;

&lt;h2 id=&quot;enabling-gitignore-globally&quot;&gt;Enabling gitignore globally&lt;/h2&gt;

&lt;p&gt;We will set up a global &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore_global&lt;/code&gt; file, i.e.: a list of rules for
ignoring files in every &lt;em&gt;Git&lt;/em&gt; repository on the computer.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git config --global core.excludesfile ~/.gitignore_global&lt;/kbd&gt;

&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;This command will automatically set the following configuration in
your &lt;a href=&quot;https://git-scm.com/docs/git-config#git-config-gitconfig&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig_global&lt;/code&gt;&lt;/a&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[core]
        excludesfile = /home/user/.gitignore_global
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://git-scm.com/docs/gitignore&quot;&gt;
  &lt;p&gt;Patterns which a user wants Git to ignore in all situations (e.g.,
backup or temporary files generated by the user‚Äôs editor of choice)
generally go into a file specified by core.excludesFile in the user‚Äôs
~/.gitconfig. Its default value is $XDG_CONFIG_HOME/git/ignore. If
$XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore
is used instead.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;gitignore in &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;git documentation&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;gitignore&lt;/h2&gt;

&lt;p&gt;Github has a great project with useful &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; files
optimized for a Operating System and editor specific.&lt;/p&gt;

&lt;p&gt;We grab the ones for Emacs and Vim (I don‚Äôt think you ever need any
other editor ;)&lt;/p&gt;

&lt;p&gt;You should put them together in a single &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitignore_global&lt;/code&gt; file
that will be processed globally.&lt;/p&gt;

&lt;h3 id=&quot;gitignore-for-emacs&quot;&gt;gitignore for Emacs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/Emacs.gitignore&quot;&gt;Gitignore for Emacs&lt;/a&gt; editor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# -*- mode: gitignore; -*-
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Org-mode
.org-id-locations
*_archive

# flymake-mode
*_flymake.*

# eshell files
/eshell/history
/eshell/lastdir

# elpa packages
/elpa/

# reftex files
*.rel

# AUCTeX auto folder
/auto/

# cask packages
.cask/
dist/

# Flycheck
flycheck_*.el

# server auth directory
/server/

# projectiles files
.projectile

# directory configuration
.dir-locals.el
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;gitignore-for-vim&quot;&gt;gitignore for Vim&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/github/gitignore/blob/master/Global/Vim.gitignore&quot;&gt;Gitignore for Vim&lt;/a&gt; editor:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# swap
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-v][a-z]
[._]sw[a-p]
# session
Session.vim
# temporary
.netrwhist
*~
# auto-generated tag files
tags
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;other-global-gitignore-properties&quot;&gt;Other global gitignore properties&lt;/h2&gt;

&lt;p&gt;Other common .gitignore configurations are also available in
 Github‚Äôs &lt;a href=&quot;https://gist.github.com/octocat/9257657&quot;&gt;gist&lt;/a&gt; that may
 worth adding them to the global gitignore file:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# Compiled source #
###################
*.com
*.class
*.dll
*.exe
*.o
*.so

# Packages #
############
# it&amp;#39;s better to unpack these files and commit the raw source
# git has its own built in compression methods
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Logs and databases #
######################
*.log
*.sql
*.sqlite

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/octocat/9257657.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now every time you work in a new or old project you won‚Äôt have to deal
with any backup files automatically generated by Vim or Emacs.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Emacs 18.6.3 Recovering Data from Auto-Saves &lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html&quot;&gt;https://www.gnu.org/software/emacs/manual/html_node/emacs/Recover.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vim documentation: recover &lt;a href=&quot;http://vimdoc.sourceforge.net/htmldoc/recover.html&quot;&gt;http://vimdoc.sourceforge.net/htmldoc/recover.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Github gitignore project &lt;a href=&quot;https://github.com/github/gitignore/tree/master/Global&quot;&gt;https://github.com/github/gitignore/tree/master/Global&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Gitignore file in git documentation &lt;a href=&quot;https://git-scm.com/docs/gitignore&quot;&gt;https://git-scm.com/docs/gitignore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/</link>
        <guid isPermaLink="true">http://simpleit.rocks/make-git-ignore-temporary-files-produced-by-emacs-and-vim-in-all-directories-globally/</guid>
        
        
        <category>docs</category>
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Joomla Security Tips Checklist</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Tips to prevent your Joomla website from being hacked.&lt;/p&gt;

&lt;h2 id=&quot;security-checklist&quot;&gt;Security Checklist&lt;/h2&gt;

&lt;h2 id=&quot;upgrade-joomla&quot;&gt;Upgrade Joomla&lt;/h2&gt;

&lt;p&gt;Each new Joomla update come with several security patches, not
updating means getting into troubles sooner or later, as new
vulnerabilities are discovered from time to time.&lt;/p&gt;

&lt;h3 id=&quot;avoid-old-extensions&quot;&gt;Avoid old extensions&lt;/h3&gt;

&lt;p&gt;You should always keep your extensions updated, if you are using an
old extension without support, find an alternative or deactivate it.&lt;/p&gt;

&lt;h3 id=&quot;adjust-files-and-directories-permissions&quot;&gt;Adjust files and directories permissions&lt;/h3&gt;

&lt;h4 id=&quot;htaccess&quot;&gt;htaccess&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;configuration.php&lt;/code&gt; shouldn‚Äôt have write permissions,
that would leave your them vulnerable to attacks.&lt;/p&gt;

&lt;h4 id=&quot;php-files&quot;&gt;PHP files&lt;/h4&gt;

&lt;p&gt;All the PHP files shouldn‚Äôt have write permissions.&lt;/p&gt;

&lt;h3 id=&quot;fix-images-folder-allowed-files&quot;&gt;Fix images folder allowed files&lt;/h3&gt;

&lt;p&gt;The images folder should only contains &lt;strong&gt;images&lt;/strong&gt;, it should &lt;a href=&quot;/securing-the-images-folder-in-joomla/&quot;&gt;block
users from trying to upload every other type of file&lt;/a&gt;,
specially &lt;em&gt;scripts&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;popular-extensions&quot;&gt;Popular extensions&lt;/h3&gt;

&lt;p&gt;Not try new extensions until they are well tested or popular in the
Joomla community.&lt;/p&gt;

&lt;h3 id=&quot;administrator-are-with-http-basic-auth&quot;&gt;Administrator are with HTTP basic auth&lt;/h3&gt;

&lt;p&gt;Protect the Administrator area, usually the &lt;code class=&quot;highlighter-rouge&quot;&gt;/administrator&lt;/code&gt; path,
with
&lt;a href=&quot;/protect-web-directories-with-http-basic-authentication-in-apache-server/&quot;&gt;HTTP Basic Authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful to
  prevent
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Dictionary_attack&quot;&gt;dictionary attacks&lt;/a&gt; in
  the Joomla Administrator area.&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/joomla-security-tips-checklist/</link>
        <guid isPermaLink="true">http://simpleit.rocks/joomla-security-tips-checklist/</guid>
        
        <category>joomla</category>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>Protect Web Directories With Http Basic Authentication In Apache Server</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;HTTP Basic Auth is very common in the web, although it is not the most
secure one.&lt;/p&gt;

&lt;p&gt;It‚Äôs simplicity makes it a simple choice to add a layer of security to
web directory quickly, not needing &lt;em&gt;sessions&lt;/em&gt; nor &lt;em&gt;cookies&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;HTTP Basic authentication needs that a client provides a username
and password when making a request.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;
  &lt;p&gt;The ‚ÄúBasic‚Äù Hypertext Transfer Protocol (HTTP)
authentication scheme, transmits credentials as user-id/password
pairs, encoded using Base64&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; The 'Basic' HTTP Authentication Scheme in &lt;cite&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;RFC 7617&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;steps-to-secure-a-directory&quot;&gt;Steps to secure a directory&lt;/h2&gt;

&lt;p&gt;To use HTTP Basic Authentication on a server, you need to create two files&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt;: specifies which directory to protect&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.htpasswd&lt;/code&gt;: passwords file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The each time you access the directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; it asks for
&lt;em&gt;username&lt;/em&gt; and &lt;em&gt;password&lt;/em&gt; validating it against &lt;code class=&quot;highlighter-rouge&quot;&gt;.htpasswd&lt;/code&gt;
credentials.&lt;/p&gt;

&lt;p&gt;We will end up having this directories structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home
	/secure
		/apasswords
...
/var
	/www
		/myprotected
			.htaccess
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-apache-htaccess&quot;&gt;Create Apache .htaccess&lt;/h3&gt;

&lt;p&gt;Add an &lt;code class=&quot;highlighter-rouge&quot;&gt;.htaccess&lt;/code&gt; file inside each directory that will be protected
with the following content, in this case in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/myprotected/.htaccess&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AuthType Basic
AuthName &quot;Restricted Access&quot;
AuthUserFile /home/secure/apasswords
Require valid-user
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;passwords-file&quot;&gt;Passwords file&lt;/h3&gt;

&lt;p&gt;We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd&lt;/code&gt; command to manage user files for basic
authentication.&lt;/p&gt;

&lt;p&gt;Command overview:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd --help&lt;/kbd&gt;
Usage:
	htpasswd [-cimBdpsDv] [-C cost] passwordfile username
	htpasswd -b[cmBdpsDv] [-C cost] passwordfile username password

	htpasswd -n[imBdps] [-C cost] username
	htpasswd -nb[mBdps] [-C cost] username password
 -c  Create a new file.
 -n  Don't update file; display results on stdout.
 -b  Use the password from the command line rather than prompting for it.
 -i  Read password from stdin without verification (for script usage).
 -m  Force MD5 encryption of the password (default).
 -B  Force bcrypt encryption of the password (very secure).
 -C  Set the computing time used for the bcrypt algorithm
     (higher is more secure but slower, default: 5, valid: 4 to 31).
 -d  Force CRYPT encryption of the password (8 chars max, insecure).
 -s  Force SHA encryption of the password (insecure).
 -p  Do not encrypt the password (plaintext, insecure).
 -D  Delete the specified user.
 -v  Verify password for the specified user.
On other systems than Windows and NetWare the '-p' flag will probably not work.
The SHA algorithm does not use a salt and is less secure than the MD5 algorithm.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;create-passwords-file&quot;&gt;Create passwords file&lt;/h4&gt;

&lt;p&gt;Create a directory &lt;strong&gt;outside apache document root&lt;/strong&gt;, only Apache should
access the password file.&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;htpasswd -c&lt;/code&gt; creates the &lt;em&gt;passwdfile&lt;/em&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;mkdir -p /home/secure/&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;chmod 0660 /home/secure/apasswords&lt;/kbd&gt;
&lt;span class=&quot;shell-comment&quot;&gt;# Create password file with user foobar&lt;/span&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd -c /home/secure/apasswords foobar&lt;/kbd&gt;
New password:
Re-type new password:
Adding password for user foobar
&lt;span class=&quot;shell-comment&quot;&gt;# In this case the server user and group is www-data&lt;/span&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;chown www-data:www-data /home/secure/apasswords&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;/home/secure/apasswords must be only readable by Apache web server&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir -p&lt;/code&gt; creates all the folder structure specified in the
parameters&lt;/p&gt;

&lt;h4 id=&quot;htpasswd-commands&quot;&gt;htpasswd commands&lt;/h4&gt;

&lt;h5 id=&quot;to-add-more-users&quot;&gt;To add more users&lt;/h5&gt;

&lt;p&gt;To change or add more users of the file, the same command can be used
without the &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; option, to add the user &lt;code class=&quot;highlighter-rouge&quot;&gt;john&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd .htpasswd john&lt;/kbd&gt;
New password:
Re-type new password:
Adding password for user foobar
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h4 id=&quot;changing-existing-users-passwords&quot;&gt;Changing existing users passwords&lt;/h4&gt;

&lt;p&gt;We execute the same command with the user that we want to change:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;htpasswd .htpasswd john &lt;/kbd&gt;
New password:
Re-type new password:
Updating password for user foobar
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;risks&quot;&gt;Risks&lt;/h2&gt;

&lt;p&gt;The HTTP Basic authentication has several issues that makes it
insecure in some scenarios, the standard itself states:&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;
  &lt;p&gt;This scheme is not considered to be a secure method of user
authentication unless used in conjunction with some external secure
system such as TLS (Transport Layer Security, [RFC5246]), as the
user-id and password are passed over the network as cleartext.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; The 'Basic' HTTP Authentication Scheme in &lt;cite&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;RFC 7617&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;HTTP Basic auth issue&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Insecurity issue&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Password is sent in base64 encoding&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Password can be converted to plaintext &lt;em&gt;(solved by using [Secure Sockets Layer])&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Password is sent for each request&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Larger attack window&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The password is cached by the webbrowser&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Can be reused by any other request to the server, e.g. &lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&quot;&gt;CSRF&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The password may be stored permanently in the browser&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)&quot;&gt;CSRF&lt;/a&gt; and it might be stolen by another user on a shared machine&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;We have protected a directory with HTTP Basic Authentication, now
every time we attempt to access that directory, tipically from a
browser, it will ask for username/password credentials.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;RFC 7617 ‚ÄòBasic‚Äô HTTP Authentication Scheme &lt;a href=&quot;https://tools.ietf.org/html/rfc7617&quot;&gt;https://tools.ietf.org/html/rfc7617&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Information Security Answer: &lt;a href=&quot;http://security.stackexchange.com/a/990/66281&quot;&gt;Is BASIC-Auth secure if done over HTTPS?&lt;/a&gt; by &lt;a href=&quot;http://security.stackexchange.com/users/33/avid&quot;&gt;AviD‚ô¶&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_access_authentication&quot;&gt;https://en.wikipedia.org/wiki/Basic_access_authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 07 Jan 2017 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/protect-web-directories-with-http-basic-authentication-in-apache-server/</link>
        <guid isPermaLink="true">http://simpleit.rocks/protect-web-directories-with-http-basic-authentication-in-apache-server/</guid>
        
        
        <category>docs</category>
        
        <category>web</category>
        
        <category>servers</category>
        
        <category>apache</category>
        
      </item>
    
      <item>
        <title>Flask Overview</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Flask is one of the most popular web frameworks in Github. This is an
overview of its main concepts to get started quickly.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://flask.pocoo.org/&quot;&gt;
  &lt;p&gt;Flask is a microframework for Python based on Werkzeug, Jinja 2 and
good intentions.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Slogan at &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask homepage&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;flask-script&quot;&gt;Flask script&lt;/h2&gt;

&lt;p&gt;Flask, like most modern frameworks, has its own command &lt;code class=&quot;highlighter-rouge&quot;&gt;flask&lt;/code&gt; to
perform tasks.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask --help&lt;/kbd&gt;
Usage: flask [OPTIONS] COMMAND [ARGS]...

  This shell command acts as general utility script for Flask applications.

  It loads the application configured (through the FLASK_APP environment
  variable) and then provides commands either provided by the application or
  Flask itself.

  The most useful commands are the &quot;run&quot; and &quot;shell&quot; command.

  Example usage:

    $ export FLASK_APP=hello.py
    $ export FLASK_DEBUG=1
    $ flask run

Options:
  --version  Show the flask version
  --help     Show this message and exit.

Commands:
  run    Runs a development server.
  shell  Runs a shell in the app context.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;development-server&quot;&gt;Development server&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;flask&lt;/code&gt; command depends on the &lt;code class=&quot;highlighter-rouge&quot;&gt;FLASK_APP&lt;/code&gt; environment
variable to know which app to work on, we start specifying this with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; command, then if we run the flask development server it
knows which file to refer to:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export FLASK_APP=hello.py&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask run&lt;/kbd&gt;
 * Running on http://127.0.0.1:5000/
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;reload-server-when-code-changes&quot;&gt;Reload server when code changes&lt;/h3&gt;

&lt;p&gt;There is a special debug mode handled by the &lt;code class=&quot;highlighter-rouge&quot;&gt;FLASK_DEBUG&lt;/code&gt; environment
variable that allows to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reload the server automatically each time the code changes&lt;/li&gt;
  &lt;li&gt;output debugging information on errors&lt;/li&gt;
&lt;/ul&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export FLASK_DEBUG=1&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flask run&lt;/kbd&gt;
 * Forcing debug mode on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger pin code: 292-824-230
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;routing&quot;&gt;Routing&lt;/h2&gt;

&lt;p&gt;Routing is done binding functions with URLs, using the &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&quot;&gt;route()&lt;/a&gt;
decorator.&lt;/p&gt;

&lt;p&gt;For example, the URL &lt;code class=&quot;highlighter-rouge&quot;&gt;/hello-world&lt;/code&gt; would run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello()&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/hello-world'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dynamic-urls&quot;&gt;Dynamic URLs&lt;/h3&gt;

&lt;p&gt;Flask URLs can also handle variables specifying them like
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;variable_name&amp;gt;&lt;/code&gt; or more precisely using &lt;em&gt;converters&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;converter:variable_name&amp;gt;&lt;/code&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;'/post/&amp;lt;int:post_id&amp;gt;'&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@app.route('/user/&amp;lt;username&amp;gt;')
def show_user_profile(username):
    # show the user profile for that user
    return 'User %s' % username
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;reverse-urls&quot;&gt;Reverse URLs&lt;/h3&gt;

&lt;p&gt;Generating URLs knowing the function name is also possible
with &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.url_for&quot;&gt;url_for&lt;/a&gt;
like:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;python&lt;/kbd&gt;
Python 3.5.2+ (default, Sep 22 2016, 12:18:14) 
[GCC 6.2.0 20160927] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;from flask import Flask, url_for&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;app = Flask(__name__)&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;@app.route('/login')&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;def login(): pass&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt; &lt;kbd&gt;with app.test_request_context():&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;    print(url_for('login', next='/'))&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;... &lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
/login?next=%2F
&lt;span class=&quot;shell-prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.test_request_context&quot;&gt;test_request_context()&lt;/a&gt; method
tells Flask to behave like handling a request, even though
we are using a Python shell.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@app.route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_request_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;basic-project-structure&quot;&gt;Basic project structure&lt;/h2&gt;

&lt;p&gt;Flask applications are recommended to be installed and run as Python
packages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/myproject
    /myproject
		__init__.py  ## make the project a package
		myproject.py ## application module
		schema.sql   ## SQLite3 database
        /static      ## static files like js and css
        /templates   ## jinja2 templates
	/tests
		test_myproject.py
	setup.py     ## Setuptools packaging
    MANIFEST.in
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Official docs &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;http://flask.pocoo.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Routing &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&quot;&gt;http://flask.pocoo.org/docs/0.12/api/#flask.Flask.route&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Tutorial folder &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/tutorial/folders/#tutorial-folders&quot;&gt;http://flask.pocoo.org/docs/0.12/tutorial/folders/#tutorial-folders&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/flask-overview-notes/</link>
        <guid isPermaLink="true">http://simpleit.rocks/flask-overview-notes/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Colors Palettes For Web Design</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Websites to choose the right color scheme for your web design:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Coolors &lt;a href=&quot;https://coolors.co/browser/best/1&quot;&gt;https://coolors.co/browser/best/1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Adobe Color CC &lt;a href=&quot;https://color.adobe.com/it/explore/most-popular/?time=all&quot;&gt;https://color.adobe.com/it/explore/most-popular/?time=all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/colors-palettes-for-web-design/</link>
        <guid isPermaLink="true">http://simpleit.rocks/colors-palettes-for-web-design/</guid>
        
        
        <category>docs</category>
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Shell Redirect Output And Errors To The Null Device In Bash</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;In shell scripting, you often want to avoid printing error messages to
the console or discard any possible output the script could
generate. Capturing program output can be done with &lt;em&gt;I/O Redirection&lt;/em&gt;
in Linux.&lt;/p&gt;

&lt;h2 id=&quot;concepts&quot;&gt;Concepts&lt;/h2&gt;

&lt;p&gt;In Linux, everything is a file, even data streams and devices are
treated like ordinary files.&lt;/p&gt;

&lt;p&gt;There are always three default files open:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;stdin&lt;/dt&gt;
  &lt;dd&gt;the keyboard&lt;/dd&gt;
  &lt;dt&gt;stdout&lt;/dt&gt;
  &lt;dd&gt;the screen&lt;/dd&gt;
  &lt;dt&gt;stderr&lt;/dt&gt;
  &lt;dd&gt;error messages output to the screen&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Output from these files can be captured and sent as input to another
file, command, program or script. This is called &lt;strong&gt;redirection&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;How do you choose what file to handle? With &lt;strong&gt;file descriptors&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;file-descriptors&quot;&gt;File descriptors&lt;/h3&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://www.tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17894&quot;&gt;
  &lt;p&gt;A file descriptor is simply a number that the operating system
assigns to an open file to keep track of it. Consider it a
simplified type of file pointer. It is analogous to a file handle in
C.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Chapter 20. I/O Redirection in &lt;a href=&quot;http://www.tldp.org/LDP/abs/html/io-redirection.html#FTN.AEN17894&quot;&gt;Advanced Bash-Scripting Guide&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Kowing the &lt;em&gt;file descriptors&lt;/em&gt; of each file, we can select with which
one we want to work and process redirection between them.&lt;/p&gt;

&lt;p&gt;The file descriptors for our open files are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;stdin: 0&lt;/li&gt;
  &lt;li&gt;stdout: 1&lt;/li&gt;
  &lt;li&gt;stderr: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;M&amp;gt;N&lt;/code&gt; in each command to redirect the file descriptor
&lt;strong&gt;M&lt;/strong&gt; to &lt;strong&gt;N&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;: file descriptor, which defaults to 1, if not explicitly set.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt; can be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;N&lt;/strong&gt;: filename,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&amp;amp;N&lt;/strong&gt;: another file descriptor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;null-device&quot;&gt;Null device&lt;/h3&gt;

&lt;p&gt;Linux has a special device file that discards all data written to
it. In Linux this device is &lt;strong&gt;/dev/null&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;redirect-to-the-null-device&quot;&gt;Redirect to the null device.&lt;/h2&gt;

&lt;p&gt;The way to discard commands output and error messages is to redirect
them to the &lt;em&gt;null device&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This can be done explicitely redirecting both output and/or errors in
many ways:&lt;/p&gt;

&lt;p&gt;Redirect stdout to the null device:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirect stderr to the null device&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirect both stdout and stderr to the null device&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirect stderr to the same file of stdout&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;Let‚Äôs see a simple example with the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; command:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls &amp;gt;/dev/null&lt;/kbd&gt;

&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;stdout file descriptor isn‚Äôt present so it defaults to 1, any error
would be echoed to the screen.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls -error 1&amp;gt;/dev/null&lt;/kbd&gt;
ls: invalid option -- 'e'
Try 'ls --help' for more information.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;we only redirect &lt;em&gt;stdout&lt;/em&gt; but we still see the error generated by the
command.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls -error 2&amp;gt;/dev/null&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;we produce an error with &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; but redirects the error output to the
null device, so we don‚Äôt see any output in the screen.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls -error &amp;amp;&amp;gt;/dev/null&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;ls &amp;amp;&amp;gt;/dev/null&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;we avoid outputting errors and the standard command output.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Understanding &lt;em&gt;file descriptors&lt;/em&gt; is key to handle commands output and
errors.&lt;/p&gt;

&lt;p&gt;This is a common practice to avoid outputting anything in &lt;em&gt;cronjobs&lt;/em&gt;
where the output would be sent to the users email.&lt;/p&gt;

&lt;p&gt;Additionally, it is very useful to work with bash redirection not only
to the null device.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tldp.org/LDP/abs/html/io-redirection.html&quot;&gt;http://www.tldp.org/LDP/abs/html/io-redirection.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Null_device&quot;&gt;https://en.wikipedia.org/wiki/Null_device&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_streams&quot;&gt;https://en.wikipedia.org/wiki/Standard_streams&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Device_file&quot;&gt;https://en.wikipedia.org/wiki/Device_file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/shell-redirect-output-and-errors-to-the-null-device-in-bash/</link>
        <guid isPermaLink="true">http://simpleit.rocks/shell-redirect-output-and-errors-to-the-null-device-in-bash/</guid>
        
        <category>bash</category>
        
        <category>linux</category>
        
        <category>redirection</category>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Prevent Running Of Duplicate Cron Jobs</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;When you set up a cronjob you often want no more than one copy running
at a time, so you need to apply a strategy to prevent a cron job from
having multiple running instances when a script takes longer time to
finish.&lt;/p&gt;

&lt;p&gt;This can be done ‚Äúmanually‚Äù with a a shell script that detects a
running instance before executing it again, using &lt;code class=&quot;highlighter-rouge&quot;&gt;pidof&lt;/code&gt;, or you can
take benefit of software that are built to handle this scenario
specifically like &lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;run-once&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;lock-file-approach&quot;&gt;Lock file approach&lt;/h2&gt;

&lt;p&gt;A lock file is an ordinary file that it is created before executing the
script, and removed after the script finishes.&lt;/p&gt;

&lt;p&gt;This way if any other command tries to execute the same script &lt;strong&gt;using
the same lock file&lt;/strong&gt; it will exit or wait until it can execute.&lt;/p&gt;

&lt;h3 id=&quot;using-flock&quot;&gt;Using flock&lt;/h3&gt;

&lt;p&gt;Most Linux distros already comes with
the &lt;a href=&quot;http://man7.org/linux/man-pages/man1/flock.1.html&quot;&gt;flock&lt;/a&gt;
command.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://man7.org/linux/man-pages/man1/flock.1.html&quot;&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; manages locks from within shell scripts or from the command line.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Flock in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/flock.1.html&quot;&gt;User Commands&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;We use &lt;code class=&quot;highlighter-rouge&quot;&gt;flock&lt;/code&gt; to execute the script, specifying explicitly the lock
file to use, and to exit if the script is already running with the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; parameter.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;flock -n /tmp/myfind.lock myscript.sh&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;For example, editing the &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; to execute the command every 5 minutes should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/5 * * * * /usr/bin/flock -n /tmp/ms.lockfile /usr/local/bin/my_script --some-parameter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Every time the script takes longer than 5 minutes to execute, the
&lt;code class=&quot;highlighter-rouge&quot;&gt;cronjob&lt;/code&gt; will fail and leave the original script to finish.&lt;/p&gt;

&lt;h3 id=&quot;using-run-one&quot;&gt;Using run-one&lt;/h3&gt;

&lt;p&gt;In some &lt;em&gt;distros&lt;/em&gt; like &lt;a href=&quot;https://apps.ubuntu.com/cat/applications/run-one&quot;&gt;Ubuntu&lt;/a&gt;, there is also
the &lt;a href=&quot;https://launchpad.net/run-one&quot;&gt;run-one&lt;/a&gt; utility that handles the
lock automatically.&lt;/p&gt;

&lt;p&gt;Example crontab with &lt;code class=&quot;highlighter-rouge&quot;&gt;run-one&lt;/code&gt; for the previous script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*/5 * * * *   run-one /usr/local/bin/my_script --some-parameter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;These approaches are easier and safer than detecting the running
scripts manually which may lead to other problems.&lt;/p&gt;

&lt;p&gt;Not thinking what could happen if a duplicate running instance of a
cronjob appears can lead to several problems that should not be
overlooked and handled accordingly when defining them.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Crontab &lt;a href=&quot;http://man7.org/linux/man-pages/man5/crontab.5.html&quot;&gt;http://man7.org/linux/man-pages/man5/crontab.5.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://serverfault.com/q/82857/135885&quot;&gt;Prevent duplicate cron jobs running&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/File_locking&quot;&gt;File locking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 08 Dec 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/prevent-running-of-duplicate-cron-jobs/</link>
        <guid isPermaLink="true">http://simpleit.rocks/prevent-running-of-duplicate-cron-jobs/</guid>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>Delete All Backup Files Recursively In Bash</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The most popular *nix editors, &lt;a href=&quot;/docs/lisp/emacs/&quot;&gt;Emacs&lt;/a&gt; and Vim automatically generate
backup files of each file you edit, this is because they both has the
auto-save feature so you don‚Äôt lose your work if anything happens.&lt;/p&gt;

&lt;p&gt;Vim backup files has &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; at the end of the file as it was before you
edited it: &lt;code class=&quot;highlighter-rouge&quot;&gt;foo.bar~&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Emacs backup files are surrounded by &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; in their filenames: &lt;code class=&quot;highlighter-rouge&quot;&gt;#foo.bar#&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will show the commands to remove the files of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;*~&lt;/code&gt; so they
should be adjusted to work with &lt;code class=&quot;highlighter-rouge&quot;&gt;#*#&lt;/code&gt; files easily.&lt;/p&gt;

&lt;h2 id=&quot;visualize-the-files-to-remove&quot;&gt;Visualize the files to remove&lt;/h2&gt;

&lt;p&gt;Removing files is always a sensitive task, you should always check
what files the command you execute will remove.&lt;/p&gt;

&lt;p&gt;To see what files the command affects we use &lt;code class=&quot;highlighter-rouge&quot;&gt;find -name &quot;*~&quot; -print&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;
  &lt;p&gt;-print
        print the full file name on the standard output,
        followed by a newline.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find command _man_ page in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;General Commands Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -print&lt;/kbd&gt;
./_includes/lang_nav.html~
./_includes/head.html~
./_includes/share_buttons.html~
./_includes/adsense_content_1.html~
./_includes/adsense_content_2.html~
./_includes/adsense_side.html~
./_sass/cached/_main.scss~
./_sass/cached/_share_buttons.scss~
./_sass/cached.scss~
./_layouts/default.html~
./index.md~
./trans/hola.md~
./trans/es.md~
./trans/index.md~
./README.md~
./assets/main.scss~
./Gemfile~
./_config.yml~
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;If you need further information about each file you can also specify
set a custom command, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l &amp;lt;file&amp;gt;&lt;/code&gt; with: &lt;code class=&quot;highlighter-rouge&quot;&gt;find -name &quot;*~&quot; -exec
ls -l {} \;&lt;/code&gt;&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -exec ls -l {} \;&lt;/kbd&gt;
-rw-rw-r-- 1 marcanuy marcanuy 272 nov 22 23:21 ./_includes/lang_nav.html~
-rw-rw-r-- 1 marcanuy marcanuy 1861 nov 22 23:21 ./_includes/head.html~
-rw-rw-r-- 1 marcanuy marcanuy 2063 nov 22 15:07 ./_includes/share_buttons.html~
-rw-rw-r-- 1 marcanuy marcanuy 543 nov 27 11:02 ./_includes/adsense_content_1.html~
-rw-rw-r-- 1 marcanuy marcanuy 543 nov 27 11:07 ./_includes/adsense_content_2.html~
-rw-rw-r-- 1 marcanuy marcanuy 538 nov 27 10:55 ./_includes/adsense_side.html~
-rw-rw-r-- 1 marcanuy marcanuy 1143 nov 22 14:08 ./_sass/cached/_main.scss~
-rw-rw-r-- 1 marcanuy marcanuy 331 nov 22 14:08 ./_sass/cached/_share_buttons.scss~
-rw-rw-r-- 1 marcanuy marcanuy 46 nov 22 07:44 ./_sass/cached.scss~
-rw-rw-r-- 1 marcanuy marcanuy 3324 nov 26 18:06 ./_layouts/default.html~
-rw-r--r-- 1 marcanuy marcanuy 2569 nov 27 01:51 ./index.md~
-rw-rw-r-- 1 marcanuy marcanuy 34 nov 26 16:20 ./trans/hola.md~
-rw-rw-r-- 1 marcanuy marcanuy 2689 nov 27 01:45 ./trans/es.md~
-rw-rw-r-- 1 marcanuy marcanuy 2256 nov 22 18:09 ./trans/index.md~
-rw-rw-r-- 1 marcanuy marcanuy 835 nov 22 18:25 ./README.md~
-rw-r--r-- 1 marcanuy marcanuy 947 nov 21 19:34 ./assets/main.scss~
-rw-rw-r-- 1 marcanuy marcanuy 811 nov 21 19:53 ./Gemfile~
-rw-r--r-- 1 marcanuy marcanuy 290 nov 22 13:36 ./_config.yml~
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;remove-files&quot;&gt;Remove files&lt;/h2&gt;

&lt;p&gt;After making sure the above files we want to delete, we add the
&lt;code class=&quot;highlighter-rouge&quot;&gt;-delete&lt;/code&gt; flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;find -name &quot;*~&quot; -print -delete&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -print -delete&lt;/kbd&gt;
./_includes/lang_nav.html~
./_includes/head.html~
./_includes/share_buttons.html~
./_includes/adsense_content_1.html~
./_includes/adsense_content_2.html~
./_includes/adsense_side.html~
./_sass/cached/_main.scss~
./_sass/cached/_share_buttons.scss~
./_sass/cached.scss~
./_layouts/default.html~
./index.md~
./trans/hola.md~
./trans/es.md~
./trans/index.md~
./README.md~
./assets/main.scss~
./Gemfile~
./_config.yml~
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -print&lt;/kbd&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;important-notes&quot;&gt;Important notes&lt;/h3&gt;

&lt;h4 id=&quot;find-parameters-order-matter&quot;&gt;Find parameters order matter&lt;/h4&gt;

&lt;blockquote class=&quot;blockquote alert alert-danger&quot; cite=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;
  &lt;p&gt;Warnings: Don‚Äôt forget that the find command line is evaluated as an
expression, so putting -delete first will make find try to delete
everything below the starting points you specified. When testing a
find command line that you later intend to use with -delete, you
should explicitly specify -depth in order to avoid later surprises.
Because -delete implies -depth, you cannot usefully use -prune and
-delete together.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt; Find command in &lt;a href=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;General Commands Manual&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is: &lt;strong&gt;using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-delete&lt;/code&gt; switch before &lt;code class=&quot;highlighter-rouge&quot;&gt;-name&lt;/code&gt; deletes all the
file tree recursively&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;safer-find-command&quot;&gt;Safer find command&lt;/h4&gt;

&lt;p&gt;If your version of &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; doesn‚Äôt have the &lt;code class=&quot;highlighter-rouge&quot;&gt;-delete&lt;/code&gt; switch, then you
can execute &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; on each matched file with &lt;code class=&quot;highlighter-rouge&quot;&gt;-exec rm {} \;&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find -name &quot;*~&quot; -exec rm {} \;&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;alternative-using-git&quot;&gt;Alternative using git&lt;/h2&gt;

&lt;p&gt;If you are working in a &lt;a href=&quot;/docs/git/&quot;&gt;git&lt;/a&gt; repo, then
there is a high chance you want to delete all the untracked local
files from your current branch, that would delete all the
automatically created backup files and possibly some other files you
don‚Äôt want to be there.&lt;/p&gt;

&lt;p&gt;If this is the case then you can
use &lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git clean&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://git-scm.com/docs/git-clean&quot;&gt;
  &lt;p&gt;Cleans the working tree by recursively removing files that are not
under version control, starting from the current directory.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt;Documentation of &lt;cite&gt;&lt;a href=&quot;https://git-scm.com/docs/git-clean&quot;&gt;git-clean command&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git clean -n&lt;/kbd&gt;
Would remove _data/people.yml~
Would remove _includes/author.html~
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;git clean&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Parameters used:&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;-n
‚Äìdry-run
Don‚Äôt actually remove anything, just show what would be done.&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;-i
‚Äìinteractive
Show what would be done and clean files interactively. See ‚ÄúInteractive mode‚Äù for details.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;This is a simple way for removing backup files from Emacs and
Vim. Special care should be taken when using the &lt;code class=&quot;highlighter-rouge&quot;&gt;delete&lt;/code&gt; action of
the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command, using it incorrectly could lead to deleting all
the files recursively.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Find command manual &lt;a href=&quot;http://man7.org/linux/man-pages/man1/find.1.html&quot;&gt;http://man7.org/linux/man-pages/man1/find.1.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Emacs AutoSave &lt;a href=&quot;https://www.emacswiki.org/emacs/AutoSave&quot;&gt;https://www.emacswiki.org/emacs/AutoSave&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 28 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://simpleit.rocks/delete-all-backup-files-recursively-in-bash/</link>
        <guid isPermaLink="true">http://simpleit.rocks/delete-all-backup-files-recursively-in-bash/</guid>
        
        <category>emacs</category>
        
        <category>vim</category>
        
        <category>bash</category>
        
        <category>backups</category>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
        <category>shell</category>
        
      </item>
    
  </channel>
</rss>
