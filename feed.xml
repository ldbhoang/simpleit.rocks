<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Simple IT 🤘 Rocks</title>
    <description>Clutter-free software concepts. Written on the go.
</description>
    <link>https://simpleit.rocks/</link>
    <atom:link href="https://simpleit.rocks/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 09 Mar 2017 20:40:28 +0000</pubDate>
    <lastBuildDate>Thu, 09 Mar 2017 20:40:28 +0000</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>How To Add Bootstrap 4 To Jekyll The Right Way</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The real power of Bootstrap is to use and redefine its variables in
our custom designs, that means, we should not simply add Bootstrap’s
javascript and &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; stylesheets to use its components, we need to
change them and not making all the web look boringly the same.&lt;/p&gt;

&lt;p&gt;This is a guide to make it easy to use Bootstrap 4 with a Jekyll
website and make it easy to customize it using its variables and
defining new ones.&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Jekyll provides built-in support for &lt;em&gt;syntactically awesome
stylesheets&lt;/em&gt; (&lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Sass is a &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; extension language, it provides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variables&lt;/li&gt;
  &lt;li&gt;Nesting elements
    &lt;ul&gt;
      &lt;li&gt;Loops&lt;/li&gt;
      &lt;li&gt;Arguments&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Selector inheritance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It consists of two syntaxes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the original, indented, syntax uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sass&lt;/code&gt; extension.&lt;/li&gt;
  &lt;li&gt;the newer syntax, more similar to &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt;, uses &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; extension.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make Jekyll process these SASS files, we need to create files with
the proper extension name (&lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.sass&lt;/code&gt;) and start the file
contents with two lines of triple dashes.&lt;/p&gt;

&lt;p&gt;A file named &lt;code class=&quot;highlighter-rouge&quot;&gt;css/styles.scss&lt;/code&gt; will be rendered like &lt;code class=&quot;highlighter-rouge&quot;&gt;css/styles.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As Bootstrap switched from &lt;code class=&quot;highlighter-rouge&quot;&gt;Less&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;Sass&lt;/code&gt;&lt;sup id=&quot;fnref:bs-blog&quot;&gt;&lt;a href=&quot;#fn:bs-blog&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; now we can use
it directly without relying in parallel projects like &lt;a href=&quot;https://github.com/twbs/bootstrap-sass&quot;&gt;bootstrap-sass&lt;/a&gt;
used with Bootstrap 3.&lt;/p&gt;

&lt;h2 id=&quot;installing-bootstrap-4&quot;&gt;Installing Bootstrap 4&lt;/h2&gt;

&lt;p&gt;We will be using the package manager &lt;a href=&quot;https://bower.io&quot;&gt;Bower&lt;/a&gt; to install Bootstrap. At
our Jekyll website root folder we use the &lt;kbd&gt;bower install&lt;/kbd&gt;
command. In this case I will be using &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap#v4.0.0-alpha.6&lt;/code&gt; but
you can find the latest one
at
&lt;a href=&quot;https://v4-alpha.getbootstrap.com/getting-started/download/#bower&quot;&gt;https://v4-alpha.getbootstrap.com/getting-started/download/#bower&lt;/a&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;bower install bootstrap#v4.0.0-alpha.6&lt;/kbd&gt;
bower bootstrap#v4.0.0-alpha.6  cached https://github.com/twbs/bootstrap.git#4.0.0-alpha.6
bower bootstrap#v4.0.0-alpha.6         validate 4.0.0-alpha.6 against https://github.com/twbs/bootstrap.git#v4.0.0-alpha.6
bower jquery#&amp;gt;=1.9.1                     cached https://github.com/jquery/jquery-dist.git#3.1.1
bower jquery#&amp;gt;=1.9.1                   validate 3.1.1 against https://github.com/jquery/jquery-dist.git#&amp;gt;=1.9.1
bower tether#^1.4.0                      cached https://github.com/HubSpot/tether.git#1.4.0
bower tether#^1.4.0                    validate 1.4.0 against https://github.com/HubSpot/tether.git#^1.4.0
bower bootstrap#v4.0.0-alpha.6          install bootstrap#4.0.0-alpha.6
bower jquery#&amp;gt;=1.9.1                    install jquery#3.1.1
bower tether#^1.4.0                     install tether#1.4.0

bootstrap#4.0.0-alpha.6 bower_components/bootstrap
├── jquery#3.1.1
└── tether#1.4.0

jquery#3.1.1 bower_components/jquery

tether#1.4.0 bower_components/tether
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;adding-new-sass-load-paths&quot;&gt;Adding new Sass load paths&lt;/h2&gt;

&lt;p&gt;We need to add this new path so Jekyll can process its Sass
files.&lt;/p&gt;

&lt;p&gt;Jekyll will look at the folder specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;sass_dir&lt;/code&gt;
configuration key (&lt;code class=&quot;highlighter-rouge&quot;&gt;/_sass&lt;/code&gt; by default), but it also supports extending
it, so it will process other folders too.&lt;/p&gt;

&lt;p&gt;Instead of setting a custom sass folder with:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;sass_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_sass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;load-paths&lt;/code&gt;&lt;sup id=&quot;fnref:load-paths&quot;&gt;&lt;a href=&quot;#fn:load-paths&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; key in &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; to add more paths:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;load_paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;_sass&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bower_components&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;load_paths&lt;/code&gt; only works in safe mode&lt;sup id=&quot;fnref:safe-mode&quot;&gt;&lt;a href=&quot;#fn:safe-mode&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;add-javascript&quot;&gt;Add javascript&lt;/h2&gt;

&lt;p&gt;Add Bootstrap core JavaScript, JQuery and Tether&lt;sup id=&quot;fnref:tether&quot;&gt;&lt;a href=&quot;#fn:tether&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; (already installed when
installing Bootstrap) at the end of the document so the pages load
faster, just before the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; HTML tag.&lt;/p&gt;

&lt;p&gt;We add them in the default layout at &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt; or in
&lt;code class=&quot;highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
...
&amp;lt;script src=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/bower_components/jquery/dist/jquery.min.js'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.baseurl&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/bower_components/tether/dist/js/tether.min.js'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.baseurl&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/bower_components/bootstrap/dist/js/bootstrap.min.js'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prepend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;site.baseurl&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;import-bootstrap-and-use-sass-variables&quot;&gt;Import Bootstrap and use Sass variables&lt;/h2&gt;

&lt;h3 id=&quot;create-variables-sass-partial&quot;&gt;Create variables Sass partial&lt;/h3&gt;

&lt;p&gt;To be able to define new variables and reuse the ones defined in
Bootstrap, we create a new partial Sass file &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/_variables.scss&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We define our variables&lt;/li&gt;
  &lt;li&gt;“Overwrite” the ones we want from Bootstrap
&lt;code class=&quot;highlighter-rouge&quot;&gt;bower_components/bootstrap/scss/_variables.scss&lt;/code&gt; before loading them
and then&lt;/li&gt;
  &lt;li&gt;we import the Bootstrap variables.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;All the variables defined in Bootstrap 4 have the &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!default&lt;/code&gt;&lt;/strong&gt;&lt;sup id=&quot;fnref:scss_default&quot;&gt;&lt;a href=&quot;#fn:scss_default&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;
property at the end.
When Jekyll process each Scss file, &lt;strong&gt;it only defines the variables that do not
have been assigned any value yet&lt;/strong&gt;, so we can define Bootstrap’s
variables before Bootstrap itself define them. It is important to do
this &lt;strong&gt;before importing the variables&lt;/strong&gt; because there are many of them
depending on each other to calculate &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; properties values.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;_sass/_variables.scss&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$custom-font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;../bower_components/bootstrap/scss/variables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;import-variables-from-main-sass-file&quot;&gt;Import variables from main Sass file&lt;/h3&gt;

&lt;p&gt;After we have our variables, we import them from our main style sheet:&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;css/styles.scss&lt;/code&gt; we import them and then work with our styles,
using the above variables:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;variables&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap/scss/bootstrap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$custom-font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p class=&quot;alert alert-danger&quot;&gt;Don’t miss the triple dashes at the beginning of the file to ensure
Jekyll reads the file to be transformed into &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; later&lt;/p&gt;

&lt;h2 id=&quot;add-css-to-layout&quot;&gt;Add css to layout&lt;/h2&gt;

&lt;p&gt;After we have our &lt;code class=&quot;highlighter-rouge&quot;&gt;css/styles.scss&lt;/code&gt;, Jekyll will process it and
generate the final &lt;abbr title=&quot;Cascading Style Sheets&quot;&gt;CSS&lt;/abbr&gt; file: &lt;code class=&quot;highlighter-rouge&quot;&gt;css/style.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is the path we need to add to our layout, in the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
section of &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts/default.html&lt;/code&gt; we include the css: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;link
rel=&quot;stylesheet&quot; href=&quot;/css/main.css&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- site css --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/css/styles.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;all-together&quot;&gt;All together&lt;/h2&gt;

&lt;p&gt;This is the basic flow Jekyll follows processing these Scss files to
generate &lt;code class=&quot;highlighter-rouge&quot;&gt;css/styles.css&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
        STYLESSCSS[&quot;Jekyll reads &lt;strong&gt;/css/styles.scss&lt;/strong&gt;&quot;]--&amp;gt;partials{&quot;imports Sass partials&quot;}
        partials--&amp;gt; |&quot;import variables&quot;|VARS
        partials--&amp;gt; |&quot;import bootstrap/scss/bootstrap&quot;|BS_SCSS
        VARS[&quot;/_sass/_variables.scss&quot;]--&amp;gt;BS_VARIABLES
        BS_VARIABLES[&quot;@import '../bower_components/bootstrap/scss/variables';&quot;]--&amp;gt;STYLESCSS
        BS_SCSS[&quot;/bower_components/bootstrap/scss/bootstrap.scss&quot;]--&amp;gt;STYLESCSS
        STYLESCSS[&quot;Generates /css/style.css&quot;]
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;When we will our site, Jekyll will process the &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss&lt;/code&gt; files with our
custom variables and we will have them in our &lt;code class=&quot;highlighter-rouge&quot;&gt;css/styles.css&lt;/code&gt;. In
this example its content starts with the Bootstrap code and ends with
our custom &lt;code class=&quot;highlighter-rouge&quot;&gt;_styles.scss&lt;/code&gt; processed, looking like:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/*!
 * Bootstrap v4.0.0-alpha.6 (https://getbootstrap.com)
 * Copyright 2011-2017 The Bootstrap Authors
 * Copyright 2011-2017 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;/*! normalize.css v5.0.0 | MIT License | github.com/necolas/normalize.css */&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-ms-text-size-adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;-webkit-text-size-adjust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Sass (stylesheet language) &lt;a href=&quot;https://en.wikipedia.org/wiki/Sass_(stylesheet_language)&quot;&gt;https://en.wikipedia.org/wiki/Sass_(stylesheet_language)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Sass project website &lt;a href=&quot;http://sass-lang.com/&quot;&gt;http://sass-lang.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bootstrap 4 customization &lt;a href=&quot;http://v4-alpha.getbootstrap.com/getting-started/options/&quot;&gt;http://v4-alpha.getbootstrap.com/getting-started/options/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:bs-blog&quot;&gt;

      &lt;p&gt;&lt;a href=&quot;http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/&quot;&gt;http://blog.getbootstrap.com/2015/08/19/bootstrap-4-alpha/&lt;/a&gt;&lt;/p&gt;

      &lt;blockquote&gt;
        &lt;p&gt;Moved from Less to Sass. Bootstrap now compiles faster than ever
thanks to Libsass, and we join an increasingly large community of
Sass developers.&lt;/p&gt;
      &lt;/blockquote&gt;
      &lt;p&gt;&lt;a href=&quot;#fnref:bs-blog&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:load-paths&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/issues/3366&quot;&gt;Issue&lt;/a&gt; referring the code at &lt;a href=&quot;https://github.com/jekyll/jekyll-sass-converter/blob/master/lib/jekyll/converters/scss.rb#L77&quot;&gt;https://github.com/jekyll/jekyll-sass-converter/blob/master/lib/jekyll/converters/scss.rb#L77&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:load-paths&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:safe-mode&quot;&gt;

      &lt;p&gt;Safe mode disables custom plugins, and ignores symbolic links.&amp;nbsp;&lt;a href=&quot;#fnref:safe-mode&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:tether&quot;&gt;

      &lt;p&gt;&lt;a href=&quot;http://github.hubspot.com/tether/&quot;&gt;Tether&lt;/a&gt; is a small,
focused JavaScript library for defining and managing the position of
user interface (UI) elements in relation to one another on a web page
used by Bootstrap&amp;nbsp;&lt;a href=&quot;#fnref:tether&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scss_default&quot;&gt;

      &lt;p&gt;SASS Variable Defaults: !default &lt;a href=&quot;http://www.sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_defaults_&quot;&gt;http://www.sass-lang.com/documentation/file.SASS_REFERENCE.html#variable_defaults_&lt;/a&gt;&lt;/p&gt;

      &lt;blockquote&gt;
        &lt;p&gt;You can assign to variables if they aren’t already assigned by adding the !default flag to the end of the value. This means that if the variable has already been assigned to, it won’t be re-assigned, but if it doesn’t have a value yet, it will be given one.&lt;/p&gt;
      &lt;/blockquote&gt;

      &lt;blockquote&gt;
        &lt;p&gt;For example:&lt;/p&gt;
      &lt;/blockquote&gt;

      &lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;First content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Second content?&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$new_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;First time reference&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;#main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;new-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$new_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;

      &lt;blockquote&gt;
        &lt;p&gt;is compiled to:&lt;/p&gt;
      &lt;/blockquote&gt;

      &lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;First content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;new-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;First time reference&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;p&gt;&lt;a href=&quot;#fnref:scss_default&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 27 Feb 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/how-to-add-bootstrap-4-to-jekyll-the-right-way/</link>
        <guid isPermaLink="true">https://simpleit.rocks/how-to-add-bootstrap-4-to-jekyll-the-right-way/</guid>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
        <category>tutorials</category>
        
      </item>
    
      <item>
        <title>Adding A Twitter Sign In Button To A Website Flow Summary</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Twitter uses &lt;a href=&quot;https://oauth.net/&quot;&gt;OAuth&lt;/a&gt;, an open protocol to allow secure authorization in
a standard method from applications, to provide authorized access to its API.&lt;/p&gt;

&lt;p&gt;This is a summary of the process described in &lt;a href=&quot;https://dev.twitter.com/oauth&quot;&gt;https://dev.twitter.com/oauth&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;twitter-oauth&quot;&gt;Twitter oauth&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.twitter.com/oauth&quot;&gt;Twitter&lt;/a&gt;
uses &lt;a href=&quot;https://oauth.net/&quot;&gt;OAuth&lt;/a&gt; 1.0A so users are not required to
share their passwords with third party applications.&lt;/p&gt;

&lt;p&gt;In OAuth 1.0A there are two forms of authentication:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User authentication
    &lt;ul&gt;
      &lt;li&gt;is a form of authentication where your application makes API requests on end-users behalf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Application-only authentication
    &lt;ul&gt;
      &lt;li&gt;is a form of authentication where your application makes API requests on its own behalf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;To make authorized calls to Twitter’s APIs, your application must
first obtain an OAuth access token on behalf of a Twitter user (or,
you could issue Application-only authenticated requests, when user
context is not required).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To have a &lt;a href=&quot;https://dev.twitter.com/web/sign-in/implementing&quot;&gt;sign-in button&lt;/a&gt; tokens are obtained like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Obtain a &lt;strong&gt;request token&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token_secret&lt;/code&gt;)
also sending an &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_callback&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;obtain a &lt;strong&gt;request token&lt;/strong&gt; by sending a signed message
to
&lt;a href=&quot;https://api.twitter.com/oauth/request_token&quot;&gt;https://api.twitter.com/oauth/request_token&lt;/a&gt; with
an &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_callback&lt;/code&gt; parameter indicating where the user will be
redirected in &lt;em&gt;Step 2&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;Check that the HTTP status of the response is 200 (success)&lt;/li&gt;
      &lt;li&gt;parameters returned:
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token&lt;/code&gt; (store for next step)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token_secret&lt;/code&gt; (store for next step)&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_callback_confirmed&lt;/code&gt; (verify it is true)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Redirect the user to Twitter including the &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;We need to direct the user to Twitter to complete sign in.&lt;/li&gt;
      &lt;li&gt;Redirect user with a GET
to
&lt;a href=&quot;https://dev.twitter.com/oauth/reference/get/oauth/authenticate&quot;&gt;https://api.twitter.com/oauth/authenticate&lt;/a&gt;
including the &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token&lt;/code&gt; parameter from &lt;em&gt;Step 1&lt;/em&gt;. (Probably
an HTTP 302 redirect)
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GET oauth Authenticate&lt;/code&gt; method differs from &lt;code class=&quot;highlighter-rouge&quot;&gt;GET oauth / authorize&lt;/code&gt;
in that if the user has already granted the application
permission, the redirect will occur without the user having to
re-approve the application.
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;To realize this behavior, you must enable the Use Sign in
with Twitter setting on your application record.&lt;/strong&gt;
                &lt;ul&gt;
                  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Allow this application to be used to Sign in with Twitter&lt;/code&gt;
checkbox&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;The sign in endpoint can behave in three different ways
depending on this status:
            &lt;ul&gt;
              &lt;li&gt;&lt;strong&gt;Signed in and approved&lt;/strong&gt;
                &lt;ul&gt;
                  &lt;li&gt;If the user:
                    &lt;ul&gt;
                      &lt;li&gt;is signed in on twitter.com and&lt;/li&gt;
                      &lt;li&gt;has already approved the calling application&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;then they will be immediately authenticated and returned to
the callback URL with a valid OAuth &lt;em&gt;request token&lt;/em&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;Signed in but not approved&lt;/strong&gt;
                &lt;ul&gt;
                  &lt;li&gt;If the user:
                    &lt;ul&gt;
                      &lt;li&gt;is signed in to twitter.com &lt;strong&gt;but&lt;/strong&gt;&lt;/li&gt;
                      &lt;li&gt;has not approved the calling application&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;then:
                    &lt;ul&gt;
                      &lt;li&gt;a request to share access with the calling application
will be shown&lt;/li&gt;
                      &lt;li&gt;After accepting the authorization request
                        &lt;ul&gt;
                          &lt;li&gt;the user will be redirected to the callback URL with a
valid OAuth &lt;em&gt;request token&lt;/em&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;strong&gt;Not signed in&lt;/strong&gt;
                &lt;ul&gt;
                  &lt;li&gt;If the user is not signed in on twitter.com&lt;/li&gt;
                  &lt;li&gt;then they will be prompted
                    &lt;ul&gt;
                      &lt;li&gt;to enter their credentials and&lt;/li&gt;
                      &lt;li&gt;grant access for the application to access their
information on the same screen.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Once signed in,
                    &lt;ul&gt;
                      &lt;li&gt;the user will be returned to the callback URL with a
valid OAuth &lt;em&gt;request token&lt;/em&gt;.&lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Upon a successful authentication, your &lt;strong&gt;callback_url&lt;/strong&gt; would
receive a request containing
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token&lt;/code&gt; and&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_verifier &lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Convert the request token to an access token (Upgrade request token)
    &lt;ul&gt;
      &lt;li&gt;To render the &lt;strong&gt;request token&lt;/strong&gt; into a usable &lt;strong&gt;access token&lt;/strong&gt;:
        &lt;ul&gt;
          &lt;li&gt;your application must make a request to the &lt;code class=&quot;highlighter-rouge&quot;&gt;POST oauth /
access_token&lt;/code&gt;
endpoint
&lt;a href=&quot;https://dev.twitter.com/oauth/reference/post/oauth/access_token&quot;&gt;https://api.twitter.com/oauth/access_token&lt;/a&gt;,
containing the &lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_verifier&lt;/code&gt; value obtained in step 2&lt;/li&gt;
          &lt;li&gt;Twitter generates the &lt;strong&gt;access token&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;Twitter response with
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;oauth_token_secret&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen_name&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;token secret&lt;/code&gt; should be stored and used for future authenticated requests to the Twitter API.&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oauth.net/&quot;&gt;https://oauth.net/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.twitter.com/oauth/overview/faq&quot;&gt;https://dev.twitter.com/oauth/overview/faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/adding-a-twitter-sign-in-button-to-a-website-flow-summary/</link>
        <guid isPermaLink="true">https://simpleit.rocks/adding-a-twitter-sign-in-button-to-a-website-flow-summary/</guid>
        
        
        <category>docs</category>
        
        <category>apis</category>
        
        <category>twitter</category>
        
      </item>
    
      <item>
        <title>Essential Seo Tips And Techniques From Trusted Sources</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This article is a curated list of Search Engine Optimization
techniques from top Search Engines and trusted sources to improve your
search engine presence and design better websites.&lt;/p&gt;

&lt;p&gt;It mainly consists of special clues given in Google blog posts.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2016/09/penguin-is-now-part-of-our-core.html&quot;&gt;
  &lt;p&gt;Google’s algorithms rely on more than 200 unique signals or “clues”
that make it possible to surface what you might be looking
for. These signals include things like the specific words that
appear on websites, the freshness of content, your region and
PageRank.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;facts&quot;&gt;Facts&lt;/h2&gt;

&lt;h3 id=&quot;android&quot;&gt;Android&lt;/h3&gt;

&lt;p&gt;Apps are favored on search results made from Android devices.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2015/04/drive-app-installs-through-app-indexing.html&quot;&gt;
  &lt;p&gt;App Indexing, when indexed content from your app is relevant to a
search done on Google on Android devices, people may start to see app
install buttons for your app in search results. we are starting to use
App Indexing as a ranking signal for all users on Android, regardless
of whether they have your app installed or not.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Lawrence Chang, Product Manager &lt;a href=&quot;https://webmasters.googleblog.com/2015/04/drive-app-installs-through-app-indexing.html&quot;&gt;2015-04-16&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Signed-in users would likely see content from apps they have
installed. (&lt;a href=&quot;https://support.google.com/googleplay/android-developer/answer/6041489?hl=en&quot;&gt;App Indexing&lt;/a&gt; allows
Google to surface this information in search results)&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2015/02/finding-more-mobile-friendly-search.html&quot;&gt;
  &lt;p&gt;Starting today, we will begin to use information from indexed apps
as a factor in ranking for signed-in users who have the app
installed. As a result, we may now surface content from indexed apps
more prominently in search. To find out how to implement App
Indexing, which allows us to surface this information in search
results&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Takaki Makino, Chaesang Jung, and Doantam Phan in Finding more mobile-friendly search results &lt;a href=&quot;https://webmasters.googleblog.com/2015/02/finding-more-mobile-friendly-search.html&quot;&gt;2015-02-26&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;crawling&quot;&gt;Crawling&lt;/h3&gt;

&lt;p&gt;Crawling rate is not a ranking signal.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2017/01/what-crawl-budget-means-for-googlebot.html&quot;&gt;
  &lt;p&gt;Google uses hundreds of signals to rank the results, and while
crawling is necessary for being in the results, it’s not a ranking
signal.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Gary Illyes: Crawling and Indexing teams at What Crawl Budget Means for Googlebot &lt;a href=&quot;https://webmasters.googleblog.com/2017/01/what-crawl-budget-means-for-googlebot.html&quot;&gt;2017-01-16&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;https&quot;&gt;HTTPS&lt;/h3&gt;

&lt;p&gt;HTTPS is a ranking signal and is better than HTTP.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html&quot;&gt;
  &lt;p&gt;over the past few months we’ve been running tests taking into
account whether sites use secure, encrypted connections as a signal in
our search ranking algorithms. We’ve seen positive results, so
we’re starting to use HTTPS as a ranking signal. For now it’s only a
very lightweight signal — affecting fewer than 1% of global queries,
and carrying less weight than other signals such as high-quality
content — while we give webmasters time to switch to HTTPS. But over
time, we may decide to strengthen it, because we’d like to encourage
all website owners to switch from HTTP to HTTPS to keep everyone
safe on the web.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;HTTPS as a ranking signal &lt;a href=&quot;https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html&quot;&gt;2014-08-06&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2015/12/indexing-https-pages-by-default.html&quot;&gt;
  &lt;p&gt;we also started giving a slight ranking boost to HTTPS&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt; Indexing HTTPS pages by default - Zineb Ait Bahajji, WTA, and the Google Security and Indexing teams &lt;a href=&quot;https://webmasters.googleblog.com/2015/12/indexing-https-pages-by-default.html&quot;&gt;2015-12-17&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://www.youtube.com/watch?time_continue=1&amp;amp;v=GMf6FmRus2M&quot;&gt;
  &lt;p&gt;Google potentially use EXIF data from pictures as a ranking factor&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Matt Cutts video &lt;a href=&quot;https://www.youtube.com/watch?time_continue=1&amp;amp;v=GMf6FmRus2M&quot;&gt;2014-02-14&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;inbound-links&quot;&gt;Inbound Links&lt;/h3&gt;

&lt;p&gt;Links from other websites should be gained through:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;merit-based and&lt;/li&gt;
  &lt;li&gt;freely-volunteered&lt;/li&gt;
  &lt;li&gt;relevant to geographic location&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2008/10/good-times-with-inbound-links.html&quot;&gt;
  &lt;p&gt;Inbound links are links from pages on external sites linking back to
your site. Inbound links can bring new users to your site, and when
the links are merit-based and freely-volunteered as an editorial
choice, they’re also one of the positive signals to Google about
your site’s importance. Other signals include things like our
analysis of your site’s content, its relevance to a geographic
location, etc&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Maile Ohye, Developer Programs Tech Lead &lt;a href=&quot;https://webmasters.googleblog.com/2008/10/good-times-with-inbound-links.html&quot;&gt;2008-10-09&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;search-query&quot;&gt;Search Query&lt;/h3&gt;

&lt;p&gt;Search query intent is favored over a mobile friendly site, i.e.: a
non mobile-friendly site with better content than a mobile friendly
one with less relevant content will be preferred.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2016/03/continuing-to-make-web-more-mobile.html&quot;&gt;
  &lt;p&gt;the intent of the search query is still a very strong signal — so
even if a page with high quality content is not mobile-friendly, it
could still rank well if it has great, relevant content.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Continuing to make web more mobile &lt;a href=&quot;https://webmasters.googleblog.com/2016/03/continuing-to-make-web-more-mobile.html&quot;&gt;2016-03-16&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;high-quality-content&quot;&gt;High Quality Content&lt;/h3&gt;

&lt;p&gt;According to &lt;a href=&quot;https://webmasters.googleblog.com/2011/05/more-guidance-on-building-high-quality.html&quot;&gt;this guide from Google High Quality Content is&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Articles with truthful information&lt;/li&gt;
    &lt;li&gt;Articles written by an expert or enthusiast who knows the topic well&lt;/li&gt;
    &lt;li&gt;Avoid having duplicate, overlapping, or redundant articles on the
same or similar topics with slightly different keyword variations&lt;/li&gt;
    &lt;li&gt;Secure enough to give credit card information to the site&lt;/li&gt;
    &lt;li&gt;Avoid spelling, stylistic, or factual errors&lt;/li&gt;
    &lt;li&gt;Topics driven by genuine interests of readers of the site, avoid to
generate content by attempting to guess what might rank well in
search engines&lt;/li&gt;
    &lt;li&gt;Provide articles with original content or information, original reporting, original research, and/or original analysis&lt;/li&gt;
    &lt;li&gt;Provide pages with substantial value when compared to other pages in search results&lt;/li&gt;
    &lt;li&gt;Perform quality control on content&lt;/li&gt;
    &lt;li&gt;Have articles describing both sides of a story&lt;/li&gt;
    &lt;li&gt;Be a recognized authority on articles topics&lt;/li&gt;
    &lt;li&gt;Avoid mass-produced articles to a large number of creators, or
spread across a large network of sites, so that individual pages or
sites don’t get as much attention or care&lt;/li&gt;
    &lt;li&gt;For a health related query, this site should be trusted by users&lt;/li&gt;
    &lt;li&gt;The site should be recognized as an authoritative source when mentioned by name&lt;/li&gt;
    &lt;li&gt;Articles should provide a complete or comprehensive description of the topic&lt;/li&gt;
    &lt;li&gt;Articles should contain insightful analysis or interesting information that is beyond obvious&lt;/li&gt;
    &lt;li&gt;Is this the sort of page you’d want to bookmark, share with a friend, or recommend?&lt;/li&gt;
    &lt;li&gt;Avoid including an excessive amount of ads that distract from or
 interfere with the main content of the article&lt;/li&gt;
    &lt;li&gt;Articles should have the quality to be included in a printed magazine, encyclopedia or book&lt;/li&gt;
    &lt;li&gt;Avoid writing articles that are short, unsubstantial, or otherwise lacking in helpful specifics&lt;/li&gt;
    &lt;li&gt;Produce pages with great care and attention to detail&lt;/li&gt;
    &lt;li&gt;Make users happy from reading your articles&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;metadata&quot;&gt;Metadata&lt;/h3&gt;

&lt;p&gt;Google does not use the keywords meta tag in web ranking&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html&quot;&gt;
  &lt;p&gt;At least for Google’s web search results currently (September 2009),
the answer is no. Google doesn’t use the “keywords” meta tag in our
web search ranking.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Matt Cutts, Search Quality Team &lt;a href=&quot;https://webmasters.googleblog.com/2009/09/google-does-not-use-keywords-meta-tag.html&quot;&gt;2009-09-21&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mobile&quot;&gt;Mobile&lt;/h3&gt;

&lt;p&gt;Mobile friendly contribute to a positive ranking.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2016/08/helping-users-easily-access-content-on.html&quot;&gt;
  &lt;p&gt;To keep search results uncluttered, we’ll be removing the label,
although the mobile-friendly criteria will continue to be a ranking
signal.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Helping users easily access content on mobile &lt;a href=&quot;https://webmasters.googleblog.com/2016/08/helping-users-easily-access-content-on.html&quot;&gt;2016-08-23&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mobile friendly websites are boosted on mobile search results.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2015/04/rolling-out-mobile-friendly-update.html&quot;&gt;
  &lt;p&gt;As we noted earlier this year, today’s the day we begin globally
rolling out our mobile-friendly update. We’re boosting the ranking
of mobile-friendly pages on mobile search results. Now searchers can
more easily find high-quality and relevant results where text is
readable without tapping or zooming, tap targets are spaced
appropriately, and the page avoids unplayable content or horizontal
scrolling.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Rolling out the mobile-friendly update by Takaki Makino and Doantam Phan &lt;a href=&quot;https://webmasters.googleblog.com/2015/04/rolling-out-mobile-friendly-update.html&quot;&gt;2015-04-15&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2016/03/continuing-to-make-web-more-mobile.html&quot;&gt;
  &lt;p&gt;Last year, we started using mobile-friendliness as a ranking signal
on mobile searches. Today we’re announcing that beginning in May,
we’ll start rolling out an update to mobile search results that
increases the effect of the ranking signal to help our users find
even more pages that are relevant and mobile-friendly.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Klemen Kloboves, Software Engineer  &lt;a href=&quot;https://webmasters.googleblog.com/2016/03/continuing-to-make-web-more-mobile.html&quot;&gt;2016-03-16&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mobile-friendly websites are more likely to appear in search results
over other non-mobile friendly sites with similar content.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2015/02/finding-more-mobile-friendly-search.html&quot;&gt;
  &lt;p&gt;Starting April 21, we will be expanding our use of
mobile-friendliness as a ranking signal. This change will affect
mobile searches in all languages worldwide and will have a
significant impact in our search results. Consequently, users will
find it easier to get relevant, high quality search results that are
optimized for their devices.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Takaki Makino, Chaesang Jung, and Doantam Phan in Finding more mobile-friendly search results &lt;a href=&quot;https://webmasters.googleblog.com/2015/02/finding-more-mobile-friendly-search.html&quot;&gt;2015-02-26&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;social&quot;&gt;Social&lt;/h3&gt;

&lt;p&gt;Google +1 button amount of shares may increase web pages ranking.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2011/03/introducing-1-button.html&quot;&gt;
  &lt;p&gt;We’ll add +1 buttons to search results and ads on Google.com. We’ll
also start to look at +1’s as one of the many signals we use to
determine a page’s relevance and ranking, including social signals
from other services. For +1’s, as with any new ranking signal, we’ll
be starting carefully and learning how those signals affect search
quality over time.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;David Byttow, Software Engineer, +1 Button &lt;a href=&quot;https://webmasters.googleblog.com/2011/03/introducing-1-button.html&quot;&gt;2011-03-08&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;speed&quot;&gt;Speed&lt;/h3&gt;

&lt;p&gt;Site speed is a ranking signal, fast loading websites are preferred.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2010/04/using-site-speed-in-web-search-ranking.html&quot;&gt;
  &lt;p&gt;You may have heard that here at Google we’re obsessed with speed, in
our products and on the web. As part of that effort, today we’re
including a new signal in our search ranking algorithms: site
speed. Site speed reflects how quickly a website responds to web
requests.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Amit Singhal, Google Fellow and Matt Cutts, Principal Engineer, Google Search Quality Team &lt;a href=&quot;https://webmasters.googleblog.com/2010/04/using-site-speed-in-web-search-ranking.html&quot;&gt;2010-04-09&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why is speed important to Google? Websites with fast loading times
are good to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;internet users, improving user experience while browsing&lt;/li&gt;
  &lt;li&gt;reduces operating costs&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://webmasters.googleblog.com/2010/04/using-site-speed-in-web-search-ranking.html&quot;&gt;
  &lt;p&gt;Faster sites create happy users and we’ve seen in our internal
studies that when a site responds slowly, visitors spend less time
there. But faster sites don’t just improve user experience; recent
data shows that improving site speed also reduces operating costs.&lt;/p&gt;
  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Amit Singhal, Google Fellow and Matt Cutts, Principal Engineer, Google Search Quality Team &lt;a href=&quot;https://webmasters.googleblog.com/2010/04/using-site-speed-in-web-search-ranking.html&quot;&gt;2010-04-09&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://webmasters.googleblog.com&quot;&gt;http://webmasters.googleblog.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://support.google.com&quot;&gt;http://support.google.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developers.google.com&quot;&gt;http://developers.google.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/essential-seo-tips-and-techniques-from-trusted-sources/</link>
        <guid isPermaLink="true">https://simpleit.rocks/essential-seo-tips-and-techniques-from-trusted-sources/</guid>
        
        <category>ranking,</category>
        
        <category>seo</category>
        
        
        <category>docs</category>
        
        <category>web</category>
        
        <category>seo</category>
        
      </item>
    
      <item>
        <title>Find Out If Your Joomla Site Has Been Hacked</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Like every popular Content Management System, there is always going to
be at risk of being attacked or hacked. This article explore some
methods to try to detect the integrity of your website.&lt;/p&gt;

&lt;p&gt;Monitor your site regularly.&lt;/p&gt;

&lt;h2 id=&quot;check-web-server-logs&quot;&gt;Check web server logs&lt;/h2&gt;

&lt;p&gt;Check primarily for brute force attacks and attempts to upload
files. With Apache in Ubuntu that would tipically mean to analyze
&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/apache2/access.log&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/log/apache2/error.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For example, there is someone playing around one of my Joomla websites
trying to explode Wordpress vulnerabilities:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;/var/log/apache2/$&lt;/span&gt; &lt;kbd&gt;grep POST access.log&lt;/kbd&gt;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:03 +0000] &quot;POST /wp-content/themes/method/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:14 +0000] &quot;POST /wp-content/themes/modular/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:25 +0000] &quot;POST /wp-content/themes/myriad/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
XXXXXXXX.com:80 193.XXX.XXX.XXX - - [26/Jan/2017:00:07:56 +0000] &quot;POST /wp-content/themes/persuasion/lib/scripts/dl-skin.php HTTP/1.1&quot; 500 363 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; rv:34.0) Gecko/20100101 Firefox/34.0&quot;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;detect-modified-php-files&quot;&gt;Detect modified PHP files&lt;/h2&gt;

&lt;p&gt;You can look for PHP files that were modified recently, or after some
date you are sure didn’t perform anything to the source code.&lt;/p&gt;

&lt;p&gt;That would show new possibly uploaded scripts or modified files with
injected code in them.&lt;/p&gt;

&lt;h3 id=&quot;find-files-modified-recently&quot;&gt;Find files modified recently&lt;/h3&gt;

&lt;p&gt;To find recently modified files: &lt;kbd&gt;find /path/to/dir -type f -mtime -7 -ls&lt;/kbd&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;-mtime&lt;/code&gt; parameter detects when file’s data was last modified
&lt;em&gt;n&lt;/em&gt;24* hours ago, in that case we analyze the previous 7 days.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -type f -mtime -7 -ls&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;find-files-modified-after-a-specific-date&quot;&gt;Find files modified after a specific date&lt;/h3&gt;

&lt;p&gt;List files in given directory modified after given date &lt;kbd&gt; find
/path/to/dir -newermt &quot;yyyy-mm-dd&quot;&lt;/kbd&gt;.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;-newerXY reference
              Compares the timestamp of the current file with reference.  The reference argument is normally the name  of  a  file
              (and  one  of its timestamps is used for the comparison) but it may also be a string describing an absolute time.  X
              and Y are placeholders for other letters, and these letters select which time belonging to how reference is used for
              the comparison.&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          a   The access time of the file reference
          B   The birth time of the file reference
          c   The inode status change time of reference
          m   The modification time of the file reference
          t   reference is interpreted directly as a time
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find man page&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this example we look for files modified with the current directory
as the base directory and modified after “2016-12-01”.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -newermt &quot;2017-01-25&quot; -ls&lt;/kbd&gt;
1089538    4 drwxr-xr-x   2 marcanuy www-data     4096 Jan 25 04:13 ./website/logs
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;finding-hacked-files-with-pattern-matching&quot;&gt;Finding hacked files with pattern matching&lt;/h3&gt;

&lt;p&gt;Most of the time injected code will be obfuscated, making it harder to
look for obvious patterns, but we can try some alternatives though.&lt;/p&gt;

&lt;p&gt;This code would be tipically inserted as the first line of the PHP
file, starting with a variable, so we can look for that pattern, first
line starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;?php $&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;grep -m 1 -r &lt;span class=&quot;s1&quot;&gt;'^&amp;lt;?php \$'&lt;/span&gt; .&amp;lt;/kbd&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./website/components/com_users/views/profile/tmpl/default_params.php:&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFieldset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'params'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
./website/administrator/cache/com_ajax3j/9411v11.php:&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$coi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x73&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x72&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zioj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x73&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x65&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x36&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x5f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x64&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x6f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$jd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;114&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x5f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x74&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$coi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$zioj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$jd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])));&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;die&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;First line of the output looks fine, but the second line looks a bit
more than suspicious code, we can decode it and understand what it is
doing before removing it.&lt;/p&gt;

&lt;h2 id=&quot;files-with-wrong-permissions&quot;&gt;Files with wrong permissions&lt;/h2&gt;

&lt;p&gt;Check out for writable upload directories. The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command can be used to scan for files and folder with
permission 777.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -type f,d -perm 0777 -print &lt;/kbd&gt;
&lt;/pre&gt;

&lt;blockquote class=&quot;blockquote&quot;&gt;
  &lt;p&gt;-perm mode
              File’s  permission  bits  are  exactly  mode (octal or sym‐
              bolic).  Since an exact match is required, if you  want  to
              use this form for symbolic modes, you may have to specify a
              rather complex mode string.  For example -perm  g=w  will
              only  match  files  which have mode 0020 (that is, ones for
              which group write permission is the only  permission  set).
              It  is more likely that you will want to use the / or -
              forms, for example -perm -g=w,  which  matches  any  file
              with  group write permission.  See the EXAMPLES section for
              some illustrative examples.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Find man page&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also we can choose many file types at once separating them with ‘,’
like &lt;code class=&quot;highlighter-rouge&quot;&gt;-type=d,f&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; stands for &lt;em&gt;directory&lt;/em&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; for &lt;em&gt;files&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then we can modify it a bit to scan through all the 777 files on the
server and show ones with &lt;code class=&quot;highlighter-rouge&quot;&gt;.php&lt;/code&gt; to look for uploaded scripts:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;find . -name &quot;*php&quot; -type f -perm 777&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;A lot of people recommends to install a clean backup after being
hacked, this approach will fail sooner or later because you need to
know what failed to prevent happening again.&lt;/p&gt;

&lt;p&gt;This article covers some basic strategies for identifying compromised
files, attacks are constant with varying methods so it is important to
know commands and strategies to recover our sites and keep them safe.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gregfreeman.io/2013/how-to-tell-if-your-php-site-has-been-compromised/&quot;&gt;http://www.gregfreeman.io/2013/how-to-tell-if-your-php-site-has-been-compromised/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bluebridgedev.com/hacked-joomla-files&quot;&gt;https://www.bluebridgedev.com/hacked-joomla-files&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.joomshaper.com/blog/my-joomla-site-was-hacked-what-to-do&quot;&gt;https://www.joomshaper.com/blog/my-joomla-site-was-hacked-what-to-do&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html&quot;&gt;https://www.google.com/transparencyreport/safebrowsing/diagnostic/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Joomla Hacking Compendium &lt;a href=&quot;https://www.exploit-db.com/papers/15780/&quot;&gt;https://www.exploit-db.com/papers/15780/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/find-out-if-your-joomla-site-has-been-hacked/</link>
        <guid isPermaLink="true">https://simpleit.rocks/find-out-if-your-joomla-site-has-been-hacked/</guid>
        
        
        <category>docs</category>
        
        <category>php</category>
        
        <category>joomla</category>
        
      </item>
    
      <item>
        <title>What Are The Supported Language Highlighters In Jekyll</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;To highlight code snippets in Jekyll post’s, there are many
highlighters that can be used. Jekyll comes with &lt;em&gt;Rouge&lt;/em&gt; by
default.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://github.com/jneen/rouge&quot;&gt;
  &lt;p&gt;Rouge is a pure-ruby syntax highlighter. It can highlight 100
different languages, and output HTML or ANSI 256-color text. Its
HTML output is compatible with stylesheets designed for pygments.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;Rouge &lt;a href=&quot;https://github.com/jneen/rouge&quot;&gt;project&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;p&gt;This article explores how to see the languages that Jekyll support in
your current environment and the list of languages for which Jekyll
can generate syntax highlighting in posts.&lt;/p&gt;

&lt;h2 id=&quot;command&quot;&gt;Command&lt;/h2&gt;

&lt;p&gt;To know which languages can have code syntax highlighted, we can user
the command &lt;code class=&quot;highlighter-rouge&quot;&gt;rougify&lt;/code&gt; that is part of
the &lt;a href=&quot;https://rubygems.org/gems/rouge&quot;&gt;rouge gem&lt;/a&gt; already installed by Jekyll.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;rougify --help&lt;/kbd&gt;
usage: rougify [command] [args...]

where &lt;command /&gt; is one of:
        highlight       highlight code
        help            print help info
        style           print CSS styles
        list            list available lexers
        version         print the rouge version number

See `rougify help &lt;command /&gt;` for more info.
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;p&gt;As of &lt;em&gt;rouge&lt;/em&gt; version &lt;code class=&quot;highlighter-rouge&quot;&gt;1.11.1&lt;/code&gt;, this is the complete list of languages
that it supports.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;rougify version&lt;/kbd&gt;
1.11.1
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;rougify list&lt;/kbd&gt;
== Available Lexers ==                                                                                                       [168/287]
actionscript: ActionScript [aliases: as,as3]

apache: configuration files for Apache web server

apiblueprint: Markdown based API description language. [aliases: apiblueprint,apib]

applescript: The AppleScript scripting language by Apple Inc. (http://developer.apple.com/applescript/) [aliases: applescript]

biml: BIML, Business Intelligence Markup Language

c: The C programming language

ceylon: Say more, more clearly.

cfscript: CFScript, the CFML scripting language [aliases: cfc]

clojure: The Clojure programming language (clojure.org) [aliases: clj,cljs]

cmake: The cross-platform, open-source build system

coffeescript: The Coffeescript programming language (coffeescript.org) [aliases: coffee,coffee-script]

common_lisp: The Common Lisp variant of Lisp (common-lisp.net) [aliases: cl,common-lisp,elisp,emacs-lisp]

conf: A generic lexer for configuration files [aliases: config,configuration]

coq: Coq (coq.inria.fr)

cpp: The C++ programming language [aliases: c++]

csharp: a multi-paradigm language targeting .NET [aliases: c#,cs]

css: Cascading Style Sheets, used to style web pages

d: The D programming language(dlang.org) [aliases: dlang]

dart: The Dart programming language (dartlang.com)                                                                           [131/287]

diff: Lexes unified diffs or patches [aliases: patch,udiff]

eiffel: Eiffel programming language

elixir: Elixir language (elixir-lang.org) [aliases: elixir,exs]

erb: Embedded ruby template files [aliases: eruby,rhtml]

erlang: The Erlang programming language (erlang.org) [aliases: erl]

factor: Factor, the practical stack language (factorcode.org)

fortran: Fortran 95 Programming Language

gherkin: A business-readable spec DSL ( github.com/cucumber/cucumber/wiki/Gherkin ) [aliases: cucumber,behat]

glsl: The GLSL shader language

go: The Go programming language (http://golang.org) [aliases: go,golang]

gradle: A powerful build system for the JVM

groovy: The Groovy programming language (http://www.groovy-lang.org/)

haml: The Haml templating system for Ruby (haml.info) [aliases: HAML]

handlebars: the Handlebars and Mustache templating languages [aliases: hbs,mustache]

haskell: The Haskell programming language (haskell.org) [aliases: hs]

html: HTML, the markup language of the web

http: http requests and responses

ini: the INI configuration format                                                                                             [95/287]

io: The IO programming language (http://iolanguage.com)

java: The Java programming language (java.com)

javascript: JavaScript, the browser scripting language [aliases: js]

jinja: Django/Jinja template engine (jinja.pocoo.org) [aliases: django]

json: JavaScript Object Notation (json.org)

json-doc: JavaScript Object Notation with extenstions for documentation

jsonnet: An elegant, formally-specified config language for JSON

julia: The Julia programming language [aliases: jl]

kotlin: Kotlin &amp;lt;http://kotlinlang.org&amp;gt;

liquid: Liquid is a templating engine for Ruby (liquidmarkup.org)

literate_coffeescript: Literate coffeescript [aliases: litcoffee]

literate_haskell: Literate haskell [aliases: lithaskell,lhaskell,lhs]

llvm: The LLVM Compiler Infrastructure (http://llvm.org/)

lua: Lua (http://www.lua.org)

make: Makefile syntax [aliases: makefile,mf,gnumake,bsdmake]

markdown: Markdown, a light-weight markup language for authors [aliases: md,mkd]

matlab: Matlab [aliases: m]

moonscript: Moonscript (http://www.moonscript.org) [aliases: moon]                                                            [59/287]

nasm: Netwide Assembler

nginx: configuration files for the nginx web server (nginx.org)

nim: The Nim programming language (http://nim-lang.org/) [aliases: nimrod]

objective_c: an extension of C commonly used to write Apple software [aliases: objc]

ocaml: Objective CAML (ocaml.org)

pascal: a procedural programming language commonly used as a teaching language.

perl: The Perl scripting language (perl.org) [aliases: pl]

php: The PHP scripting language (php.net) [aliases: php,php3,php4,php5]

plaintext: A boring lexer that doesn't highlight anything [aliases: text]

powershell: powershell [aliases: posh]

praat: The Praat scripting language (praat.org)

prolog: The Prolog programming language (http://en.wikipedia.org/wiki/Prolog) [aliases: prolog]

properties: .properties config files for Java

protobuf: Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data [aliases: proto]

puppet: The Puppet configuration management language (puppetlabs.org) [aliases: pp]

python: The Python programming language (python.org) [aliases: py]

qml: QML, a UI markup language [aliases: qml]

r: The R statistics language (r-project.org) [aliases: r,R,s,S]                                                               [23/287]

racket: Racket is a Lisp descended from Scheme (racket-lang.org)

ruby: The Ruby programming language (ruby-lang.org) [aliases: rb]

rust: The Rust programming language (rust-lang.org) [aliases: rs]

sass: The Sass stylesheet language language (sass-lang.com)

scala: The Scala programming language (scala-lang.org) [aliases: scala]

scheme: The Scheme variant of Lisp

scss: SCSS stylesheets (sass-lang.com)

sed: sed, the ultimate stream editor

shell: Various shell languages, including sh and bash [aliases: bash,zsh,ksh,sh]

shell_session: A generic lexer for shell session and command line [aliases: terminal,console]

slim: The Slim template language

smalltalk: The Smalltalk programming language [aliases: st,squeak]

smarty: Smarty Template Engine [aliases: smarty]

sml: Standard ML [aliases: ml]

sql: Structured Query Language, for relational databases

swift: Multi paradigm, compiled programming language developed by Apple for iOS and OS X development. (developer.apple.com/swift)

tap: Test Anything Protocol [aliases: tap]

tcl: The Tool Command Language (tcl.tk)

tex: The TeX typesetting system [aliases: TeX,LaTeX,latex]

toml: the TOML configuration format (https://github.com/mojombo/toml)

tulip: The tulip programming language http://github.com/jneen/tulip [aliases: tlp]

twig: Twig template engine (twig.sensiolabs.org)

typescript: TypeScript, a superset of JavaScript [aliases: ts]

vb: Visual Basic [aliases: visualbasic]

verilog: The System Verilog hardware description language

viml: VimL, the scripting language for the Vim editor (vim.org) [aliases: vim,vimscript,ex]

xml: &lt;desc for=&quot;this-lexer&quot;&gt;XML&lt;/desc&gt;

yaml: Yaml Ain't Markup Language (yaml.org) [aliases: yml]

&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;The list is also available as a wiki page online
at
&lt;a href=&quot;https://github.com/jneen/rouge/wiki/List-of-supported-languages-and-lexers&quot;&gt;Rouge wiki&lt;/a&gt;,
this won’t be always up to date but will cover most of the languages
you will ever need.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To use any of the above languages, you need to enclose the code
snippets with three or more tilde characters &lt;code class=&quot;highlighter-rouge&quot;&gt;~~~&lt;/code&gt; and specify the
language or an alias appending it to the end of the starting line, for
example, to highlight a python snippet the
&lt;a href=&quot;https://kramdown.gettalong.org/syntax.html#fenced-code-blocks&quot;&gt;kramdown markdown parser&lt;/a&gt;
we use &lt;strong&gt;fenced code blocks&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~~ python
# a comment
import datetime

def get_or_create_user(session, model, **kwargs):
    instance = session.query(model).filter_by(twitter_user_id=kwargs[&quot;twitter_user_id&quot;]).first()
	return instance
~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or using the alias &lt;code class=&quot;highlighter-rouge&quot;&gt;py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~~~ py
# ...
~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then when rendered it will look like:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# a comment&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;datetime&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_or_create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twitter_user_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;twitter_user_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/templates/&quot;&gt;https://jekyllrb.com/docs/templates/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jneen/rouge&quot;&gt;https://github.com/jneen/rouge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kramdown.gettalong.org/syntax.html&quot;&gt;https://kramdown.gettalong.org/syntax.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/what-are-the-supported-language-highlighters-in-jekyll/</link>
        <guid isPermaLink="true">https://simpleit.rocks/what-are-the-supported-language-highlighters-in-jekyll/</guid>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Using Clamav Antivirus In Ubuntu</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;There are viruses for all platforms, they are just more common on
Windows.&lt;/p&gt;

&lt;p&gt;Having an antivirus in Linux is just another tool to help you protect
the system, you won’t be entirely safe just using it, you also need
safe practices.&lt;/p&gt;

&lt;p&gt;We will install &lt;em&gt;ClamAV&lt;/em&gt;, one of the most popular antivirus software
for Linux.&lt;/p&gt;

&lt;blockquote class=&quot;blockquote&quot; cite=&quot;https://www.clamav.net/&quot;&gt;
  &lt;p&gt;ClamAV® is an open source antivirus engine for detecting trojans,
viruses, malware &amp;amp; other malicious threats.&lt;/p&gt;

  &lt;footer class=&quot;blockquote-footer&quot;&gt; &lt;cite&gt;&lt;a href=&quot;https://www.clamav.net/&quot;&gt;&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;why-do-we-need-antivirus-in-linux&quot;&gt;Why do we need antivirus in Linux&lt;/h2&gt;

&lt;p&gt;My choice is to have an antivirus to run from time to time or at
suspicious files and folders, but &lt;strong&gt;not having it running as
daemon&lt;/strong&gt; to avoid a performance decrease in the system.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;To install we use the &lt;em&gt;clamav&lt;/em&gt; package:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;apt-get install clamav&lt;/kbd&gt;
Reading package lists... Done
Building dependency tree       
Reading state information... Done
Suggested packages:
  clamav-docs
The following NEW packages will be installed:
  clamav
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 0 B/90.5 kB of archives.
After this operation, 695 kB of additional disk space will be used.
Selecting previously unselected package clamav.
(Reading database ... 34590 files and directories currently installed.)
Preparing to unpack .../clamav_0.99.2+addedllvm-0ubuntu0.14.04.1_amd64.deb ...
Unpacking clamav (0.99.2+addedllvm-0ubuntu0.14.04.1) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Setting up clamav (0.99.2+addedllvm-0ubuntu0.14.04.1) ...
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;update-db&quot;&gt;Update db&lt;/h3&gt;

&lt;p&gt;Now we need to update the signatures so we have our virus database
updated with &lt;code class=&quot;highlighter-rouge&quot;&gt;freshclam&lt;/code&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;#&lt;/span&gt; &lt;kbd&gt;freshclam&lt;/kbd&gt;
ClamAV update process started at Wed Jan 25 15:05:36 2017
Downloading main.cvd [100%]
main.cvd updated (version: 57, sigs: 4218790, f-level: 60, builder: amishhammer)
Downloading daily.cvd [100%]
daily.cvd updated (version: 22948, sigs: 1449757, f-level: 63, builder: neo)
Downloading bytecode.cvd [100%]
bytecode.cvd updated (version: 289, sigs: 57, f-level: 63, builder: neo)
Database updated (5668604 signatures) from db.local.clamav.net (IP: 155.98.64.87)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;scan-commands&quot;&gt;Scan commands&lt;/h2&gt;

&lt;p&gt;To scan a directory recursively we use &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; to just display
the infected files.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;clamscan -r --bell -i ~/Downloads/&lt;/kbd&gt;

----------- SCAN SUMMARY -----------
Known viruses: 5663100
Engine version: 0.99.2
Scanned directories: 61
Scanned files: 380
Infected files: 0
Data scanned: 1077.08 MB
Data read: 551.12 MB (ratio 1.95:1)
Time: 298.129 sec (4 m 58 s)
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;other-notes&quot;&gt;Other notes&lt;/h2&gt;

&lt;p&gt;Some other good security recommendations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;keep software updated&lt;/li&gt;
  &lt;li&gt;beware phishing sites (browsing through web pages that looks like
another popular ones)&lt;/li&gt;
  &lt;li&gt;analyze command before running them or use trusted sources.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/ClamAV&quot;&gt;https://help.ubuntu.com/community/ClamAV&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://askubuntu.com/q/250290/43253&quot;&gt;How do I scan for viruses with ClamAV?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Tested in Ubuntu 16.10&lt;/em&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/using-clamav-antivirus-in-ubuntu/</link>
        <guid isPermaLink="true">https://simpleit.rocks/using-clamav-antivirus-in-ubuntu/</guid>
        
        <category>antivirus,</category>
        
        <category>security</category>
        
        
        <category>docs</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Accessing Specific Items From Data Files In Jekyll</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Having a sample data file, we explore some of the options we have to
access a specific item.&lt;/p&gt;

&lt;p&gt;For the data file &lt;code class=&quot;highlighter-rouge&quot;&gt;projects.yml&lt;/code&gt; located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/_data/projects.yml&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;funtime&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.funtime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really fun&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;supertime&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.supertime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really super&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;How can we access the data item whose project name is &lt;code class=&quot;highlighter-rouge&quot;&gt;funtime&lt;/code&gt;?&lt;/p&gt;

&lt;h1 id=&quot;using-an-index&quot;&gt;Using an index&lt;/h1&gt;

&lt;p&gt;If we know the data item index, we can access them directly, in this
case it is located in the position “0”:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“project”=&amp;gt;”funtime”,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“url”=&amp;gt;”www.funtime.url”,“description”=&amp;gt;”This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fun”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;iterating&quot;&gt;Iterating&lt;/h2&gt;

&lt;p&gt;Iterating through all the data looking for an attribute&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Outputs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“project”=&amp;gt;”funtime”,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“url”=&amp;gt;”www.funtime.url”,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“description”=&amp;gt;”This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fun”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;changing-the-data-file&quot;&gt;Changing the data file&lt;/h2&gt;

&lt;p&gt;The above data file can be optimized to make it more elegant and use
the project name as their key:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;funtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.funtime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really fun&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;supertime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;www.supertime.url&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is really super&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way we can access each of the items directly:&lt;/p&gt;

&lt;div class=&quot;language-liquid highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So it would output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“url”=&amp;gt;”www.funtime.url”,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“description”=&amp;gt;”This&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;really&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fun”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/accessing-specific-items-from-data-files-in-jekyll/</link>
        <guid isPermaLink="true">https://simpleit.rocks/accessing-specific-items-from-data-files-in-jekyll/</guid>
        
        
        <category>docs</category>
        
        <category>ruby</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Managing Environment Configuration Variables In Flask With Dotenv</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Often when developing apps with Flask we need to set up environment
variables to keep sensitive information secure and out of version
control.&lt;/p&gt;

&lt;p&gt;This article describes how to set up environment config variables in
Flask with &lt;em&gt;python-dotenv&lt;/em&gt; and why we can’t rely in Flask’ instance
folder.&lt;/p&gt;

&lt;h2 id=&quot;dotenv-versus-instance-folders&quot;&gt;dotenv versus instance folders&lt;/h2&gt;

&lt;p&gt;Flask introduces the concept of &lt;strong&gt;instance folder&lt;/strong&gt;, designed to store
sensitive information like credentials and passwords for your local
environment, the main problem is that
&lt;a href=&quot;/avoid-using-flask-instance-folder-when-deploying-to-heroku/&quot;&gt;it can’t work with ephemeral filesystems&lt;/a&gt; like
the one Heroku uses.&lt;/p&gt;

&lt;p&gt;In this case the perfect fit for this is to use python-dotenv, so we
define environment config variables in Heroku and locally we put them
in &lt;code class=&quot;highlighter-rouge&quot;&gt;/.env&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;First we install it with &lt;kbd&gt;pip install -U python-dotenv&lt;/kbd&gt;&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;&lt;/kbd&gt;
Collecting python-dotenv
  Downloading python-dotenv-0.6.2.tar.gz
Collecting click&amp;gt;=5.0 (from python-dotenv)
  Downloading click-6.7-py2.py3-none-any.whl (71kB)
    100% |████████████████████████████████| 71kB 756kB/s 
Building wheels for collected packages: python-dotenv
  Running setup.py bdist_wheel for python-dotenv ... done
  Stored in directory: /home/user/.cache/pip/wheels/07/08/3a/7591582130baac86479ca3b7cb6314c9878e877645267d25c9
Successfully built python-dotenv
Installing collected packages: click, python-dotenv
  Found existing installation: click 6.6
    Uninstalling click-6.6:
      Successfully uninstalled click-6.6
Successfully installed click-6.7 python-dotenv-0.6.2
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;requirementstxt&quot;&gt;requirements.txt&lt;/h2&gt;

&lt;p&gt;We add the new package to the requirements file.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;pip freeze &amp;gt; requirements.txt&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;gitignore&quot;&gt;gitignore&lt;/h2&gt;

&lt;p&gt;We make sure that we won’t add it to the source code version control
adding it to &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;echo &quot;.env&quot; &amp;gt;&amp;gt; .gitignore&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;add-variables&quot;&gt;add variables&lt;/h2&gt;

&lt;p&gt;Add variables to &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;, optionally copy all the environment variables
from your heroku app to have this as a skeleton to fill with local
variables:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;heroku config -s &amp;gt;&amp;gt; .env&lt;/kbd&gt;
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;-s, –shell         # output config vars in shell format&lt;/p&gt;

&lt;p&gt;or simply add them manually to &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt;, for example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TWITTER_CONSUMER_KEY=MYINCREDIBLEKEY
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;use-the-new-environment-variables&quot;&gt;use the new environment variables&lt;/h2&gt;

&lt;p&gt;Now we can use this environment variables in our Flask app.&lt;/p&gt;

&lt;p&gt;Having the following typical structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myapp
	.env
	myapp
		__init__.py
		myapp.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I like to initialize my app in &lt;code class=&quot;highlighter-rouge&quot;&gt;/myapp/__init.py__&lt;/code&gt;, but it should be
the same if you add this to &lt;code class=&quot;highlighter-rouge&quot;&gt;/myapp/myapp.py&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;flask&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dotenv&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;load_dotenv&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#...&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# load dotenv in the base root&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;APP_ROOT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'..'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# refers to application_top&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dotenv_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APP_ROOT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.env'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;load_dotenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dotenv_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tw_consumer_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TWITTER_CONSUMER_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I find it useful to use &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; for sensitive variables and custom
 paths, and &lt;a href=&quot;/organize-a-flask-project-to-handle-production-and-development-environments-effectively/&quot;&gt;maintain other variables in version control separated by
 server, like development, testing or production&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/managing-environment-configuration-variables-in-flask-with-dotenv/</link>
        <guid isPermaLink="true">https://simpleit.rocks/managing-environment-configuration-variables-in-flask-with-dotenv/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Avoid Using Flask Instance Folder When Deploying To Heroku</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Flask framework comes with an elegant solution to store credentials
and sensitive information, it is the usage of &lt;strong&gt;instance
folders&lt;/strong&gt;. Unfortunately this approach would have not sense if you
plan to deploy your &lt;em&gt;webapp&lt;/em&gt; to Heroku, &lt;strong&gt;flask’s instance folder is
not compatible with Heroku&lt;/strong&gt; because the nature of its filesystem,
that is, the way the files are organized on the disk.&lt;/p&gt;

&lt;h2 id=&quot;instance-folders-problem&quot;&gt;Instance folders problem&lt;/h2&gt;

&lt;p&gt;From Flask 0.8, &lt;a href=&quot;http://flask.pocoo.org/docs/0.12/config/#instance-folders&quot;&gt;instance folders&lt;/a&gt; are the recommended way to store
sensitive information:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;designed to not be under version control and be deployment specific.&lt;/p&gt;

  &lt;p&gt;It’s the perfect place to drop things that either change at runtime or
configuration files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But if you deploy to Heroku, its &lt;em&gt;Dynos&lt;/em&gt; are cycled every 24 hours due
to its &lt;a href=&quot;https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem&quot;&gt;ephemereal system&lt;/a&gt;. As the project’s instance folder would
be out of version control, if you
can
&lt;a href=&quot;http://stackoverflow.com/q/27761986/1165509&quot;&gt;somehow copy it to Heroku&lt;/a&gt;,
it will disappear after some time.&lt;/p&gt;

&lt;blockquote class=&quot;alert alert-info&quot;&gt;
  &lt;p&gt;A dyno is a lightweight Linux container that runs a single
user-specified command. Each dyno gets its own ephemeral filesystem,
with a fresh copy of the most recently deployed code, any files
written will be discarded the moment the dyno is stopped or
restarted&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So the only solution to set all the sensitive information in
production is to set each environment variable, one by one, without
the possibility to drop all your sensitive environment variables in a
&lt;em&gt;config&lt;/em&gt; file in the instance folder.&lt;/p&gt;

&lt;h2 id=&quot;alternative-use-a-local-env-file&quot;&gt;Alternative: use a local .env file&lt;/h2&gt;

&lt;p&gt;To view all of your Flask app’s config vars, you can use &lt;kbd&gt;heroku config&lt;/kbd&gt;.&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;samp&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; heroku config&lt;kbd&gt;&lt;/kbd&gt;
=== myapp-1234 Config Vars
APP_CONFIG_FILE:                /app/config.py
DATABASE_URL:                   postgres://asldfkjwg:2152134jsdfj23i5234j@ec2-194-32-16.compute-2.amazonaws.com:2232/aslkdgjsadj234
&lt;/samp&gt;
&lt;/pre&gt;

&lt;p&gt;Then you can create the same variables for your local environment with
&lt;kbd&gt;$ heroku config:get CONFIG-VAR-NAME -s  &amp;gt;&amp;gt; .env&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;After adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; to avoid committing your local
environment variables, you can customize them locally and add
&lt;code class=&quot;highlighter-rouge&quot;&gt;.env&lt;/code&gt; support to your flask apps in development and deployments with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;python-dotenv&lt;/code&gt;
package: &lt;a href=&quot;https://github.com/theskumar/python-dotenv&quot;&gt;https://github.com/theskumar/python-dotenv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This way we achieve a strict &lt;strong&gt;separation of config from code&lt;/strong&gt;, which
complies with twelve-factor’s third statement: 
&lt;a href=&quot;https://12factor.net/config&quot;&gt;Store config in the environment&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://flask.pocoo.org/docs/0.12/config/#instance-folders&quot;&gt;http://flask.pocoo.org/docs/0.12/config/#instance-folders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://devcenter.heroku.com/articles/dynos&quot;&gt;https://devcenter.heroku.com/articles/dynos&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://12factor.net/config&quot;&gt;https://12factor.net/config&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/avoid-using-flask-instance-folder-when-deploying-to-heroku/</link>
        <guid isPermaLink="true">https://simpleit.rocks/avoid-using-flask-instance-folder-when-deploying-to-heroku/</guid>
        
        <category>heroku,</category>
        
        <category>deployment,</category>
        
        <category>web-development</category>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
      <item>
        <title>Organize A Flask Project To Handle Production And Development Environments Effectively</title>
        <description>&lt;h2 id=&quot;separated-configurations-for-development-and-production&quot;&gt;Separated configurations for Development and Production&lt;/h2&gt;

&lt;p&gt;In most situations, applications would need different configurations
for each environment: Production, Staging, Development, etc.&lt;/p&gt;

&lt;h2 id=&quot;load-default-config-and-an-environment-specific-one&quot;&gt;Load default config and an environment specific one&lt;/h2&gt;

&lt;p&gt;The easiest way to have multiple configurations is to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;use a default configuration that is always loaded and&lt;/li&gt;
  &lt;li&gt;the default configuration is under version control (e.g.: part of the &lt;em&gt;git&lt;/em&gt; project repo) and&lt;/li&gt;
  &lt;li&gt;Use an environment variable to switch between the configurations that overrides the values as needed in each environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Having a configuration that loads configuration values from the
specified &lt;em&gt;config&lt;/em&gt; environment &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'yourapplication.default_settings'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'YOURAPPLICATION_SETTINGS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we create a separate config.py for each &lt;em&gt;env&lt;/em&gt; and export the
configuration path:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export
YOURAPPLICATION_SETTINGS=/path/to/config.py&lt;/kbd&gt;
&lt;/pre&gt;

&lt;p&gt;This way it will always load the default &lt;em&gt;configs&lt;/em&gt; and then our custom
variables from &lt;code class=&quot;highlighter-rouge&quot;&gt;YOURAPPLICATION_SETTINGS&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;instance-paths&quot;&gt;Instance paths&lt;/h2&gt;

&lt;p&gt;From Flask 0.8, there is the concept of &lt;strong&gt;instance folders&lt;/strong&gt;. The
instance folder is a good fit for configuration files because it is
designed to &lt;strong&gt;not be under version control&lt;/strong&gt; and &lt;strong&gt;be deployment specific&lt;/strong&gt;.&lt;/p&gt;

&lt;p class=&quot;alert alert-info&quot;&gt;To keep the &lt;em&gt;instance&lt;/em&gt; folder out of versioning in &lt;em&gt;Git&lt;/em&gt; add &lt;code class=&quot;highlighter-rouge&quot;&gt;instance/&lt;/code&gt;
to &lt;code class=&quot;highlighter-rouge&quot;&gt;/.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, Flask looks for a folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt; in the same
level of your main file or the package.&lt;/p&gt;

&lt;h2 id=&quot;behaviour&quot;&gt;Behaviour&lt;/h2&gt;

&lt;p&gt;Using this folder and having environment specific configuration files
in the &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder we end up having the following directory structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
config/
  __init__.py
  default.py
  development.py
  production.py
instance/
  config.py
myapp/
  __init__.py
  myapp.py
  ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To have the configurations loaded we have to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;load the default config in &lt;code class=&quot;highlighter-rouge&quot;&gt;config/default.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;load configuration from instance folder  &lt;code class=&quot;highlighter-rouge&quot;&gt;instance/config.py&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Load the file specified by the &lt;code class=&quot;highlighter-rouge&quot;&gt;APP_CONFIG_FILE&lt;/code&gt; environment
variable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;myapp/__init__.py&lt;/code&gt; we load them:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# myapp/__init__.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance_relative_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_pyfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'config.py'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_envvar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'APP_CONFIG_FILE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then set the environment variable depending on the server we are
invoking the app:&lt;/p&gt;

&lt;pre class=&quot;shell&quot;&gt;
&lt;span class=&quot;shell-prompt&quot;&gt;$&lt;/span&gt; &lt;kbd&gt;export APP_CONFIG_FILE=/var/www/yourapp/config/production.py&lt;/kbd&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;final&quot;&gt;Final&lt;/h2&gt;

&lt;p&gt;Now your folder structure should look like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myapp
├── config
│   ├── __init__.py     # empty
│   ├── development.py
│   ├── default.py
│   └── production.py
├── instance
│   └── config.py
└── myapp
   ├── __init__.py
   └── myapp.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It can be useful to also add support for &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; to &lt;a href=&quot;/managing-environment-configuration-variables-in-flask-with-dotenv/&quot;&gt;handle sensitive
variables when deploying to Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Explore flask book &lt;a href=&quot;http://explore-flask.readthedocs.io/en/latest/configuration.html&quot;&gt;http://explore-flask.readthedocs.io/en/latest/configuration.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/q/41615662/1165509&quot;&gt;Non existing path when setting up Flask to have separated configurations for each environment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
        <link>https://simpleit.rocks/organize-a-flask-project-to-handle-production-and-development-environments-effectively/</link>
        <guid isPermaLink="true">https://simpleit.rocks/organize-a-flask-project-to-handle-production-and-development-environments-effectively/</guid>
        
        
        <category>docs</category>
        
        <category>python</category>
        
        <category>flask</category>
        
      </item>
    
  </channel>
</rss>
